<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落魄de少爷</title>
  
  <subtitle>运维狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-21T03:12:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhouJinliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode_go_配置</title>
    <link href="http://yoursite.com/2020/03/20/vscode-go-%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/03/20/vscode-go-%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-20T13:25:00.000Z</published>
    <updated>2020-03-21T03:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装vscode</p></li><li><p>插件地址</p></li></ol><p>vscode go 插件安装地址： github go 官网  –  wiki – 搜索IDE – 找到 Visual Studio Code – 里面就有插件的安装地址</p><p><a href="https://github.com/Microsoft/vscode-go" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-go</a></p><ol start="3"><li>安装插件</li></ol><p>几个概念：</p><p>什么是 go mod<br>什么是 gopls<br>什么是 language server</p><p>3.1 安装中文包</p><img src="http://img.zjl.pub/static/images/vscode01.png"><img src="http://img.zjl.pub/static/images/vscode02.png"><img src="http://img.zjl.pub/static/images/vscode03.png"><img src="http://img.zjl.pub/static/images/vscode04.png"><p>3.2 golang工具安装</p><img src="http://img.zjl.pub/static/images/vscode05.png"><p>3.3 其他工具安装</p><p>国内在访问 go 官网的时候，网络会有限制，可以手工安装。</p><p>手动安装方法：</p><p><a href="https://github.com/Microsoft/vscode-go/wiki" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-go/wiki</a></p><img src="http://img.zjl.pub/static/images/vscode06.png"><p>gocode        : 官方说 使用gopls ，目前还没搞懂这玩意<br>go-outline    : go get -u github.com/ramya-rao-a/go-outline<br>go-symbols    : go get -u github.com/newhook/go-symbols<br>gopkgs        : go get -u github.com/uudashr/gopkgs/cmd/gopkgs<br>guru          : go get -u golang.org/x/tools/cmd/guru<br>gorename      : go get -u golang.org/x/tools/cmd/gorename<br>goreturns     : go get -u github.com/sqs/goreturns  (not needed if using language server)<br>goimports     : go get -u golang.org/x/tools/cmd/goimports  (not needed if using language server)<br>godef         : go get -u github.com/rogpeppe/godef (not needed if using language server)<br>gogetdoc      : go get -u github.com/zmb3/gogetdoc  (not needed if using language server) 官方说vscode已经支持，那是不是可以不用安装了？<br>godoc         : (not needed if using language server)<br>golint        : go get -u golang.org/x/lint/golint<br>megacheck     : 没看明白怎么安装<br>golangci-lint : 没看明白怎么安装<br>revive        : 没看明白怎么安装<br>dlv           : 没看明白怎么安装<br>gomodifytags  : go get -u github.com/fatih/gomodifytags<br>goplay        : go get -u github.com/haya14busa/goplay<br>impl          : go get -u github.com/josharian/impl<br>gotype-live   : 没看明白怎么安装<br>gotests       : go get -u github.com/cweill/gotests/…<br>go-langserver : go get -u github.com/sourcegraph/go-langserver<br>fillstruct    : go get -u github.com/davidrjenni/reftools/cmd/fillstruct</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vscode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;vscode go 插件安装地址： github go 官网  –  wiki – 搜索IDE – 找到 Visual Studio Code – 里面就有
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="http://yoursite.com/2020/03/11/go%E7%89%B9%E5%BE%81/"/>
    <id>http://yoursite.com/2020/03/11/go%E7%89%B9%E5%BE%81/</id>
    <published>2020-03-11T06:17:18.000Z</published>
    <updated>2020-03-20T04:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>静态类型并具有丰富的内置类型</p><p>动态类型语言</p><p>动态类型语言是指在运行期间才去做数据类型检查的语言。也就是说，在用动态类型的语言编程时，永远不用给任何变量指定数据类型，该语言会在你第一次赋值给变量的时候，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其它的各种脚本语言如VBScript也多少属于动态类型语言。</p><p>静态类型语言</p><p>静态类型语言与动态类型语言刚好相反，它的数据类型是在编译期间检查的。也就是说，在编写程序的时候就要声明所有变量的数据类型。C/C++是静态类型语言的典型带便，其它的静态类型语言还有C#、Java等。</p><p>go内置数据类型</p><p>布尔类型 bool<br>整型 int8,uint8(byte),int16,uint16,int32,uint32,int64,uint64,int,uint,uintptr<br>浮点类型 float32,float64<br>复数类型 complex64,complex128<br>字符串 string<br>字符类型 rune<br>错误类型 error<br>指针 pointer<br>数组 array<br>切片 slice<br>字典 map<br>通道 chan<br>结构体 struct<br>接口 interface</p></li><li><p>函数多返回值</p><p>一个函数被调用后，返回给调用处的执行结果，叫做函数的返回值。调用处需要使用变量接收该结果函数有多个返回值。</p></li><li><p>错误处理机制</p><p>延迟处理</p></li><li><p>语言层并发</p><p>goroutine是go最基本的执行单元。</p></li><li><p>面向对象</p><p>使用类型，组合，接口来实现面向对象思想</p></li><li><p>反射</p></li><li><p>CGO</p><p>用于调用C语言实现的模块</p></li><li><p>自动垃圾回收</p></li><li><p>静态编译</p></li><li><p>交叉编译</p></li><li><p>易于部署</p></li><li><p>基于BSD协议完全开放</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态类型并具有丰富的内置类型&lt;/p&gt;
&lt;p&gt;动态类型语言&lt;/p&gt;
&lt;p&gt;动态类型语言是指在运行期间才去做数据类型检查的语言。也就是说，在用动态类型的语言编程时，永远不用给任何变量指定数据类型，该语言会在你第一次赋值给变量的时候，在内部将数据类型记录下来。P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常见的学习网站</title>
    <link href="http://yoursite.com/2020/02/29/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2020/02/29/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</id>
    <published>2020-02-29T06:49:23.000Z</published>
    <updated>2020-02-29T14:44:03.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阿里云大学"><a href="#阿里云大学" class="headerlink" title="阿里云大学"></a>阿里云大学</h2><p>edu.aliyun.com</p><h2 id="51cto"><a href="#51cto" class="headerlink" title="51cto"></a>51cto</h2><p>51cto.com</p><h2 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h2><p><a href="http://www.infoq.cn" target="_blank" rel="noopener">www.infoq.cn</a></p><h2 id="IT大咖说"><a href="#IT大咖说" class="headerlink" title="IT大咖说"></a>IT大咖说</h2><p>itdks.com</p><h2 id="宋净超博客"><a href="#宋净超博客" class="headerlink" title="宋净超博客"></a>宋净超博客</h2><p><a href="https://jimmysong.io" target="_blank" rel="noopener">https://jimmysong.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阿里云大学&quot;&gt;&lt;a href=&quot;#阿里云大学&quot; class=&quot;headerlink&quot; title=&quot;阿里云大学&quot;&gt;&lt;/a&gt;阿里云大学&lt;/h2&gt;&lt;p&gt;edu.aliyun.com&lt;/p&gt;
&lt;h2 id=&quot;51cto&quot;&gt;&lt;a href=&quot;#51cto&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kafka</title>
    <link href="http://yoursite.com/2020/02/24/Kafka/"/>
    <id>http://yoursite.com/2020/02/24/Kafka/</id>
    <published>2020-02-24T00:49:29.000Z</published>
    <updated>2020-02-24T04:26:13.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka-SSL"><a href="#Kafka-SSL" class="headerlink" title="Kafka SSL"></a>Kafka SSL</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kafka-SSL&quot;&gt;&lt;a href=&quot;#Kafka-SSL&quot; class=&quot;headerlink&quot; title=&quot;Kafka SSL&quot;&gt;&lt;/a&gt;Kafka SSL&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我整理的有关jenkins cicd的方法</title>
    <link href="http://yoursite.com/2020/02/22/%E6%88%91%E6%95%B4%E7%90%86%E7%9A%84%E6%9C%89%E5%85%B3jenkins-cicd%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/22/%E6%88%91%E6%95%B4%E7%90%86%E7%9A%84%E6%9C%89%E5%85%B3jenkins-cicd%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-22T07:06:13.000Z</published>
    <updated>2020-02-27T16:17:58.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><p>salt 环境部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# sudo yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest.el7.noarch.rpm</span><br><span class="line">[root@server ~]# sudo yum clean expire-cache</span><br><span class="line">[root@server ~]# sudo yum install salt-master</span><br><span class="line">[root@server ~]# sudo yum install salt-api</span><br><span class="line">[root@server ~]# pip install pyOpenSSL</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master</span><br><span class="line">需要修改的内容：</span><br><span class="line">auto_accept: True</span><br><span class="line">file_roots: base 修改自己定义的路径</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl enable salt-master.service</span><br><span class="line">[root@server ~]# systemctl start salt-master.service</span><br><span class="line">[root@server ~]# systemctl enable salt-minion salt-api</span><br><span class="line">[root@server ~]# systemctl start salt-minion salt-api</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-key</span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master.d/api.conf</span><br><span class="line">rest_cherrypy:</span><br><span class="line">    port: 8080</span><br><span class="line">    ssl_crt: /etc/pki/tls/certs/localhost.crt</span><br><span class="line">    ssl_key: /etc/pki/tls/certs/localhost.key</span><br><span class="line"></span><br><span class="line">注意：localhost.crt localhost.key 这两个文件我是从其他服务器拷贝过来的</span><br><span class="line">scp -r localhost.* root@39.99.190.4:/etc/pki/tls/certs/</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/minion</span><br><span class="line">修改内容：</span><br><span class="line">master: 改为你salt服务器IP，我以本机为例</span><br><span class="line">id: 设置成你本机的Hostname</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl restart salt-minion</span><br><span class="line">[root@server ~]# netstat -tulnp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:4505            0.0.0.0:*               LISTEN      3549/python</span><br><span class="line">tcp        0      0 0.0.0.0:4506            0.0.0.0:*               LISTEN      3555/python</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      10135/python</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1000/sshd</span><br><span class="line">udp        0      0 127.0.0.1:323           0.0.0.0:*                           523/chronyd</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           683/dhclient</span><br><span class="line">udp6       0      0 ::1:323                 :::*                                523/chronyd</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-key -A</span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">server</span><br><span class="line">Proceed? [n/Y] Y</span><br><span class="line">Key for minion server accepted.</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-call -l info tls.create_self_signed_cert</span><br><span class="line">local:</span><br><span class="line">    Certificate &quot;localhost&quot; already exists</span><br><span class="line"></span><br><span class="line">[root@server ~]# useradd -M -s /sbin/nologin saltapi</span><br><span class="line">[root@server ~]# echo &quot;123456&quot; | passwd saltapi --stdin</span><br><span class="line">更改用户 saltapi 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master.d/eauth.conf</span><br><span class="line">external_auth:</span><br><span class="line">  pam:</span><br><span class="line">    saltapi:</span><br><span class="line">      - .*</span><br><span class="line">      - &apos;@wheel&apos;</span><br><span class="line">      - &apos;@runner&apos;</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl restart salt-master</span><br><span class="line">[root@server ~]# systemctl restart salt-api</span><br><span class="line">[root@server ~]# curl -k https://localhost:8080/login -H &quot;Accept:application/json&quot; -d username=&apos;saltapi&apos; -d password=&apos;123456&apos; -d eauth=&apos;pam&apos;</span><br><span class="line">&#123;&quot;return&quot;: [&#123;&quot;perms&quot;: [&quot;.*&quot;, &quot;@wheel&quot;, &quot;@runner&quot;], &quot;start&quot;: 1582520837.550638, &quot;token&quot;: &quot;368e24807c14dc84811d4a521999bda6cb6e2d4f&quot;, &quot;expire&quot;: 1582564037.550639, &quot;user&quot;: &quot;saltapi&quot;, &quot;eauth&quot;: &quot;pam&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">然后把 salt.tar.gz 的包拷贝过去，这就算基本完成了，salt.tar.gz的内容我放到了github上面</span><br></pre></td></tr></table></figure><p>jenkins环境部署：<br>这里我就不说了，比较简单，重点贴一下 salt-api的脚本文件 在/data/zjl (zjl可以替换成公司的名称)</p><p>deploy.yaml 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># saltstack api server config</span><br><span class="line">salturl: &quot;https://172.16.102.33:8080&quot;</span><br><span class="line">saltusername: &quot;saltapi&quot;</span><br><span class="line">saltpassword: &quot;123456&quot;</span><br><span class="line">logurl: &quot;172.16.102.33&quot;</span><br><span class="line"></span><br><span class="line">#ZJL</span><br><span class="line">#01</span><br><span class="line"></span><br><span class="line">zjl-appname01:</span><br><span class="line">  version: &quot;0.1&quot;</span><br><span class="line">  dev:</span><br><span class="line">      info: &quot;dev evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-dev-ops-docker-04</span><br><span class="line">         ip: 172.16.102.115</span><br><span class="line">  qafc:</span><br><span class="line">      info: &quot;qafc evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-qa-ops-docker-04</span><br><span class="line">         ip: 172.16.102.64</span><br><span class="line"></span><br><span class="line">  online:</span><br><span class="line">      info: &quot;online evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-prod-ops-docker-02</span><br><span class="line">         ip: 172.16.101.20</span><br></pre></td></tr></table></figure><p>salt-api.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 –*-</span><br><span class="line"></span><br><span class="line">import urllib2,urllib</span><br><span class="line">from pprint import pprint</span><br><span class="line">import time</span><br><span class="line">import yaml</span><br><span class="line">import sys,os</span><br><span class="line">import getopt</span><br><span class="line">import commands</span><br><span class="line">import ssl</span><br><span class="line">try:</span><br><span class="line">    import json</span><br><span class="line">except ImportError:</span><br><span class="line">    import simplejson as json</span><br><span class="line">class SaltAPI(object):</span><br><span class="line">    __token_id = &apos;&apos;</span><br><span class="line">    def __init__(self,url,username,password):</span><br><span class="line">        self.__url = url.rstrip(&apos;/&apos;)</span><br><span class="line">        self.__user = username</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">    def token_id(self):</span><br><span class="line">        &apos;&apos;&apos; user login and get token id &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;eauth&apos;: &apos;pam&apos;, &apos;username&apos;: self.__user, &apos;password&apos;: self.__password&#125;</span><br><span class="line">        encode = urllib.urlencode(params)</span><br><span class="line">        obj = urllib.unquote(encode)</span><br><span class="line">        content = self.postRequest(obj,prefix=&apos;/login&apos;)</span><br><span class="line">        try:</span><br><span class="line">            self.__token_id = content[&apos;return&apos;][0][&apos;token&apos;]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise KeyError</span><br><span class="line"></span><br><span class="line">    def postRequest(self,obj,prefix=&apos;/&apos;):</span><br><span class="line">        url = self.__url + prefix</span><br><span class="line">        headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        req = urllib2.Request(url, obj, headers)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def list_all_key(self):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.list_all&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        minions = content[&apos;return&apos;][0][&apos;data&apos;][&apos;return&apos;][&apos;minions&apos;]</span><br><span class="line">        minions_pre = content[&apos;return&apos;][0][&apos;data&apos;][&apos;return&apos;][&apos;minions_pre&apos;]</span><br><span class="line">        return minions,minions_pre</span><br><span class="line"></span><br><span class="line">    def delete_key(self,node_name):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.delete&apos;, &apos;match&apos;: node_name&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][&apos;data&apos;][&apos;success&apos;]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def accept_key(self,node_name):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.accept&apos;, &apos;match&apos;: node_name&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][&apos;data&apos;][&apos;success&apos;]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_noarg_execution(self,tgt,fun):</span><br><span class="line">        &apos;&apos;&apos; Execute commands without parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_execution(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Command execution with parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_execution1(self,tgt,fun):</span><br><span class="line">        &apos;&apos;&apos; Command execution with parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line">        print ret</span><br><span class="line"></span><br><span class="line">    def target_remote_execution(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Use targeting for remote execution &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg, &apos;expr_form&apos;: &apos;nodegroup&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def target_remote_execution1(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Use targeting for remote execution &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line"></span><br><span class="line">    def deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Module deployment &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def async_deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Asynchronously send a command to connected minions &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local_async&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def target_deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Based on the node group forms deployment &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local_async&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg, &apos;expr_form&apos;: &apos;nodegroup&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def json_postRequest(self,obj,prefix=&apos;/&apos;):</span><br><span class="line">        &apos;&apos;&apos; 复杂参数提交 json 结构提交 &apos;&apos;&apos;</span><br><span class="line">        url = self.__url + prefix</span><br><span class="line">        headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        headers[&apos;Accept&apos;] = &apos;application/json&apos;</span><br><span class="line">        headers[&apos;Content-Type&apos;] = &apos;application/json&apos;</span><br><span class="line">        req = urllib2.Request(url, obj, headers)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def url_postRequest(self, jid, prefix=&apos;/jobs/&apos;):</span><br><span class="line">        &apos;&apos;&apos; 复杂参数提交 json 结构提交 &apos;&apos;&apos;</span><br><span class="line">        url = self.__url + prefix + jid</span><br><span class="line">        #headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        #headers[&apos;Accept&apos;] = &apos;application/json&apos;</span><br><span class="line">        print url</span><br><span class="line">        req = urllib2.Request(url)</span><br><span class="line">        req.add_header(&apos;X-Auth-Token&apos;, self.__token_id)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        #return content</span><br><span class="line">        pprint(content)</span><br><span class="line"></span><br><span class="line">    def sls_json_deploy(self,tgt,mods,pillar):</span><br><span class="line">        &apos;&apos;&apos; state.sls 模块功能执行 带pillar 参数传递 &apos;&apos;&apos;</span><br><span class="line">        post_data = []</span><br><span class="line"></span><br><span class="line">        my_post= &#123;&#125;</span><br><span class="line">        #my_post[&quot;client&quot;] = &quot;local&quot;</span><br><span class="line">        my_post[&quot;client&quot;] = &quot;local_async&quot;</span><br><span class="line">        my_post[&quot;tgt&quot;] = tgt</span><br><span class="line">        my_post[&quot;fun&quot;] = &quot;state.sls&quot;</span><br><span class="line">        #arg = [&quot;deploy&quot;, &quot;pillar=&#123;&apos;web&apos;: &apos;test&apos;&#125;&quot;]</span><br><span class="line">        kwarg= &#123;&apos;mods&apos;: mods,&apos;pillar&apos;:pillar&#125;</span><br><span class="line">        my_post[&quot;kwarg&quot;]= kwarg</span><br><span class="line">        post_data.append(my_post)</span><br><span class="line">        obj = json.dumps(post_data)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.json_postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line">        #return content</span><br><span class="line"></span><br><span class="line">def usage():</span><br><span class="line">    print &apos;&apos;&apos;</span><br><span class="line">Usage: %s [options...]</span><br><span class="line">Options:</span><br><span class="line">    -a/--app_name                       : appname info</span><br><span class="line">    -e/--env                            : deploy env</span><br><span class="line">    -u/--url                            : download resource url</span><br><span class="line">    -w/--war                            : war package name</span><br><span class="line">    -h/--help                           : this help info page</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">    #</span><br><span class="line">    %s -iia openapi -e dev -u http://172.16.20.1:9090 -w openapi-plt-01.war</span><br><span class="line">    &apos;&apos;&apos; % (sys.argv[0],sys.argv[0])</span><br><span class="line"></span><br><span class="line">def load_config():</span><br><span class="line">    base_dir = os.path.abspath(os.path.dirname(sys.argv[0]))</span><br><span class="line">    configFile = &quot;%s/%s&quot; % (base_dir,&quot;deploy.yaml&quot;)</span><br><span class="line">    stream = file(configFile, &apos;r&apos;)</span><br><span class="line">    try:</span><br><span class="line">        data = yaml.load(stream)</span><br><span class="line">        return data</span><br><span class="line">    except BaseException,e:</span><br><span class="line">        print &quot;yaml配置错误，请检查deploy.yaml文件,错误信息如下:&quot;</span><br><span class="line">        print e</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">    global base_dir,DEBUG</span><br><span class="line">    DEBUG = False</span><br><span class="line">    base_dir = os.path.abspath(os.path.dirname(sys.argv[0]))</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        opts, args = getopt.getopt(sys.argv[1:],&apos;a:e:u:w:h:c&apos;)</span><br><span class="line">    except getopt.GetoptError:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    #各个变量保存</span><br><span class="line">    app_name = None</span><br><span class="line">    deploy_env = None</span><br><span class="line">    war_package_name = None</span><br><span class="line">    download_url = None</span><br><span class="line">    for opt, arg in opts:</span><br><span class="line">        if opt in (&apos;-h&apos;, &apos;--help&apos;):</span><br><span class="line">            usage()</span><br><span class="line">            sys.exit()</span><br><span class="line">        elif opt == &apos;-a&apos;:</span><br><span class="line">            app_name = arg</span><br><span class="line">        elif opt == &apos;-e&apos;:</span><br><span class="line">            deploy_env = arg</span><br><span class="line">        elif opt == &apos;-u&apos;:</span><br><span class="line">            download_url = arg</span><br><span class="line">        elif opt == &apos;-w&apos;:</span><br><span class="line">            war_package_name = arg</span><br><span class="line">        elif opt == &apos;-c&apos;:</span><br><span class="line">            load_config()</span><br><span class="line"></span><br><span class="line">    if not app_name or not deploy_env or not war_package_name or not download_url:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    # 单元测试内容</span><br><span class="line">    #print sapi.list_all_key()</span><br><span class="line">    #print sapi.remote_noarg_execution(&apos;salt-dns-doc&apos;,&apos;test.ping&apos;)</span><br><span class="line">    #print sapi.remote_execution(&apos;salt-dns-doc&apos;,&apos;cmd.run&apos;,&apos;hostname -f&apos;)</span><br><span class="line">    #print sapi.remote_execution(&apos;salt-dns-doc&apos;,&apos;cmd.run&apos;,&apos;hostname -f&apos;)</span><br><span class="line"></span><br><span class="line">    # read config info from yaml</span><br><span class="line">    api_config = load_config()</span><br><span class="line"></span><br><span class="line">    sapi = SaltAPI(url=api_config[&apos;salturl&apos;],username=api_config[&apos;saltusername&apos;],password=api_config[&apos;saltpassword&apos;])</span><br><span class="line">    logurl = api_config[&apos;logurl&apos;]</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        project=api_config[app_name][deploy_env][&apos;project&apos;]</span><br><span class="line">        pillar = &#123; &quot;projectname&quot;:project,&quot;appname&quot;:app_name,&quot;url&quot;:download_url,&quot;warname&quot;:war_package_name&#125;</span><br><span class="line">    except:</span><br><span class="line">        print &quot;没有找到app归属的项目名，请检查config.yaml中project参数的配置!&quot;</span><br><span class="line">    # get host list for deploy</span><br><span class="line">    app_mods=&quot;%s.%s.%s&quot; % (&apos;deploy&apos;,app_name,deploy_env)</span><br><span class="line">    try:</span><br><span class="line">        dev_host_list=api_config[app_name][deploy_env][&apos;host&apos;]</span><br><span class="line">    except:</span><br><span class="line">        print &quot;无法获取deploy.yaml中的salt-key,请检查配置!&quot;</span><br><span class="line"></span><br><span class="line">    for host in dev_host_list:</span><br><span class="line">        check_minion_job_count = 1</span><br><span class="line">        while (check_minion_job_count &lt; 15):</span><br><span class="line">            time.sleep(10)</span><br><span class="line">            a=sapi.remote_execution1(host[&apos;hostname&apos;],&apos;saltutil.running&apos;)</span><br><span class="line">            if not a:</span><br><span class="line">                try:</span><br><span class="line">                    jid = sapi.sls_json_deploy(host[&apos;hostname&apos;],app_mods,pillar)</span><br><span class="line">                    print (&apos;%s:Executed command with job ID: &#123;0&#125;&apos;.format(jid)) %(host[&apos;hostname&apos;])</span><br><span class="line">                    time.sleep(40)</span><br><span class="line">                    os.system(&apos;ssh root@%s salt-run jobs.lookup_jid %s&apos; %(logurl,jid))</span><br><span class="line">                    break</span><br><span class="line">                except BaseException,e:</span><br><span class="line">                    print &quot;无法调用salt-minion,请检查salt-key是否有误!&quot;</span><br><span class="line">                    sys.exit()</span><br><span class="line">            else:</span><br><span class="line">               for (k,v) in a[0].items():</span><br><span class="line">                    if k == &apos;jid&apos;:</span><br><span class="line">                        try:</span><br><span class="line">                            minionjid = str(v)</span><br><span class="line">                            print &quot;%s:客户端正在执行任务,任务id为%s&quot; %(host[&apos;hostname&apos;],minionjid)</span><br><span class="line">                            break</span><br><span class="line">                        except:</span><br><span class="line">                            pass</span><br><span class="line">               check_minion_job_count = check_minion_job_count + 1</span><br><span class="line">               if check_minion_job_count == 9:</span><br><span class="line">                   print &apos;检查9次发现jid还在运行,杀掉僵死进程!&apos;</span><br><span class="line">                   sapi.target_remote_execution1(host[&apos;hostname&apos;],&apos;saltutil.kill_job&apos;,minionjid)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>jenkins 配置项目,主要就是 Pipeline script 脚本内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">node&#123;</span><br><span class="line">//调用此脚本需带以下变量：1、APPNAME：项目名称。2、BRANCH：git分支。3、GIT_URL：git工程地址。4、WAR_DIR：代码包路径。5、Email：收件人邮箱地址。</span><br><span class="line">    echo &quot;Building APP $&#123;APPNAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">    stage (&apos;拉取代码&apos;)&#123;</span><br><span class="line">       git branch: &quot;$&#123;BRANCH&#125;&quot;, credentialsId: &apos;ZJL-OP&apos;, url: &quot;$&#123;GIT_URL&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;单元测试 &apos;)&#123;</span><br><span class="line">       echo &quot;starting unitTest......&quot;</span><br><span class="line">       sh &quot;mvn org.jacoco:jacoco-maven-plugin:prepare-agent clean test -Dautoconfig.skip=true -Dmaven.test.skip=false -Dmaven.test.failure.ignore=true&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;代码检测&apos;)&#123;</span><br><span class="line">       sh &quot;cp ../sonar-java.properties sonar-project.properties&quot;</span><br><span class="line">       sh &quot;sed -i &apos;s/demo/$&#123;APPNAME&#125;/g&apos; sonar-project.properties&quot;</span><br><span class="line">       withSonarQubeEnv(&apos;SonarQube&apos;)&#123;</span><br><span class="line">            sh &quot;/data/sonar-scanner/bin/sonar-scanner&quot;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stage (&apos;编译打包&apos;)&#123;</span><br><span class="line">       sh &quot;rm -rf ~/.m2/repository/com/zjl/* &quot;</span><br><span class="line">       sh &quot;mvn clean package -Dmaven.test.skip=true&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;传包归档&apos;)&#123;</span><br><span class="line">       commitChangeset = sh(returnStdout: true, script: &apos;git rev-parse HEAD |cut -c1-7&apos;).trim()</span><br><span class="line">   sh &apos;ssh root@hz01-prod-ops-salt-01 &quot;mkdir -p /var/www/html/backup/dev_qafc_war/$&#123;APPNAME&#125;&quot;&apos;</span><br><span class="line">       sh &quot;scp $&#123;WAR_DIR&#125;/*.jar root@hz01-prod-ops-salt-01:/var/www/html/backup/dev_qafc_war/$&#123;APPNAME&#125;/$&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.jar&quot; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    stage (&apos;发布开发环境&apos;)&#123;       </span><br><span class="line">       sh  &quot;python /data/zjl/salt-api.py -a $APPNAME -e dev -u http://package-dev-qafc.sysadmin.ops.com/backup/dev_qafc_war -w $&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.jar &quot;</span><br><span class="line">    // build job: &apos;deploy&apos;, parameters: [string(name: &apos;APPNAME&apos;, value: &quot;$&#123;APPNAME&#125;&quot;), string(name: &apos;ENV&apos;, value: &apos;dev&apos;), string(name: &apos;PACKAGE&apos;, value: &quot;$&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.war&quot;)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jenkins 配置代码检测截图：</p><img src="http://img.zjl.pub/static/images/jenkins01.png"><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><p>使用 pipeline方式，直接编写每个项目的 jenkinsfile ，然后把jenkinsfile 文件放到 代码的根目录下面，我这边是放在 deploy 目录里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h1&gt;&lt;p&gt;salt 环境部署：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>央行降息_2.17</title>
    <link href="http://yoursite.com/2020/02/18/%E5%A4%AE%E8%A1%8C%E9%99%8D%E6%81%AF-2-17/"/>
    <id>http://yoursite.com/2020/02/18/%E5%A4%AE%E8%A1%8C%E9%99%8D%E6%81%AF-2-17/</id>
    <published>2020-02-18T12:29:32.000Z</published>
    <updated>2020-02-19T06:39:51.337Z</updated>
    
    <content type="html"><![CDATA[<p>2月17日，中国央行宣布：为对冲逆回购到期等因素的影响，维护银行体系流动性合理充裕，2020年2月17日，人民银行开展了2000亿元中期借贷便利操作(MLF)和1000亿元7天期逆回购操作。</p><img src="http://img.zjl.pub/static/images/公告01.png"><p>其中，中期借贷便利中标利率为3.15%，较前次下降10个基点，这个需要重点关注，7天期逆回购操作中标利率为2.4%，与前次持平。这透露出了一个很强烈的信号，央行想要降息了，这也预示着中国在降息上迈出了关键一步，3天以后也就是2月20日的市场报价利率（LPR），将至少有10个基点的降息。因为中间借贷便利（MLF）是目前最主要的 “政策利率” ，是影响当前市场报价利率（LPR）的基本坐标。所谓市场报价利率，就是每月20日由18家银行报价，剔除一个最高价，一个最低价之后的平均价，由央行委托全国银行间同业拆解中心负责统计，发布。各银行的新增贷款，都要参考市场报价利率执行。降息10个基点，就是央行应对这次疫情的系列对策之一。</p><p>事实上，2月3日，央行在逆回购操作的报价里，已经透露了降息10个基点的信号，但今天的信号更加强烈。</p><img src="http://img.zjl.pub/static/images/公告02.png"><p>而前两天，央行副行长潘功胜在国新办发布会也表示：”在量增价降的背景下，整个金融市场利率也在下行。金融市场，货币市场利率变化会影响市场报价利率，现在市场预期 下次中期借贷便利的利率 和2月20日公布的市场报价利率，也会有较大概率下行。”</p><p>来源 <a href="http://www.scio.gov.cn/xwfbh/xwbfbh/wqfbh/42311/42494/wz42496/Document/1672849/1672849.htm" target="_blank" rel="noopener">http://www.scio.gov.cn/xwfbh/xwbfbh/wqfbh/42311/42494/wz42496/Document/1672849/1672849.htm</a></p><img src="http://img.zjl.pub/static/images/提问01.png"><p>那么问题来了，该怎么样看待这个降息？它透露了什么信号？</p><p>其实，降息是实体经济，股市，楼市的利好，它在意料之中。刚才说了，央行从2月3日就传递了降息的信号，后来央行副行长又透露过，所以基本上就是”明示降息”，降息的消息出来后，中国的股市，债券，大宗商品市场都给出了积极反馈，同步上涨。但是现在市场处在缺乏经济数据的前提下，市场集中对逆周期政策发力的预期。</p><p>如今，各位应该警惕当前市场交易节奏的切换，因对逆周期调节的预期已经几乎悉数计入资产价格，而对经济现实的冲击则尚未充分反映。而这次降息幅度并不算大    ，只有10个基点，这现实了管理层不愿意过分刺激资产价格。从历史上看，中国央行标准降息幅度基本是25个基点。去年，央行改变了玩法，一次降息只有5个基点，这次出现严重疫情，也才给了10个基点。这说明，央行在降息上仍然非常谨慎，这背后的原因有三个：</p><p>第一,不愿意给人们有”大水漫灌”的预期，不愿意刺激资产价格，尤其是房价；</p><p>第二，降息力度太大，可能影响人民币汇率，如果贬值过度，会引发主要贸易伙伴的反弹；</p><p>第三，消费价格指数仍然在高位。这个时候去降利率，其实对于稳定物价是非常不利的，在降利率对人民币贬值压力会很大，降利率会推高大宗商品的价格，特别利好资金密集型行业，比如股市，房地产，2.17号的股市大涨也有关系，</p><p>根据中国统计局周一公布的数据：1月居民消费价格指数同比上涨5.4%，其中猪价同比涨幅较上月的97%再度扩大，到了116%，除了猪肉，其他品类也出现了不同程度的上涨，一个很不乐观的预测是，疫情带来的通胀压力可能要持续到二季度。</p><p>此外，央行还希望通过差别式利率，来支持实体经济，支持灾区。事实上，在利率普降10个基点的基础上，还有大量针对灾区，受影响的行业的定向降息，力度动辄是50个基点。所以，目前央行是”普遍降息+定向降息”并举的。</p><p>而这一轮降息后，2020年应该还有降息，至少还有15个基点，甚至更大空间。因为2020年，稳增长难度非常大，所以，未来降息还会出现。至于财政政策的全面发力，也会如期而至，比如进一步减税降费，增加赤字率，增加国债，地方债的发行。至于2020年的广义货币（M2）同比增速，也会有一个明显的反弹。</p><p>接下来，2月20日的市场报价利率，会不会跟着走低呢？</p><img src="http://img.zjl.pub/static/images/利率公告01.png"><p>按照1月20日的利率，如果降息10个基点，则1年期和5年期利率将分别为4.05%和4.70%，其中5年期是房贷的参考利率。所以我们关注的重点，应该是5年期利率是否会同步降息，力度是否一样。去年，央行就曾只降低1年期利率，而不降低5年期。如果5年期不降，2月20日地产股无疑会大跌，对楼市是较大利空。但以现在的情况来看，这次两档利率同时下降的可能性更大一些。至于存量房贷，按照央行的说法都要在3月到8月之间重新签，主要是改变利率基准。因为，以后要以市场报价利率为基准，之前购房者享有的折扣或者上浮，在重签的时候都会体现。建议是签1年一定价，而不要签”利率不变”，因为中国的利率趋势会足步走低。同一天，2月17日，中国统计局正式发布：1月份70个大中城市商品住宅销售价格变动情况。2020年开局，新冠肺炎疫情肆虐，统计局给出的房价走势到底怎么样呢？首先还是来看看一线城市的房价。一手住宅销售价格，环比上涨0.4%，其中：北京持平，上海，广州和深圳分别上涨0.5%，0.3%和0.5%。二手住宅销售价格，环比上涨0.5%，其中：北京上涨0.4%，上海上涨0.2%，广州上涨0.3%，深圳上涨0.7%。可以看出，无论是新房还是二手房，在此次疫情冲击下，在统计局的数据里，北上广深房价”依然坚挺”，市场信心”依然充足”。疫情之下，武汉就不得不提了：一手住宅销售价格，环比上涨0.4%，从这里可以看出，统计局的数据，存在很大的失真，比较武汉是此次疫情最严重的区域，楼市冷淡是肯定的。当然，统计局的数据也和网签数据的延迟性有关，预计2月份开始，房价将出现持续下调。环比来看，1月份一手房价上涨的城市数量为47个，比上月减少3个，房价下调的城市为15个，与上月大体相同，而持平的城市反而增加。如果从同比来看，市场降温则更加明显，房价上涨的城市数量减少11个，房价下调的城市数量增加7个。到了2月份，预计房价上涨的城市数量会快速减少，或因新冠肺炎疫情，或因开发商降价促销。二手房方面，值得一提的是，从去年6月份开始，二手房价格数据已经连续8个月出现超过20个城市下调的情况，也体现了市场走势逐渐从高位开始回落。同时，客观上也说明其受二手房交易市场，一手房交易市场的影响，房东主动降价或减少涨价的做法。预计受疫情影响，2月份房价下调的城市数量会明显增加。在疫情冲击下，由于全国各地的售楼部基本关闭，工地停工，导致市场交易受阻。而2月份以来已经有无锡，西安，上海等10多个省市陆续出台扶持房企的政策，包括延期缴纳土地款，放松商品房预售条件等政策，短期内在一定程度上缓解了其资金周转压力。但是多数城市只是针对房企，并未针对购房者，长期来看，政策对房地产资金链的缓解作用有限。虽然不愿意看到，但疫情如果持续的话，各个地方的房地产调控政策，很可能还会进一步放松。在中国，房地产是集土地财政，货币宽松，居民消费，银行信贷，基建投资为一体，将所有经济要素和生产资料捆绑在一起的”经济神器”。这个神器太过好用，经济稍有疲态就刺激，08年和15年都是这样过来的，屡试不爽（根本停不下来）。房地产作为核心要素，转动起了真个社会的信用链条：房地产商加杠杆买地盖楼，靠卖期货实现高周转；地方政府卖地收税，大搞基础设施建设，繁荣基建产业，又通过城投公司从各种银子银行授信借贷，然后再靠卖地还债，政府债务不断累计；普通老百姓加杠杆买房，繁荣银行信贷，被迫提高个人生成积极性。</p><p>此前，在房地产的带领下，货币实现了快速的流通，房价越涨，货币发行流通就会越多，并且依靠商业银行的信用扩张，广义货币（M2）一路飙升，经济呈现”一片繁荣”的景象。房地产的确为中国经济做出过贡献，完善了基础设施建设，但后果是，造成了整个经济：满是疮疤，后患无穷。    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2月17日，中国央行宣布：为对冲逆回购到期等因素的影响，维护银行体系流动性合理充裕，2020年2月17日，人民银行开展了2000亿元中期借贷便利操作(MLF)和1000亿元7天期逆回购操作。&lt;/p&gt;
&lt;img src=&quot;http://img.zjl.pub/static/i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库开发</title>
    <link href="http://yoursite.com/2020/01/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/01/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/</id>
    <published>2020-01-26T07:13:00.000Z</published>
    <updated>2020-02-03T04:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列一-数据库及SQL-MySQL基础"><a href="#系列一-数据库及SQL-MySQL基础" class="headerlink" title="系列一:数据库及SQL/MySQL基础"></a>系列一:数据库及SQL/MySQL基础</h1><h2 id="课时1-数据库概述"><a href="#课时1-数据库概述" class="headerlink" title="课时1:数据库概述"></a>课时1:数据库概述</h2><h2 id="课时2-Java应用与数据库的关系"><a href="#课时2-Java应用与数据库的关系" class="headerlink" title="课时2:Java应用与数据库的关系"></a>课时2:Java应用与数据库的关系</h2><h2 id="课时3-安装Mysql"><a href="#课时3-安装Mysql" class="headerlink" title="课时3:安装Mysql"></a>课时3:安装Mysql</h2><h2 id="课时4-删除Mysql"><a href="#课时4-删除Mysql" class="headerlink" title="课时4:删除Mysql"></a>课时4:删除Mysql</h2><h2 id="课时5-Mysql安装路径以及配置信息"><a href="#课时5-Mysql安装路径以及配置信息" class="headerlink" title="课时5:Mysql安装路径以及配置信息"></a>课时5:Mysql安装路径以及配置信息</h2><h2 id="课时6-开启关闭服务器以及登录退出客户端"><a href="#课时6-开启关闭服务器以及登录退出客户端" class="headerlink" title="课时6:开启关闭服务器以及登录退出客户端"></a>课时6:开启关闭服务器以及登录退出客户端</h2><h2 id="课时7-SQL语言的概述"><a href="#课时7-SQL语言的概述" class="headerlink" title="课时7:SQL语言的概述"></a>课时7:SQL语言的概述</h2><h2 id="课时8-DDL-数据定义语言-之操作数据库"><a href="#课时8-DDL-数据定义语言-之操作数据库" class="headerlink" title="课时8:DDL(数据定义语言)之操作数据库"></a>课时8:DDL(数据定义语言)之操作数据库</h2><h2 id="课时9-数据类型介绍1"><a href="#课时9-数据类型介绍1" class="headerlink" title="课时9:数据类型介绍1"></a>课时9:数据类型介绍1</h2><h2 id="课时10-数据类型介绍2"><a href="#课时10-数据类型介绍2" class="headerlink" title="课时10:数据类型介绍2"></a>课时10:数据类型介绍2</h2><h2 id="课时11-DDL-数据定义语言-之操作表"><a href="#课时11-DDL-数据定义语言-之操作表" class="headerlink" title="课时11:DDL(数据定义语言)之操作表"></a>课时11:DDL(数据定义语言)之操作表</h2><h2 id="课时12-DML-数据操作语言-之INSERT"><a href="#课时12-DML-数据操作语言-之INSERT" class="headerlink" title="课时12:DML(数据操作语言)之INSERT"></a>课时12:DML(数据操作语言)之INSERT</h2><h2 id="课时13-DML-数据操作语言-之修改记录"><a href="#课时13-DML-数据操作语言-之修改记录" class="headerlink" title="课时13:DML(数据操作语言)之修改记录"></a>课时13:DML(数据操作语言)之修改记录</h2><h2 id="课时14-DML-数据操作语言-之DELETE"><a href="#课时14-DML-数据操作语言-之DELETE" class="headerlink" title="课时14:DML(数据操作语言)之DELETE"></a>课时14:DML(数据操作语言)之DELETE</h2><h2 id="课时15-DCL-数据控制语言"><a href="#课时15-DCL-数据控制语言" class="headerlink" title="课时15:DCL(数据控制语言)"></a>课时15:DCL(数据控制语言)</h2><h2 id="课时16-DQL-数据查询语言-之基础查询之列控制"><a href="#课时16-DQL-数据查询语言-之基础查询之列控制" class="headerlink" title="课时16:DQL(数据查询语言)之基础查询之列控制"></a>课时16:DQL(数据查询语言)之基础查询之列控制</h2><h2 id="课时17-DQL-数据查询语言-之条件查询"><a href="#课时17-DQL-数据查询语言-之条件查询" class="headerlink" title="课时17:DQL(数据查询语言)之条件查询"></a>课时17:DQL(数据查询语言)之条件查询</h2><h2 id="课时18-DQL-数据查询语言-之模糊查询"><a href="#课时18-DQL-数据查询语言-之模糊查询" class="headerlink" title="课时18:DQL(数据查询语言)之模糊查询"></a>课时18:DQL(数据查询语言)之模糊查询</h2><h2 id="课时19-DQL-数据查询语言-之排序"><a href="#课时19-DQL-数据查询语言-之排序" class="headerlink" title="课时19:DQL(数据查询语言)之排序"></a>课时19:DQL(数据查询语言)之排序</h2><h2 id="课时20-DQL-数据查询语言-之聚合函数"><a href="#课时20-DQL-数据查询语言-之聚合函数" class="headerlink" title="课时20:DQL(数据查询语言)之聚合函数"></a>课时20:DQL(数据查询语言)之聚合函数</h2><h2 id="课时21-DQL-数据查询语言-之分组查询"><a href="#课时21-DQL-数据查询语言-之分组查询" class="headerlink" title="课时21:DQL(数据查询语言)之分组查询"></a>课时21:DQL(数据查询语言)之分组查询</h2><h2 id="课时22-DQL-数据查询语言-之limit方言"><a href="#课时22-DQL-数据查询语言-之limit方言" class="headerlink" title="课时22:DQL(数据查询语言)之limit方言"></a>课时22:DQL(数据查询语言)之limit方言</h2><h1 id="系列二-SQL进阶及查询练习"><a href="#系列二-SQL进阶及查询练习" class="headerlink" title="系列二:SQL进阶及查询练习"></a>系列二:SQL进阶及查询练习</h1><h2 id="课时1-单表的查询练习"><a href="#课时1-单表的查询练习" class="headerlink" title="课时1:单表的查询练习"></a>课时1:单表的查询练习</h2><h2 id="课时2-mysql编码问题"><a href="#课时2-mysql编码问题" class="headerlink" title="课时2:mysql编码问题"></a>课时2:mysql编码问题</h2><h2 id="课时3-mysql备份与恢复数据库"><a href="#课时3-mysql备份与恢复数据库" class="headerlink" title="课时3:mysql备份与恢复数据库"></a>课时3:mysql备份与恢复数据库</h2><h2 id="课时4-约束之主键约束"><a href="#课时4-约束之主键约束" class="headerlink" title="课时4:约束之主键约束"></a>课时4:约束之主键约束</h2><h2 id="课时5-主键自增长"><a href="#课时5-主键自增长" class="headerlink" title="课时5:主键自增长"></a>课时5:主键自增长</h2><h2 id="课时6-非空和唯一约束"><a href="#课时6-非空和唯一约束" class="headerlink" title="课时6:非空和唯一约束"></a>课时6:非空和唯一约束</h2><h2 id="课时7-概述模型，对象模型，关系模型"><a href="#课时7-概述模型，对象模型，关系模型" class="headerlink" title="课时7:概述模型，对象模型，关系模型"></a>课时7:概述模型，对象模型，关系模型</h2><h2 id="课时8-外键约束"><a href="#课时8-外键约束" class="headerlink" title="课时8:外键约束"></a>课时8:外键约束</h2><h2 id="课时9-一对一关系"><a href="#课时9-一对一关系" class="headerlink" title="课时9:一对一关系"></a>课时9:一对一关系</h2><h2 id="课时10-多对多关系"><a href="#课时10-多对多关系" class="headerlink" title="课时10:多对多关系"></a>课时10:多对多关系</h2><h2 id="课时11-合并结果集"><a href="#课时11-合并结果集" class="headerlink" title="课时11:合并结果集"></a>课时11:合并结果集</h2><h2 id="课时12-连接查询之内连接-方言"><a href="#课时12-连接查询之内连接-方言" class="headerlink" title="课时12:连接查询之内连接(方言)"></a>课时12:连接查询之内连接(方言)</h2><h2 id="课时13-连接查询之内连接-标签和自然"><a href="#课时13-连接查询之内连接-标签和自然" class="headerlink" title="课时13:连接查询之内连接(标签和自然)"></a>课时13:连接查询之内连接(标签和自然)</h2><h2 id="课时14-连接查询之外连接"><a href="#课时14-连接查询之外连接" class="headerlink" title="课时14:连接查询之外连接"></a>课时14:连接查询之外连接</h2><h2 id="课时15-子查询"><a href="#课时15-子查询" class="headerlink" title="课时15:子查询"></a>课时15:子查询</h2><h2 id="课时16-多表查询练习第1题"><a href="#课时16-多表查询练习第1题" class="headerlink" title="课时16:多表查询练习第1题"></a>课时16:多表查询练习第1题</h2><h2 id="课时17-多表查询练习第2题"><a href="#课时17-多表查询练习第2题" class="headerlink" title="课时17:多表查询练习第2题"></a>课时17:多表查询练习第2题</h2><h2 id="课时18-多表查询练习第4题"><a href="#课时18-多表查询练习第4题" class="headerlink" title="课时18:多表查询练习第4题"></a>课时18:多表查询练习第4题</h2><h2 id="课时19-多表查询练习第5题"><a href="#课时19-多表查询练习第5题" class="headerlink" title="课时19:多表查询练习第5题"></a>课时19:多表查询练习第5题</h2><h2 id="课时20-多表查询练习第7题"><a href="#课时20-多表查询练习第7题" class="headerlink" title="课时20:多表查询练习第7题"></a>课时20:多表查询练习第7题</h2><h2 id="课时21-多表查询练习第8题"><a href="#课时21-多表查询练习第8题" class="headerlink" title="课时21:多表查询练习第8题"></a>课时21:多表查询练习第8题</h2><h2 id="课时22-多表查询练习第9题"><a href="#课时22-多表查询练习第9题" class="headerlink" title="课时22:多表查询练习第9题"></a>课时22:多表查询练习第9题</h2><h2 id="课时23-多表查询练习第10题"><a href="#课时23-多表查询练习第10题" class="headerlink" title="课时23:多表查询练习第10题"></a>课时23:多表查询练习第10题</h2><h2 id="课时24-多表查询练习第11题"><a href="#课时24-多表查询练习第11题" class="headerlink" title="课时24:多表查询练习第11题"></a>课时24:多表查询练习第11题</h2><h2 id="课时25-多表查询练习第13题"><a href="#课时25-多表查询练习第13题" class="headerlink" title="课时25: 多表查询练习第13题"></a>课时25: 多表查询练习第13题</h2><h1 id="系列三-JDBC数据库开发入门"><a href="#系列三-JDBC数据库开发入门" class="headerlink" title="系列三:JDBC数据库开发入门"></a>系列三:JDBC数据库开发入门</h1><h2 id="课时1-什么是JDBC"><a href="#课时1-什么是JDBC" class="headerlink" title="课时1:什么是JDBC"></a>课时1:什么是JDBC</h2><h2 id="课时2-JDBC的原理"><a href="#课时2-JDBC的原理" class="headerlink" title="课时2:JDBC的原理"></a>课时2:JDBC的原理</h2><h2 id="课时3-JDBC完成增删改查"><a href="#课时3-JDBC完成增删改查" class="headerlink" title="课时3:JDBC完成增删改查"></a>课时3:JDBC完成增删改查</h2><h2 id="课时4-JDBC之代码规范化"><a href="#课时4-JDBC之代码规范化" class="headerlink" title="课时4:JDBC之代码规范化"></a>课时4:JDBC之代码规范化</h2><h2 id="课时5-结果集光标与元数据"><a href="#课时5-结果集光标与元数据" class="headerlink" title="课时5:结果集光标与元数据"></a>课时5:结果集光标与元数据</h2><h2 id="课时6-结果集的特性-是否可滚动，是否敏感，是否可更新"><a href="#课时6-结果集的特性-是否可滚动，是否敏感，是否可更新" class="headerlink" title="课时6:结果集的特性(是否可滚动，是否敏感，是否可更新)"></a>课时6:结果集的特性(是否可滚动，是否敏感，是否可更新)</h2><h2 id="课时7-PreparedStatement的用法"><a href="#课时7-PreparedStatement的用法" class="headerlink" title="课时7:PreparedStatement的用法"></a>课时7:PreparedStatement的用法</h2><h2 id="课时8-预处理的原理"><a href="#课时8-预处理的原理" class="headerlink" title="课时8:预处理的原理"></a>课时8:预处理的原理</h2><h2 id="课时9-mysql的预编译功能默认是关闭的"><a href="#课时9-mysql的预编译功能默认是关闭的" class="headerlink" title="课时9:mysql的预编译功能默认是关闭的"></a>课时9:mysql的预编译功能默认是关闭的</h2><h2 id="课时10-JdbcUtils1-0小工具"><a href="#课时10-JdbcUtils1-0小工具" class="headerlink" title="课时10:JdbcUtils1.0小工具"></a>课时10:JdbcUtils1.0小工具</h2><h2 id="课时11-面向接口编程"><a href="#课时11-面向接口编程" class="headerlink" title="课时11:面向接口编程"></a>课时11:面向接口编程</h2><h2 id="课时12-修改day14的登录注册案例，其中dao层为jdbc"><a href="#课时12-修改day14的登录注册案例，其中dao层为jdbc" class="headerlink" title="课时12:修改day14的登录注册案例，其中dao层为jdbc"></a>课时12:修改day14的登录注册案例，其中dao层为jdbc</h2><h2 id="课时13-util包下的Data与sql包下的时间类型之间的转换"><a href="#课时13-util包下的Data与sql包下的时间类型之间的转换" class="headerlink" title="课时13:util包下的Data与sql包下的时间类型之间的转换"></a>课时13:util包下的Data与sql包下的时间类型之间的转换</h2><h2 id="课时14-大数据"><a href="#课时14-大数据" class="headerlink" title="课时14:大数据"></a>课时14:大数据</h2><h2 id="课时15-批处理"><a href="#课时15-批处理" class="headerlink" title="课时15:批处理"></a>课时15:批处理</h2><h1 id="系列四-JDBC数据库开发进阶"><a href="#系列四-JDBC数据库开发进阶" class="headerlink" title="系列四:JDBC数据库开发进阶"></a>系列四:JDBC数据库开发进阶</h1><h2 id="课时1-事务的四大特性-ACID"><a href="#课时1-事务的四大特性-ACID" class="headerlink" title="课时1:事务的四大特性(ACID)"></a>课时1:事务的四大特性(ACID)</h2><h2 id="课时2-Mysql开启和关闭事务"><a href="#课时2-Mysql开启和关闭事务" class="headerlink" title="课时2:Mysql开启和关闭事务"></a>课时2:Mysql开启和关闭事务</h2><h2 id="课时3-JDBC中完成事务处理"><a href="#课时3-JDBC中完成事务处理" class="headerlink" title="课时3:JDBC中完成事务处理"></a>课时3:JDBC中完成事务处理</h2><h2 id="课时4-事务的隔离级别"><a href="#课时4-事务的隔离级别" class="headerlink" title="课时4:事务的隔离级别"></a>课时4:事务的隔离级别</h2><h2 id="课时5-dbcp连接池"><a href="#课时5-dbcp连接池" class="headerlink" title="课时5:dbcp连接池"></a>课时5:dbcp连接池</h2><h2 id="课时6-装饰者模式"><a href="#课时6-装饰者模式" class="headerlink" title="课时6:装饰者模式"></a>课时6:装饰者模式</h2><h2 id="课时7-c3p0连接池的基本使用方式"><a href="#课时7-c3p0连接池的基本使用方式" class="headerlink" title="课时7:c3p0连接池的基本使用方式"></a>课时7:c3p0连接池的基本使用方式</h2><h2 id="课时8-c3p0连接的配置文件使用"><a href="#课时8-c3p0连接的配置文件使用" class="headerlink" title="课时8:c3p0连接的配置文件使用"></a>课时8:c3p0连接的配置文件使用</h2><h2 id="课时9-JdbcUtils"><a href="#课时9-JdbcUtils" class="headerlink" title="课时9:JdbcUtils"></a>课时9:JdbcUtils</h2><h2 id="课时10-JdbcUtils小工具"><a href="#课时10-JdbcUtils小工具" class="headerlink" title="课时10:JdbcUtils小工具"></a>课时10:JdbcUtils小工具</h2><h2 id="课时11-JNDI配置"><a href="#课时11-JNDI配置" class="headerlink" title="课时11:JNDI配置"></a>课时11:JNDI配置</h2><h2 id="课时12-ThreadLocal"><a href="#课时12-ThreadLocal" class="headerlink" title="课时12:ThreadLocal"></a>课时12:ThreadLocal</h2><h2 id="课时13-dbUtils原理"><a href="#课时13-dbUtils原理" class="headerlink" title="课时13:dbUtils原理"></a>课时13:dbUtils原理</h2><h2 id="课时14-dbUtils结果集处理器介绍"><a href="#课时14-dbUtils结果集处理器介绍" class="headerlink" title="课时14:dbUtils结果集处理器介绍"></a>课时14:dbUtils结果集处理器介绍</h2><h2 id="课时15-编写TxQueryRunner配合JdbcUtils来处理事务"><a href="#课时15-编写TxQueryRunner配合JdbcUtils来处理事务" class="headerlink" title="课时15:编写TxQueryRunner配合JdbcUtils来处理事务"></a>课时15:编写TxQueryRunner配合JdbcUtils来处理事务</h2><h2 id="课时16-JdbcUtils处理多线程并发访问问题"><a href="#课时16-JdbcUtils处理多线程并发访问问题" class="headerlink" title="课时16:JdbcUtils处理多线程并发访问问题"></a>课时16:JdbcUtils处理多线程并发访问问题</h2><h2 id="课时17-分页准备工作"><a href="#课时17-分页准备工作" class="headerlink" title="课时17:分页准备工作"></a>课时17:分页准备工作</h2><h2 id="课时18-处理分页各层分工"><a href="#课时18-处理分页各层分工" class="headerlink" title="课时18:处理分页各层分工"></a>课时18:处理分页各层分工</h2><h2 id="课时19-分页处理第一阶段完成"><a href="#课时19-分页处理第一阶段完成" class="headerlink" title="课时19:分页处理第一阶段完成"></a>课时19:分页处理第一阶段完成</h2><h2 id="课时20-分页之页面页码列表计算"><a href="#课时20-分页之页面页码列表计算" class="headerlink" title="课时20:分页之页面页码列表计算"></a>课时20:分页之页面页码列表计算</h2><h2 id="课时21-分页之查询条件丢失问题"><a href="#课时21-分页之查询条件丢失问题" class="headerlink" title="课时21:分页之查询条件丢失问题"></a>课时21:分页之查询条件丢失问题</h2><h2 id="课时22-分页之查询条件保存到PageBean的url中"><a href="#课时22-分页之查询条件保存到PageBean的url中" class="headerlink" title="课时22:分页之查询条件保存到PageBean的url中"></a>课时22:分页之查询条件保存到PageBean的url中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系列一-数据库及SQL-MySQL基础&quot;&gt;&lt;a href=&quot;#系列一-数据库及SQL-MySQL基础&quot; class=&quot;headerlink&quot; title=&quot;系列一:数据库及SQL/MySQL基础&quot;&gt;&lt;/a&gt;系列一:数据库及SQL/MySQL基础&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pod中挂载单个文件的方法</title>
    <link href="http://yoursite.com/2020/01/06/Pod%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/06/Pod%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-06T01:47:44.000Z</published>
    <updated>2020-01-06T01:47:44.953Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用的Dockerfile文件</title>
    <link href="http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84Dockerfile%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84Dockerfile%E6%96%87%E4%BB%B6/</id>
    <published>2020-01-03T01:55:30.000Z</published>
    <updated>2020-02-24T08:44:04.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础JAR"><a href="#基础JAR" class="headerlink" title="基础JAR"></a>基础JAR</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER OPS &quot;Zhou Jinliang&quot;</span><br><span class="line"></span><br><span class="line">ENV REFRESHED_AT 2019-08-24</span><br><span class="line"></span><br><span class="line">RUN yum -y install net-tools &amp;&amp; yum clean all &amp;&amp; \</span><br><span class="line">    mkdir -p /ztocwst/server &amp;&amp; \</span><br><span class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">ADD jdk-8u211-linux-x64.tar.gz /usr/</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME=/usr/jdk1.8.0_211</span><br><span class="line">ENV JRE_HOME=/usr/jdk1.8.0_211/jre</span><br><span class="line">ENV CLASSPATH=.:/usr/jdk1.8.0_211/lib/dt.jar:/usr/jdk1.8.0_211/lib/tools.jar:/usr/jdk1.8.0_211/lib:/usr/jdk1.8.0_211/jre/lib:</span><br><span class="line">ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/jdk1.8.0_211/bin</span><br><span class="line">ENV LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure><h1 id="MAVEN"><a href="#MAVEN" class="headerlink" title="MAVEN"></a>MAVEN</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:centos7</span><br><span class="line">MAINTAINER ZhouJinliang:2020/01/02</span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-maven-3.6.3-bin.tar.gz /usr/local/</span><br><span class="line">RUN yum install epel-release git unzip wget net-tools -y &amp;&amp; yum clean all</span><br><span class="line">WORKDIR /ztocwst</span><br><span class="line">ENV MAVEN_HOME /usr/local/apache-maven-3.6.3</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_231</span><br><span class="line">ENV PATH $PATH:$MAVEN_HOME/bin:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础JAR&quot;&gt;&lt;a href=&quot;#基础JAR&quot; class=&quot;headerlink&quot; title=&quot;基础JAR&quot;&gt;&lt;/a&gt;基础JAR&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用的docker-compose文件</title>
    <link href="http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84docker-compose%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84docker-compose%E6%96%87%E4%BB%B6/</id>
    <published>2020-01-03T01:55:16.000Z</published>
    <updated>2020-01-03T04:25:15.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>docker-compose.yml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:4.0.13</span><br><span class="line">    container_name: redis</span><br><span class="line">    restart: always</span><br><span class="line">    command: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    ports:</span><br><span class="line">      - 6379:6379</span><br><span class="line">    volumes:</span><br><span class="line">      - $PWD/data:/data</span><br><span class="line">      - $PWD/conf/redis.conf:/usr/local/etc/redis/redis.conf</span><br><span class="line">      - /etc/timezone:/etc/timezone</span><br></pre></td></tr></table></figure><p>redis.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">requirepass password</span><br><span class="line">maxclients 20000</span><br></pre></td></tr></table></figure><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>docker-compose.yml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">    db:</span><br><span class="line">        #构建mysql镜像</span><br><span class="line">        image: mysql:5.7.28</span><br><span class="line">        container_name: mysql</span><br><span class="line">        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #设置utf8字符集</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: password</span><br><span class="line">        ports:</span><br><span class="line">          - '3306:3306'</span><br><span class="line">        volumes:</span><br><span class="line">          - "/ztocwst/mysql/db:/var/lib/mysql"</span><br><span class="line">          - "/ztocwst/mysql/conf:/etc/mysql/conf.d"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;docker-compose.yml:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kafka知识点</title>
    <link href="http://yoursite.com/2019/12/13/Kafka%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2019/12/13/Kafka%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2019-12-13T03:03:34.000Z</published>
    <updated>2020-01-03T04:25:02.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka部署"><a href="#kafka部署" class="headerlink" title="kafka部署"></a>kafka部署</h1><h2 id="zookeeper集群安装与部署"><a href="#zookeeper集群安装与部署" class="headerlink" title="zookeeper集群安装与部署"></a>zookeeper集群安装与部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz</span><br><span class="line">tar zxvf apache-zookeeper-3.5.5-bin.tar.gz</span><br><span class="line">mv apache-zookeeper-3.5.5-bin zookeeper</span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ZK_HOME=/opt/zookeeper</span><br><span class="line">export PATH=$PATH:$ZK_HOME/bin</span><br></pre></td></tr></table></figure><p>创建zookeeper实例运行所需的数据目录和日志目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/zookeeper/data</span><br><span class="line">mkdir -p /opt/zookeeper/log</span><br></pre></td></tr></table></figure><p>创建zookeeper实例id文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "1" &gt;/opt/zookeeper/data/myid</span><br><span class="line">echo "2" &gt;/opt/zookeeper/data/myid</span><br><span class="line">echo "3" &gt;/opt/zookeeper/data/myid</span><br></pre></td></tr></table></figure><p>创建实例的配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -f zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改配置文件内容如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/opt/zookeeper/data</span><br><span class="line">dataLogDir=/opt/zookeeper/log</span><br><span class="line">clientPort=2181</span><br><span class="line">server.1=172.16.102.121:2888:3888</span><br><span class="line">server.2=172.16.102.122:2888:3888</span><br><span class="line">server.3=172.16.102.123:2888:3888</span><br></pre></td></tr></table></figure><p>启动Zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /ztocwst/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>查看运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@hz01-qa-ops-kafkassl-01 ~]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /ztocwst/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><p>可以看到有1个leader实例，2个follwer实例。</p><p>CentOS7配置zookeeper开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/lib/systemd/system/zookeeper.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Zookeeper Service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">WorkingDirectory=/opt/zookeeper/</span><br><span class="line">PIDFile=/opt/zookeeper/data/zookeeper_server.pid</span><br><span class="line">SyslogIdentifier=zookeeper</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">ExecStart=/opt/zookeeper/bin/zkServer.sh start</span><br><span class="line">ExecStop=/opt/zookeeper/bin/zkServer.sh stop</span><br><span class="line">Restart=always</span><br><span class="line">TimeoutSec=20</span><br><span class="line">SuccessExitStatus=130 143</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable zookeeper.service</span><br><span class="line">systemctl start zookeeper.service</span><br></pre></td></tr></table></figure><p> 发现启动不来，查看 /var/log/message 的启动日志发现<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zookeeper: Error: JAVA_HOME is not set and java could not be found in PATH.</span><br><span class="line">systemd: zookeeper.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">zookeeper: Error: JAVA_HOME is not set and java could not be found in PATH.</span><br><span class="line">systemd: zookeeper.service: control process exited, code=exited status=1</span><br><span class="line">systemd: Unit zookeeper.service entered failed state.</span><br><span class="line">systemd: zookeeper.service failed.</span><br><span class="line">systemd: zookeeper.service holdoff time over, scheduling restart.</span><br><span class="line">systemd: Stopped Zookeeper Service.</span><br><span class="line">systemd: Started Zookeeper Service.</span><br></pre></td></tr></table></figure><br> 解决办法：<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/java/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></p><h2 id="Encryption-and-Authentication-with-SSL-使用SSL进行加密和身份验证"><a href="#Encryption-and-Authentication-with-SSL-使用SSL进行加密和身份验证" class="headerlink" title="Encryption and Authentication with SSL(使用SSL进行加密和身份验证)"></a>Encryption and Authentication with SSL(使用SSL进行加密和身份验证)</h2><h3 id="SSL-Overview"><a href="#SSL-Overview" class="headerlink" title="SSL Overview"></a>SSL Overview</h3><p> With SSL authentication, the server authenticates the client (also called “2-way authentication”). Since SSL authentication requires SSL encryption, this page shows you how to configure both at the same time. It is a superset of configurations required just for SSL encryption.(通过SSL身份验证，服务器对客户端进行身份验证（也称为“ 2-way身份验证”）。由于SSL身份验证需要SSL加密，因此该页面向您展示如何同时配置两者。它是SSL加密所需的配置的超集。<br>)  </p><p>By default, Apache Kafka® communicates in PLAINTEXT, which means that all data is sent in the clear. To encrypt communication, it is recommended to configure all the Confluent Platform components in your deployment to use SSL encryption.(默认情况下，ApacheKafka®以PLAINTEXT进行通信，这意味着所有数据都是以明文形式发送的。要加密通信，建议将部署中的所有Confluent Platform组件配置为使用SSL加密。)</p><p>Quick note on terminology: Secure Sockets Layer (SSL) is the predecessor of Transport Layer Security (TLS), and SSL has been deprecated since June 2015. However, for historical reasons, Kafka (like Java) uses the term SSL instead of TLS in configuration and code, which can be a bit confusing. This document uses only the term SSL。(关于术语的快速说明：安全套接字层（SSL）是传输层安全性（TLS）的前身，并且自2015年6月起不推荐使用SSL。但是，由于历史原因，Kafka（如Java）在术语中使用SSL代替TLS配置和代码，可能会有些混乱。本文档仅使用术语SSL。)</p><p>SSL can be configured for encryption or authentication. You may configure just SSL encryption (by default SSL encryption includes certificate authentication of the server) and independently choose a separate mechanism for client authentication, e.g. SSL, SASL, etc. Note that SSL encryption, technically speaking, already enables 1-way authentication in which the client authenticates the server certificate. So when referring to SSL authentication, it is really referring to 2-way authentication in which the broker also authenticates the client certificate.(<br>可以将SSL配置为加密或身份验证。您可以仅配置SSL加密（默认情况下，SSL加密包括服务器的证书身份验证），并独立选择单独的客户端身份验证机制，例如SSL，SASL等。请注意，从技术上讲，SSL加密已启用单向身份验证，其中客户端对服务器证书进行身份验证。因此，当提及SSL身份验证时，实际上是指双向身份验证，其中代理也对客户端证书进行身份验证。)</p><p>Note that enabling SSL may have a performance impact due to encryption overhead.</p><p>SSL uses private-key/certificates pairs which are used during the SSL handshake process.</p><ul><li>each broker needs its own private-key/certificate pair, and the client uses the certificate to authenticate the broker</li><li>each logical client needs a private-key/certificate pair if client authentication is enabled, and the broker uses the certificate to authenticate the client</li></ul><p>Each broker and logical client can be configured with a truststore, which is used to determine which certificates (broker or logical client identities) to trust (authenticate). The truststore can be configured in many ways, consider the following two examples:</p><p>1.the truststore contains one or many certificates: the broker or logical client will trust any certificate listed in the truststore<br>2.the truststore contains a Certificate Authority (CA): the broker or logical client will trust any certificate that was signed by the CA in the truststore</p><p>Using the CA (2) is more convenient, because adding a new broker or client doesn’t require a change to the truststore. The CA case (2) is outlined in this diagram.</p><p>However, with the CA case (2), Kafka does not conveniently support blocking authentication for individual brokers or clients that were previously trusted via this mechanism (certificate revocation is typically done via Certificate Revocation Lists or the Online Certificate Status Protocol), so one would have to rely on authorization to block access. In contrast, with case (1), blocking authentication would be achieved by removing the broker or client’s certificate from the truststore.  </p><h3 id="Creating-SSL-Keys-and-Certificates"><a href="#Creating-SSL-Keys-and-Certificates" class="headerlink" title="Creating SSL Keys and Certificates"></a>Creating SSL Keys and Certificates</h3><p>Each machine in the cluster has a public-private key pair, and a certificate to identify the machine. The certificate, however, is unsigned, which means that an attacker can create such a certificate to pretend to be any machine.(<br>群集中的每台计算机都有一个公钥-私钥对，以及用于标识该计算机的证书。但是，该证书是未签名的，这意味着攻击者可以创建这样的证书以假装为任何计算机。)</p><p>Therefore, it is important to prevent forged certificates by signing them for each machine in the cluster. A certificate authority (CA) is responsible for signing certificates. CA works like a government that issues passports - the government validates the identity of the person applying for the passport and then provides a passport in a standard form that is difficult to forge. Other governments verify the form is valid to ensure the passport is authentic. Similarly, the CA signs the certificates, and the cryptography guarantees that a signed certificate is computationally difficult to forge. Thus, as long as the CA is a genuine and trusted authority, the clients have high assurance that they are connecting to the authentic machines.</p><p>The keystore stores each machine’s own identity. The truststore stores all the certificates that the machine should trust. Importing a certificate into one’s truststore also means trusting all certificates that are signed by that certificate. As the analogy above, trusting the government (CA) also means trusting all passports (certificates) that it has issued. This attribute is called the chain of trust, and it is particularly useful when deploying SSL on a large Kafka cluster. You can sign all certificates in the cluster with a single CA, and have all machines share the same truststore that trusts the CA. That way all machines can authenticate all other machines.</p><p>To deploy SSL, the general steps are:</p><ul><li>Generate the keys and certificates(生成密钥和证书)</li><li>Create your own Certificate Authority (CA) (创建自己的证书颁发机构（CA))</li><li>Sign the certificate (签署证书)</li></ul><p>The steps to create keys and sign certificates are enumerated below. You may also adapt a script from confluent-platform-security-tools.git.(下面列举了创建密钥和签名证书的步骤。您也可以从confluent-platform-security-tools.git改编脚本。)</p><p>The definitions of the parameters used in the steps are as follows: (这些步骤中使用的参数的定义如下：)</p><p>1.keystore: the location of the keystore 密钥库的位置<br>2.ca-cert: the certificate of the CA CA的证书<br>3.ca-key: the private key of the CA CA的私钥<br>4.ca-password: the passphrase of the CA CA的密码短语<br>5.cert-file: the exported, unsigned certificate of the server 服务器导出的未签名证书<br>6.cert-signed: the signed certificate of the server 服务器的签名证书</p><h2 id="Kafka集群安装与部署"><a href="#Kafka集群安装与部署" class="headerlink" title="Kafka集群安装与部署"></a>Kafka集群安装与部署</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://apache-mirror.8birdsvideo.com/kafka/2.3.1/kafka_2.12-2.3.1.tgz</span><br><span class="line">tar zxvf kafka_2.12-2.3.1.tgz</span><br><span class="line">ln -s kafka_2.12-2.3.1 kafka</span><br></pre></td></tr></table></figure><p>通用配置修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log.dirs=/opt/kafka/log # 注意要先创建这个日志目录</span><br><span class="line">offsets.topic.replication.factor=3</span><br><span class="line">num.partitions=6</span><br><span class="line">zookeeper.connect=改为你自己的zookeeper</span><br><span class="line"></span><br><span class="line">delete.topic.enable=true</span><br><span class="line">default.replication.factor=3</span><br><span class="line">log.cleaner.delete.retention.ms=7day</span><br></pre></td></tr></table></figure><p>分节点配置修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">broker.id=0 # 另外4台可以依次修改为 1，2，3，4</span><br><span class="line">listeners=PLAINTEXT://hz01-qa-ops-kafkassl-01.ztocwst.com:9092 # 注意做好解析，内网解析内网，外网解析外网。</span><br></pre></td></tr></table></figure><p>开启jmx用于监控</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim kafka-server-start.sh</span><br><span class="line"></span><br><span class="line">if [ "x$KAFKA_HEAP_OPTS" = "x" ]; then</span><br><span class="line">    export KAFKA_HEAP_OPTS="-server -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70"</span><br><span class="line">    export JMX_PORT="9999"</span><br><span class="line">    #export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>配置开机自动启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Apache Kafka server (broker)</span><br><span class="line">Documentation=http://kafka.apache.org/documentation.html</span><br><span class="line">Requires=network.target</span><br><span class="line">After=network.target zookeeper.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">Environment=JAVA_HOME=/usr/local/java/</span><br><span class="line">ExecStart=/opt/kafka/bin/kafka-server-start.sh /ztocwst/kafka/config/server.properties</span><br><span class="line">ExecStop=/opt/kafka/bin/kafka-server-stop.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>配置SASL_SSL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listeners=SSL://:9093,SASL_SSL://:9094</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim kafka_server_jaas.conf</span><br><span class="line"></span><br><span class="line">KafkaServer &#123;</span><br><span class="line">   org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">   username="kafkabroker"</span><br><span class="line">   password="kafkabroker-secret"</span><br><span class="line">   user_kafkabroker="kafkabroker-secret"</span><br><span class="line">   user_client="client-secret";</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="kafka基本操作命令"><a href="#kafka基本操作命令" class="headerlink" title="kafka基本操作命令"></a>kafka基本操作命令</h2><p>创建topic:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 3 --topic test</span><br><span class="line">``` </span><br><span class="line">kafka_topic 删除</span><br><span class="line">第一步: 配置文件 server.properties 增加配置项 delete.topic.enable=true  </span><br><span class="line"></span><br><span class="line">第二步: 依次重启kafka  systemctl stop kafka  systemctl start kafka</span><br><span class="line"></span><br><span class="line">第三步: 删除kafka存储目录，logs.dir 配置 相关 topic 目录</span><br><span class="line"></span><br><span class="line">第四步: 删除命令  ../bin/kafka-topics.sh --delete --zookeeper zk01:2181,zk02:2181,zk03:2181 --delete —topic=name</span><br><span class="line"></span><br><span class="line">还有一种方式可以删除：</span><br><span class="line"></span><br><span class="line">执行上面的 4 步骤，如果发现还没删除 那就：</span><br><span class="line"></span><br><span class="line">第一步：用户 zk客户端工具  执行命令 ./zkCli.sh</span><br><span class="line">第二步：找到 topic 所在的目录  ls /brokers/topics</span><br><span class="line">第三步：找到要删除的 topic 执行命令：rmr /brokers/topics/topic_name ,这样 topic 就被彻底删除了</span><br><span class="line">ps: 被标记为marked for deletion的topic你可以在zookeeper客户端中通过命令获得：ls /admin/delete_topics/topicname</span><br><span class="line"></span><br><span class="line">常用命令：</span><br><span class="line"></span><br><span class="line">查看所有 topic:</span><br><span class="line">../bin/kafka-topics.sh --zookeeper zk01:2181,zk02:2181,zk03:2181 —list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令行操作  </span></span><br><span class="line">```shell</span><br><span class="line">kafka-topics.sh —create —zookeeper ip:2181 —partitions 2 —replication-factor 2 —topic first</span><br><span class="line">kafka-topics.sh — list — zookeeper ip:2181</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">kafka-console-producer.sh -- broker-list ip:9092 —topic first</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">hello</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">world</span></span><br><span class="line"></span><br><span class="line">kafka-console-consumer.sh --zookeeper ip:2181 --topic first --from-beginning</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server ip:9092 --topic first --from-beginning</span><br><span class="line"></span><br><span class="line">kafka-topics.sh --zookeeper ip:2181 --describe --topic first</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kafka部署&quot;&gt;&lt;a href=&quot;#kafka部署&quot; class=&quot;headerlink&quot; title=&quot;kafka部署&quot;&gt;&lt;/a&gt;kafka部署&lt;/h1&gt;&lt;h2 id=&quot;zookeeper集群安装与部署&quot;&gt;&lt;a href=&quot;#zookeeper集群安装与部署&quot; class=&quot;headerlink&quot; title=&quot;zookeeper集群安装与部署&quot;&gt;&lt;/a&gt;zookeeper集群安装与部署&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.5.5/apache-zookeeper-3.5.5-bin.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar zxvf apache-zookeeper-3.5.5-bin.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv apache-zookeeper-3.5.5-bin zookeeper&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export ZK_HOME=/opt/zookeeper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$PATH:$ZK_HOME/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建zookeeper实例运行所需的数据目录和日志目录&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /opt/zookeeper/data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir -p /opt/zookeeper/log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建zookeeper实例id文件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;1&quot; &amp;gt;/opt/zookeeper/data/myid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;2&quot; &amp;gt;/opt/zookeeper/data/myid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;3&quot; &amp;gt;/opt/zookeeper/data/myid&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建实例的配置文件  &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp -f zoo_sample.cfg zoo.cfg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>系列三:Java高级语言特性</title>
    <link href="http://yoursite.com/2019/12/13/%E7%B3%BB%E5%88%97%E4%B8%89-Java%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/12/13/%E7%B3%BB%E5%88%97%E4%B8%89-Java%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7/</id>
    <published>2019-12-13T01:06:54.000Z</published>
    <updated>2020-02-03T04:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-Java多线程编程"><a href="#第1章-Java多线程编程" class="headerlink" title="第1章:Java多线程编程"></a>第1章:Java多线程编程</h1><h2 id="课时2-进程与线程"><a href="#课时2-进程与线程" class="headerlink" title="课时2:进程与线程"></a>课时2:进程与线程</h2><p>&nbsp;<br>在java语言里面最大的特点是支持多线程的开发,也是为数不多支持多线程的编程语言,所以在整个java技术的学习里面,如果你不能够对多线程的概念有一个全面并且细致的了解,则在日后进行一些项目设计的过程之中,尤其是并发访问设计的过程之中就会出现严重的计算缺陷。<br>如果想要理解线程,那么首先就需要了解一下进程的概念,在传统的DOS系统时代,其本身有一个特征:如果你电脑上出现了病毒,那么所有的程序将无法执行,因为传统的DOS采用的是单进程处理,而单进程处理的最大特点:在同一个时间段上只允许一个程序在执行。<br>那么后来到了Windows的时代就开启了多进程的设计,于是就表示在一个时间段上可以同时运行多个程序,并且这些程序将进行资源的轮流抢占。因为当时的CPU只有一个,或者叫单核CPU,所以在同一个时间段上会有多个程序依次执行,但是在同一个时间点上只会有一个进程执行,而后来到了我们多核CPU,由于我们可以处理的CPU多了,那么即便有再多的进程出现,也可以比单核CPU处理的速度有所提升。<br>线程是在进程的基础之上划分的更小的程序单元,线程是在进程基础上创建并且使用的,所以线程依赖于进程的支持,但是线程的启动速度要比进程快很多,所以当使用多线程进行并发处理的时候,其执行的性能要高于进程。进程是在操作系统上的划分,而线程是在进程上的划分,线程的执行速度要比进程更快,而java是多线程的编程语言,所以java在进行并发访问处理的时候可以得到更高的处理性能。  </p><a id="more"></a><h2 id="课时3-Thread类实现多线程"><a href="#课时3-Thread类实现多线程" class="headerlink" title="课时3:Thread类实现多线程"></a>课时3:Thread类实现多线程</h2><p>&nbsp;<br>如果要想在Java之中实现多线程的定义,那么就需要有一个专门的线程的主体类进行线程的执行任务的定义,而这个主体类的定义是有要求的,必须实现特定的接口或者继承特定的父类才可以完成。</p><ul><li>继承 Thread 类实现多线程<br>Java 里面提供有一个 java.lang.Thread的程序类,那么一个类只要继承了此类就表示这个类为线程的主体类。但是并不是说这个类就可以直接实现多线程处理了,因为还需要覆写Thread类中提供的一个 run()方法,而这个方法就属于线程的主方法<br>范例:多线程主体类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; <span class="comment">//实现了线程的主体类,以后所有的操作由这个MyThread展开</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title=title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title=title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;<span class="number">10</span>; x++)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title + <span class="string">"运行, x="</span> +x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>多线程中真正要执行的功能都在 run()方法中定义。需要说明的是,在正常情况下如果要想使用一个类中的方法,那么肯定要产生实例化对象,而后去调用类中提供的方法,但是run()方法是不能够被直接调用的,因为这里面牵扯到一个操作系统的资源调度问题,所以要想启动多线程必须使用start()方法完成。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>).run();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程c"</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(<span class="string">"线程c"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面两个不同点在于 第一个调用了run()方法，第二个调用了start()方法，第一个输出结果还是顺序正常执行的，这是有问题的,run()方法是不能够被直接调用的。不过通过此时的调用你可以发现,虽然调用的是start()方法，但是最终执行的是run()方法,并且所有的线程对象都是交替执行的。<br>疑问:为什么多线程的启动不直接使用run()方法而必须使用Thread类中的start()方法呢？<br>如果要想清楚这个问题,最好的做法是查看一下start()方法的实现操作,可以直接通过源代码观察。IntelljJIDEA 可以通过快捷方式 alt+command+b 键。我们拷贝一部分源代码分析下,找到 start()那部分。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) <span class="comment">// 判断线程的状态</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException(); <span class="comment">//抛出了一个异常</span></span><br><span class="line"></span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0(); <span class="comment">// 在 start()方法里面调用了 start0()方法</span></span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>; <span class="comment">// 只定义了方法名称,但是没有实现</span></span><br></pre></td></tr></table></figure>发现在start()方法里面会抛出一个”IllegalThreadStateException”异常类对象,但是整个的程序并没有使用throws或者是明确的try…catch处理,因为该异常一定是 RuntimeException 的子类,每一个线程类的对象只允许启动一次,如果重复启动则就抛出此异常,例如:下面的代码就会抛出异常。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mldn.demo;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title+<span class="string">"运行,x="</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>);</span><br><span class="line">        mt.start();</span><br><span class="line">        mt.start();<span class="comment">//重复进行了线程的启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>程序错误信息:  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalThreadStateException</span><br><span class="line">    at java.lang.Thread.start(Thread.java:<span class="number">705</span>)</span><br><span class="line">    at cn.mldn.demo.ThreadDemo.main(ThreadDemo.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure>在Java程序执行的过程之中考虑到对于不同层次开发者的需求,所以其支持有本地的操作系统函数调用,而这项技术就被称为JNI(Java Native Interface)技术,但是Java开发过程之中并不推荐这样使用,利用这项技术可以使用一些操作系统提供底层函数进行一些特殊的处理,而在Thread类里面提供的 start0() 就表示需要将此方法依赖于不同的操作系统实现。  <img src="http://img.zjl.pub/static/images/Thread的执行分析.png">  任何情况下,只要定义了多线程,多线程的启动永远只有一种方案:Thread类中的start()方法。</li></ul><h2 id="课时4-Runnable接口实现多线程"><a href="#课时4-Runnable接口实现多线程" class="headerlink" title="课时4:Runnable接口实现多线程"></a>课时4:Runnable接口实现多线程</h2><p>虽然可以通过Thread类的继承来实现多线程的定义,但是在Java程序里面对于继承永远都是存在有单继承局限的,所以在java里面又提供有第二种多线程的主体定义结构形式:实现java.lang.Runnable接口,此接口定义如下:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//从JDK1.8引入了Lambda表达式之后就变为了函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例:通过Runnable实现多线程的主体类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.title+<span class="string">"运行,x="</span>+x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时由于不再继承Thread父类了,那么对于此时的MyThread类中也就不再支持有start()这个继承的方法</p><h2 id="课时5-Thread与Runnable关系"><a href="#课时5-Thread与Runnable关系" class="headerlink" title="课时5:Thread与Runnable关系"></a>课时5:Thread与Runnable关系</h2><h2 id="课时6-Callable接口实现多线程"><a href="#课时6-Callable接口实现多线程" class="headerlink" title="课时6:Callable接口实现多线程"></a>课时6:Callable接口实现多线程</h2><p>&nbsp; </p><blockquote><p>从最传统的开发来说如果要进行多线程的实现肯定依靠的就是 Runnable , 但是Runnable接口有一个缺点：当线程执行完毕之后无法获取一个返回值，所以从JDK1.5之后就提出了一个新的线程实现接口:java.util.concurrent.Callable接口，它可以帮我们实现多线程，首先来观察这个接口的定义：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现Callable定义的时候可以设置一个泛型,此泛型的类型就是返回的数据类型,这样的好处是可以避免向下转型所带来的安全隐患。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第1章-Java多线程编程&quot;&gt;&lt;a href=&quot;#第1章-Java多线程编程&quot; class=&quot;headerlink&quot; title=&quot;第1章:Java多线程编程&quot;&gt;&lt;/a&gt;第1章:Java多线程编程&lt;/h1&gt;&lt;h2 id=&quot;课时2-进程与线程&quot;&gt;&lt;a href=&quot;#课时2-进程与线程&quot; class=&quot;headerlink&quot; title=&quot;课时2:进程与线程&quot;&gt;&lt;/a&gt;课时2:进程与线程&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&lt;br&gt;在java语言里面最大的特点是支持多线程的开发,也是为数不多支持多线程的编程语言,所以在整个java技术的学习里面,如果你不能够对多线程的概念有一个全面并且细致的了解,则在日后进行一些项目设计的过程之中,尤其是并发访问设计的过程之中就会出现严重的计算缺陷。&lt;br&gt;如果想要理解线程,那么首先就需要了解一下进程的概念,在传统的DOS系统时代,其本身有一个特征:如果你电脑上出现了病毒,那么所有的程序将无法执行,因为传统的DOS采用的是单进程处理,而单进程处理的最大特点:在同一个时间段上只允许一个程序在执行。&lt;br&gt;那么后来到了Windows的时代就开启了多进程的设计,于是就表示在一个时间段上可以同时运行多个程序,并且这些程序将进行资源的轮流抢占。因为当时的CPU只有一个,或者叫单核CPU,所以在同一个时间段上会有多个程序依次执行,但是在同一个时间点上只会有一个进程执行,而后来到了我们多核CPU,由于我们可以处理的CPU多了,那么即便有再多的进程出现,也可以比单核CPU处理的速度有所提升。&lt;br&gt;线程是在进程的基础之上划分的更小的程序单元,线程是在进程基础上创建并且使用的,所以线程依赖于进程的支持,但是线程的启动速度要比进程快很多,所以当使用多线程进行并发处理的时候,其执行的性能要高于进程。进程是在操作系统上的划分,而线程是在进程上的划分,线程的执行速度要比进程更快,而java是多线程的编程语言,所以java在进行并发访问处理的时候可以得到更高的处理性能。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>系列二:Java面向对象编程</title>
    <link href="http://yoursite.com/2019/12/12/%E7%B3%BB%E5%88%97%E4%BA%8C:Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/12/%E7%B3%BB%E5%88%97%E4%BA%8C:Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2019-12-12T06:41:56.000Z</published>
    <updated>2020-01-03T04:25:37.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第12章-继承的定义与使用"><a href="#第12章-继承的定义与使用" class="headerlink" title="第12章:继承的定义与使用"></a>第12章:继承的定义与使用</h1><h2 id="课时59-继承问题的引出"><a href="#课时59-继承问题的引出" class="headerlink" title="课时59:继承问题的引出"></a>课时59:继承问题的引出</h2><p>面向对象的第二大特征就是继承性,继承性的主要特点在于:可以扩充已有类的功能。<br>继承问题的引出:<br>所谓的良好的代码指的是结构性合理,适合于维护,可重用性很高,但是如果现在只是按照之前所学习到的概念进行程序的定义,那么不可避免的要面对重复问题,下面定义两个类:人类,学生类,如果按照传统定义,则结构如下:</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候可以发现虽然类的概念可以解决结构性的问题,但是对于之前的开发的程序代码总能够发现有一些重复的代码出现在程序之中,并且可以进一步去思索一下关系:学生是一个人,人是一个更加广泛的定义范畴,而学生是一个相对狭小的定义范畴,从另外一个角度来讲,学生之中应该包含有人的所有特点。<br>如果要想进行代码的重用,那么久必须使用继承的概念来解决,所谓继承的本质:在已有类的功能上继续进行功能的扩充</p><h2 id="课时60-继承的实现"><a href="#课时60-继承的实现" class="headerlink" title="课时60:继承的实现"></a>课时60:继承的实现</h2><p>如果在Java程序之中要想实现继承关系,那么就必须依靠extends关键字来完成,此关键字的具体语法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>特别需要注意的是,很多情况下会把子类称为派生类,把父类称为超类(SuperClass)<br>范例:观察继承的实现  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123; <span class="comment">//Student是子类</span></span><br><span class="line">    <span class="comment">//在子类之中不定义任何的功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">"林大强"</span>); <span class="comment">//父类定义</span></span><br><span class="line">        stu.setAge(<span class="number">38</span>); <span class="comment">//父类定义</span></span><br><span class="line">        System.out.println(<span class="string">"姓名:"</span>+stu.getName()+<span class="string">",年龄:"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于此时存在有继承关系,所以此时的子类即便没有定义任何的操作,那么也可以直接通过父类继承而来的方法实现相应的功能。此时内存关系图如下:</p><img src="http://img.zjl.pub/static/images/继承关系内存图.png"><p>继承实现的主要目的是在于子类可以重用父类中的结构,并且也可以实现功能的扩充,那么同时强调了:子类可以定义更多的内容,并且描述的范围更小。<br>范例:子类扩充定义  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;<span class="comment">//子类扩充的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(String school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSchool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.setName(<span class="string">"张三"</span>); <span class="comment">//父类定义</span></span><br><span class="line">        stu.setAge(<span class="number">38</span>); <span class="comment">//父类定义</span></span><br><span class="line">        stu.setSchool(<span class="string">"家里蹲大学"</span>);</span><br><span class="line">        System.out.println(<span class="string">"姓名:"</span>+stu.getName()+<span class="string">",年龄:"</span>+stu.getAge()+<span class="string">",学校:"</span>+stu.getSchool());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时继续讨论内存关系,则就会出现两个范围的属性了(Person父类范畴,Student子类范畴)</p><img src="http://img.zjl.pub/static/images/继承关系内存图02.png"><h2 id="课时61-子类对象实例化流程"><a href="#课时61-子类对象实例化流程" class="headerlink" title="课时61:子类对象实例化流程"></a>课时61:子类对象实例化流程</h2><p>现在已经成功的实现了继承关系,并且也已经发行了继承的主要特点,但是一旦程序之中提供有继承逻辑,那么对于子类对象实例化定义是有要求的,在你进行子类对象实例化的时候一定要首先实例化好父类对象。<br>范例:观察一个程序  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[Person父类]一个新的Person父类实例化对象产生了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123; <span class="comment">//构造方法</span></span><br><span class="line">        System.out.println(<span class="string">"[Student子类] 一个新的Student实例化对象产生了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student();<span class="comment">//实例化子类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Person父类]一个新的Person父类实例化对象产生了</span><br><span class="line">[Student子类] 一个新的Student实例化对象产生了</span><br></pre></td></tr></table></figure><p>现在即使没有进行父类对象实例化,也会由系统自动调用父类的构造方法(实例化父类对象),默认情况下的子类对象实例化流程里面会自动实例化父类对象。实际上这个时候就相当于子类的构造方法里面隐含了一个”Super()”的形式。<br>范例:修改子类定义  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123; <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//写与不写此语句效果一样</span></span><br><span class="line">        System.out.println(<span class="string">"[Student子类] 一个新的Student实例化对象产生了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super()表示的就是子类构造调用父类构造的语句,该语句只允许放在子类构造方法的首行。在默认情况下的实例化处理,子类只会调用父类中的无参构造方法,所以写与不写”super()”区别不大,但是如果说你的父类里面没有提供无参构造,这个时候就必须利用super()明确调用有参构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"[Person父类]一个新的Person父类实例化对象产生了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,String school)</span></span>&#123; <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(name,age);<span class="comment">//明确调用父类构造</span></span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">        System.out.println(<span class="string">"[Student子类] 一个新的Student实例化对象产生了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"林小强"</span>,<span class="number">48</span>,<span class="string">"北京大学"</span>);<span class="comment">//实例化子类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论:无论你如何折腾,在实例化子类对象的同时一定会实例化父类对象,目的是为了所有的属性可以进行空间的分配。super与this都可以调用构造方法,super是由子类调用父类的构造,而this是调用本类构造,并且都一定要放在构造方法的首行,所以两个语句不允许同时出现。</p><h2 id="课时62-继承定义限制"><a href="#课时62-继承定义限制" class="headerlink" title="课时62:继承定义限制"></a>课时62:继承定义限制</h2><p>现在已经清楚了整个的继承逻辑,那么下面对于继承实际上还有一些要求。<br>1.Java之中不允许多重继承,只允许多层继承。  </p><ul><li>在实际的生活之中一个人只会有一个亲老子。那么在程序的逻辑之中也是奉行此标准的。<br>正确的继承:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125; <span class="comment">//多层继承</span></span><br></pre></td></tr></table></figure>错误的继承:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;&#125; <span class="comment">//多重继承</span></span><br></pre></td></tr></table></figure></li></ul><p>2.在进行继承关系定义的时候,实际上子类可以继承父类中的所有的操作结构。但是对于私有操作属于隐式继承,而所有非私有操作属于显式继承。</p><h1 id="第16章-多态性"><a href="#第16章-多态性" class="headerlink" title="第16章:多态性"></a>第16章:多态性</h1><h2 id="课时75：多态性简介"><a href="#课时75：多态性简介" class="headerlink" title="课时75：多态性简介"></a>课时75：多态性简介</h2><p>&nbsp;</p><blockquote><p>多态性是面向对象中的第三大主要特征，之前的封装，指的是说一个类就是一个完整的结构，内部对外部是不可见的，继承的主要功能是功能的扩充，多态性是在继承的基础上扩展出来的概念，也就是说可以实现父子互相之间的转换处理。</p></blockquote><h3 id="多态性的基本概念"><a href="#多态性的基本概念" class="headerlink" title="多态性的基本概念"></a>多态性的基本概念</h3><p>在 Java 之中对于多态性有两种实现的模式：</p><ul><li>方法的多态性：<ul><li>方法的重载：同一个方法名称可以根据传入的参数的类型或个数的不同实现不同功能的执行；<br>案例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法的覆写：同一个方法可能根据使用子类的不同有不同的实现:<br>案例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oracle数据库连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"网络连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>对象的多态性：父子实例之间的转换处理，它有两种模式：<ul><li>对象向上转型：父类 父类实例 = 子类实例；自动完成转换</li><li>对象向下转型：子类 子类实例 = (子类)父类实例；强制完成转换<br>向上转型比较常见，向下转型的情况是子类可以对父类进行功能扩充，这时候可以采用向下转型</li></ul></li></ul><h2 id="课时76：对象向上转型"><a href="#课时76：对象向上转型" class="headerlink" title="课时76：对象向上转型"></a>课时76：对象向上转型</h2><p>&nbsp;</p><blockquote><p>对象转型的处理属于多态性，而这一特性必须在继承性的基础上实现。重要知识点：向上转型明确实现的是参数接收或者返回的统一性，向上转型看实例化的是哪个 new 子类，并且子类有没有覆写方法，如果覆写了，那么调用的方法一定是被覆写的方法<br>范例：先看一个简单的案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oracle数据库连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"网络连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        DatabaseMessage msg = <span class="keyword">new</span> DatabaseMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本程序是一个最简单的方法覆写操作实现，整体的程序之中可以发现，由于现在实例化的是子类对象，并且子类对象覆写了父类中的 print() 方法，所以调用的是被覆写过的方法。<br>&nbsp;<br>范例：观察向上转型  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oracle数据库连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> DatabaseMessage(); <span class="comment">//向上转型 ，这个时候不要看类名称，要看关键字 new 了谁，并且方法有没有被覆写 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果我们可以看到是：<br>Oracle数据库连接信息<br>注意向上转型不用看前面这个 Message msg ,这个什么含义呢？ 只是一种类型，说 DatabaseMessage 是个 Message 也是对的 ，比如说人是动物，狗是动物也是对的<br>那我们看看向上转型实际用处。<br>范例：先来看个代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oracle数据库连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebServerMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WEB服务器连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        fun(<span class="keyword">new</span> DatabaseMessage());           <span class="comment">// Message msg = new DatabaseMessage(),我们可以看到不管传递的是哪个一个子类，都可以用一个参数来接收，每个子类有自己的方法</span></span><br><span class="line">        fun(<span class="keyword">new</span> WebServerMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        msg.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上面的代码范例，我们应该能感受到向上转型的优势，向上转型的主要特点在于可以对参数进行统一的设计，我们看看下面的范例，其实也可用方法的重载来实现</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Oracle数据库连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebServerMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WEB服务器连接信息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        fun(<span class="keyword">new</span> DatabaseMessage());</span><br><span class="line">        fun(<span class="keyword">new</span> WebServerMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(DatabaseMessage msg)</span> </span>&#123; </span><br><span class="line">        msg.print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(WebServerMessage mgs)</span></span>&#123; <span class="comment">//这里进行了重载</span></span><br><span class="line">        mgs.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时为什么不使用重载来解决当前的问题呢？在进行程序类设计的时候，除非了满足要求之外，还需要进行可维护性的设计，如果说有 3000个 message 子类，那么就需要追加一个 fun()方法重载，这样就对程序的维护性造成很大的影响。</p><h2 id="课时77：对象向下转型"><a href="#课时77：对象向下转型" class="headerlink" title="课时77：对象向下转型"></a>课时77：对象向下转型</h2><p>&nbsp;</p><blockquote><p>向下转型主要特点在于需要使用到一些子类自己特殊的定义处理，父类之中没有的功能。<br>范例：实现向下转型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个正常人的人类行为，吃饭，睡觉，繁衍。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以飞。。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以喷火。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----正常状态下的超人应该是一个普通人的状态-------"</span>);</span><br><span class="line">        Person per = <span class="keyword">new</span> SuperMan();<span class="comment">// 向上转型，超人具备有人的一切特征</span></span><br><span class="line">        per.print();</span><br><span class="line">        System.out.println(<span class="string">"-----外星怪兽狗骚扰地球,准备消灭人类------------"</span>);</span><br><span class="line">        SuperMan man = (SuperMan)per; <span class="comment">// 向下转型</span></span><br><span class="line">        System.out.println(man.fly());</span><br><span class="line">        System.out.println(man.fire());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面我们可以看到 向上描述的是一些公共的特征，而向下描述的是子类自己特殊的定义环境。但是我们需要明确的是向下转型并不是一件安全的事情。因为在进行向下转型之前一定要首先发生向上转型。  </p><h2 id="课时78：instanceo关键字"><a href="#课时78：instanceo关键字" class="headerlink" title="课时78：instanceo关键字"></a>课时78：instanceo关键字</h2><p>&nbsp;</p><blockquote><p>通过分析可以发现向下转型本身是一件存在有安全隐患的操作，所以为了保证向下转型的正确性，往往需要在进行转型时进行判断，判断某个实例是否是某个类的对象，这个就需要通过 instanceof 语法来实现。语法如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 类</span><br></pre></td></tr></table></figure><p>改判断将返回一个 boolean 类型，如果是 true 表示实例是指定类对象。<br>范例：观察 instanceof 的使用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个正常人的人类行为，吃饭，睡觉，繁衍。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以飞。。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以喷火。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> Person);   <span class="comment">// true</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> SuperMan); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：观察 instanceof 关键字  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个正常人的人类行为，吃饭，睡觉，繁衍。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以飞。。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以喷火。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> Person);   <span class="comment">//true</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> SuperMan); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在日后进行项目的开发过程之中，如果要执行对象的向下转型，最好先判断一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个正常人的人类行为，吃饭，睡觉，繁衍。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以飞。。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我可以喷火。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> SuperMan();</span><br><span class="line">        <span class="keyword">if</span> (per <span class="keyword">instanceof</span> SuperMan) &#123;</span><br><span class="line">            SuperMan man = (SuperMan)per;</span><br><span class="line">            man.fly();</span><br><span class="line">            man.fire();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第18章-抽象类的定义与使用"><a href="#第18章-抽象类的定义与使用" class="headerlink" title="第18章:抽象类的定义与使用"></a>第18章:抽象类的定义与使用</h1><h2 id="课时82-抽象类基本概念"><a href="#课时82-抽象类基本概念" class="headerlink" title="课时82:抽象类基本概念"></a>课时82:抽象类基本概念</h2><p>&nbsp;</p><blockquote><p>类继承的主要作用在于可以扩充已有类的功能，但是对于之前的继承操作而言会发现，子类可以由自己的选择任意来决定是否要覆写某一个方法，这个时候父类无法对子类做出强制性约定（强制性必须覆写某一个方法），这种情况下我们往往不会采用类的继承（在实际开发之中很少会出现继承一个已经完善的类（就是可以直接使用的类），而是必须要继承抽象的类。在以后进行父类(SuperClass)设计的时候，我们优先考虑的一定是抽象类。</p></blockquote><ul><li>抽象类的基本定义<br>抽象类的主要作用在于对子类中覆写方法进行约定，在抽象类里面可以去定义一些抽象方法以实现这样的约定，抽象方法指的是使用了 abstract 关键字定义的并且没有提供方法体的方法,而抽象方法所在的类必须为抽象类，抽象类必须使用 abstract 关键字来定义。（在普通类的基础上追加抽象方法就是抽象类）<br>范例:定义一个抽象类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123; <span class="comment">// 定义抽象类</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getConnectInfo</span><span class="params">()</span></span>; <span class="comment">// 抽象方法，后面没有大括号</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; <span class="comment">// 抽象类不能直接 New</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当一个抽象类定义完成之后（切记：“抽象类不是完整的类”），如果要想去使用抽象类则必须按照如下原则进行:</li><li>抽象类必须提供有子类，子类使用 extends 继承一个抽象类；</li><li>抽象类的子类（不是抽象类）一定要覆写抽象类中的全部抽象方法；</li><li>抽象类的对象实例化可以利用对象多态性通过子类向上转型的方式完成;<br>范例:使用抽象类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123; <span class="comment">// 定义抽象类</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getConnectInfo</span><span class="params">()</span></span>; <span class="comment">// 抽象方法，后面没有大括号</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseMessage</span> <span class="keyword">extends</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConnectInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Oracle数据库的连接信息。"</span>; <span class="comment">// 方法的覆写</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Message msg = <span class="keyword">new</span> DatabaseMessage();</span><br><span class="line">        msg.setType(<span class="string">"客户消息"</span>); <span class="comment">// msg 本身有普通方法</span></span><br><span class="line">        System.out.println(msg.getConnectInfo());</span><br><span class="line">        System.out.println(msg.getType()); <span class="comment">// msg 调用普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>从整体上来讲，抽象类只是比普通类增加了抽象方法以及对子类的强制性覆写要求而已，其他的使用过程和传统的类继承是完全相同的。<br>对于抽象类使用的几点意见:  </li><li>抽象类使用很大程度上有一个核心的问题:抽象类自己无法直接实例化;</li><li>抽象类之中主要的目的是进行过渡操作使用,当你要使用抽象类进行开发的时候,往往都是在你设计中需要解决类继承问题时所带来的代码重复处理。</li></ul><h2 id="课时83-抽象类的相关说明"><a href="#课时83-抽象类的相关说明" class="headerlink" title="课时83:抽象类的相关说明"></a>课时83:抽象类的相关说明</h2><h2 id="课时84-模板设计模式"><a href="#课时84-模板设计模式" class="headerlink" title="课时84:模板设计模式"></a>课时84:模板设计模式</h2><h1 id="第20章-接口的定义与使用"><a href="#第20章-接口的定义与使用" class="headerlink" title="第20章:接口的定义与使用"></a>第20章:接口的定义与使用</h1><h2 id="课时87-接口基本定义"><a href="#课时87-接口基本定义" class="headerlink" title="课时87:接口基本定义"></a>课时87:接口基本定义</h2><p>&nbsp;<br>当你可以灵活的使用抽象类和接口进行设计的时候,那么基本上就表示你面向对象的概念理解了。这一步是需要大量的程序代码累积而成的。  </p><ul><li>接口的基本定义<br>抽象类与普通类相比最大的优势在于,可以实现对子类覆写方法的控制,但是在抽象类里面可能依然会保留有一些普通方法,而普通方法里面可能会涉及到一些安全或者隐私的操作问题,那么这样在进行开发的过程之中，如果要想对外部隐藏全部的实现细节,则就可以通过接口来进行描述。<br>接口可以理解为一个纯粹的抽象类(最原始的定义接口之中是只包含有抽象方法与全局常量)，比抽象类还严格的抽象类，但是从JDK1.8开始由于引入了Lambda表达式的概念，所以接口的定义也得到了加强，除了抽象方法与全局常量之外，还可以定义普通方法或静态方法。如果从设计本身的角度来说，接口之中的组成还是应该以抽象方法和全局变量为主。<br>在Java中接口主要使用 interface 关键字来进行定义。<br>范例: 定义一个接口<br>说明：抽象类和类都是类的概念级别，接口也是一个类，但是这个类更特殊，如果接口和类的命名方式都一样的话，就很难区分谁是类谁是接口，所以在类名称会以I开头表示这是一个接口类。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFO= <span class="string">"www.mldn.cn"</span>; <span class="comment">// 全局常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但是现在很明显的问题出现了，此时的接口肯定无法直接产生实例化对象。所以对于接口使用原则如下：  </li><li>接口需要被子类实现（implements）, 一个子类可以实现多个父接口;</li><li>子类(如果不是抽象类)那么一定要覆写接口之中的全部抽象方法;</li><li>接口对象可以利用子类对象的向上转型进行实例化。<br>范例:定义接口子类  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFO= <span class="string">"www.mldn.cn"</span>; <span class="comment">// 全局常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span></span>&#123; <span class="comment">// 实现了接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"得到一个秘密的消息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        IMessage msg = <span class="keyword">new</span> MessageImpl(); <span class="comment">// 向上转型</span></span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">        System.out.println(IMessage.INFO);<span class="comment">//直接输出全局常量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上是接口的基本使用，但是在Java里面之所以使用接口主要的目的是一个子类可以实现多个接口。也就是说利用接口可以实现一个多继承的概念<br>范例:观察子类实现多个父接口  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFO= <span class="string">"www.mldn.cn"</span>; <span class="comment">// 全局常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">implements</span> <span class="title">IMessage</span>,<span class="title">IChannel</span></span>&#123; <span class="comment">// 实现了接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.connect()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"消息通道已建立，得到一个秘密的消息"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"通道创建失败,无法获取消息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送通道已经成功建立"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        IMessage msg = <span class="keyword">new</span> MessageImpl(); <span class="comment">// 向上转型</span></span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">        System.out.println(IMessage.INFO);<span class="comment">//直接输出全局常量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但是这个时候就需要考虑一个实际的情况了，关于对象的转型问题了。来看下面这个图:  <img src="http://img.zjl.pub/static/images/接口01.png">此时 MessageImpl子类的对象可以任意的实现父接口的转换。<br>范例:观察转换  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        IMessage msg = <span class="keyword">new</span> MessageImpl(); <span class="comment">// 向上转型</span></span><br><span class="line">        IChannel chl = (IChannel)msg;</span><br><span class="line">        System.out.println(chl.connect());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>由于 MessageImple 子类实现了 IMessage 与 IChannel 两个接口，所以这个子类可以是这两个接口的实例，那么就表示此时这两个接口实例之间是可以转换的。<br>在 Java 程序里面接口是不允许去继承父类的，所以接口绝对不会是 Object的子类，但是根据之前的分析可以发现，MessageImple 是 Object 的子类，所以接口一定可以通过 Object 接收。<br>范例:观察Object与接口转换  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        IMessage msg = <span class="keyword">new</span> MessageImpl(); <span class="comment">// 向上转型</span></span><br><span class="line">        Object obj = msg;<span class="comment">//向上转型</span></span><br><span class="line">        IChannel chl = (IChannel)obj;</span><br><span class="line">        System.out.println(chl.connect());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Object 类对象可以接收所有数据类型，包括基本数据类型，类对象，接口对象，数组。<br>由于接口描述的是一个公共的定义标准，所以在接口之中所有的抽象方法的访问权限都为 public，也就是说写与不写都是一样的<br>简化定义：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    String INFO= <span class="string">"www.mldn.cn"</span>; <span class="comment">// 全局常量</span></span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>方法不写访问权限也是public，不是default，所以覆写的时候只能够使用public.<br>接口虽然已经可以成功的进行了定义，但是千万不要忽略，在实际的开发过程之中，实现接口的有可能是抽象类，一个抽象类可以实现多个接口，而一个普通类只能够继承一个抽象类并且可以实现多个父接口，但是要求先继承后实现。<br>范例:子类继承抽象类并且实现接口  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INFO= <span class="string">"www.mldn.cn"</span>; <span class="comment">// 全局常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseAbstract</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接口中的abstract可以省略，抽象类中不允许省略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">getDatabaseConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageImpl</span> <span class="keyword">extends</span> <span class="title">DatabaseAbstract</span> <span class="keyword">implements</span> <span class="title">IMessage</span>,<span class="title">IChannel</span></span>&#123; <span class="comment">// 实现了接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.connect()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.getDatabaseConnection())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"数据库中得到一个消息"</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"消息通道已建立，得到一个秘密的消息"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"通道创建失败,无法获取消息"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消息发送通道已经成功建立"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getDatabaseConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        IMessage msg = <span class="keyword">new</span> MessageImpl(); <span class="comment">// 向上转型</span></span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>虽然接口无法去继承一个父类，但是一个接口却可以通过extends继承若干个父接口,此时称为接口的多继承<br>范例:实现接口多继承  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span> </span>&#123; <span class="comment">//定义了一个接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getInfo</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法，没有方法体的，就是大括号没有的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>;<span class="comment">//定义一个抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//extends在类继承上只能够继承一个父类，但是接口上可以继承多个</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IService</span> <span class="keyword">extends</span> <span class="title">IMessage</span>,<span class="title">IChannel</span> </span>&#123; <span class="comment">//接口多继承</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"获取消息服务"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在实际的开发之中，接口的使用往往有三种形式:  </li><li>进行标准的设置  </li><li>表示一种操作的能力  </li><li>暴露远程方法视图,这个一般在RPC分布式开发中使用。</li></ul><h2 id="课时88-接口定义加强"><a href="#课时88-接口定义加强" class="headerlink" title="课时88:接口定义加强"></a>课时88:接口定义加强</h2><h2 id="课时89-使用接口定义标准"><a href="#课时89-使用接口定义标准" class="headerlink" title="课时89:使用接口定义标准"></a>课时89:使用接口定义标准</h2><h2 id="课时90-工厂设计模式"><a href="#课时90-工厂设计模式" class="headerlink" title="课时90:工厂设计模式"></a>课时90:工厂设计模式</h2><h2 id="课时91-代理设计模式"><a href="#课时91-代理设计模式" class="headerlink" title="课时91:代理设计模式"></a>课时91:代理设计模式</h2><h2 id="课时92-抽象类与接口区别"><a href="#课时92-抽象类与接口区别" class="headerlink" title="课时92:抽象类与接口区别"></a>课时92:抽象类与接口区别</h2><h1 id="第22章-泛型"><a href="#第22章-泛型" class="headerlink" title="第22章:泛型"></a>第22章:泛型</h1><h2 id="课时96：泛型问题引出"><a href="#课时96：泛型问题引出" class="headerlink" title="课时96：泛型问题引出"></a>课时96：泛型问题引出</h2><p>&nbsp;<br>  泛型从JDK1.5之后追加到 Java 语言里面的，其主要目的是为了解决ClassCastException的问题，在进行对象的向下转型永远都可能存在有安全隐患，而Java希望通过泛型可以慢慢解决掉此类问题。</p><h3 id="泛型问题引出"><a href="#泛型问题引出" class="headerlink" title="泛型问题引出"></a>泛型问题引出</h3><p>&nbsp;<br>  现在假设说定义一个描述 x 与 y 坐标的处理类，并且在这个类之中允许开发者保存有三类数据</p><ul><li>整型数据:x=10,y=20;</li><li>浮点型数据:x=10.1,y=20.9;</li><li>字符串型数据:x=东经120度,北纬30度;<br>于是在设计 Point 类的时候就需要去考虑具体的x和y属性的类型，这个类型要求可以保存以上三种数据，很明显，最为原始的做法就是利用 Object 类来进行定义,因为存在有如下的转型关系：<ul><li>整型数据：基本数据类型 –&gt; 包装为 Integer 类对象 –&gt; 自动向上转型为 Object;</li><li>浮点型数据：基本数据类型 –&gt; 包装为 Double 类对象 –&gt; 自动向上转型为 Object;</li><li>字符串型数据：String类对象 –&gt; 自动向上转型为 Object;<br>范例：定义Point类如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object x;</span><br><span class="line">    <span class="keyword">private</span> Object y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>而后进行内容的设置：<br>范例：进行正确的内容操作  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object x;</span><br><span class="line">    <span class="keyword">private</span> Object y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Point point = <span class="keyword">new</span> Point();</span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="number">20</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="keyword">int</span> x = (Integer)point.getX(); <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="keyword">int</span> y = (Integer)point.getY(); <span class="comment">// 向下转型</span></span><br><span class="line">        System.out.println(<span class="string">"x坐标:"</span>+x+<span class="string">",y坐标:"</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>本程序之所以可以解决当前的设计问题，主要原因在于 Object 可以接收所有的数据类型，但是正因为如此，所以本代码也会出现严重的安全隐患。</p><p>范例：观察安全隐患</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object x;</span><br><span class="line">    <span class="keyword">private</span> Object y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Object y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Point point = <span class="keyword">new</span> Point();</span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="string">"北纬20度"</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="keyword">int</span> x = (Integer)point.getX(); <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="keyword">int</span> y = (Integer)point.getY(); <span class="comment">// 向下转型</span></span><br><span class="line">        System.out.println(<span class="string">"x坐标:"</span>+x+<span class="string">",y坐标:"</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的程序明显出现了问题，但是在程序编译的时候实际上是不会有错误产生的，而程序执行的时候就会出现 “ClassCastException” 异常类型,所以本程序的设计是存在有安全隐患的。而这个安全隐患存在的依据在于使用了Object类型，因为Object可以涵盖的范围太广了，而对于这样的错误如果可以直接出现在编译的过程，那么就可以避免运行时的尴尬 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer</span><br><span class="line">    at JavaDemo.main(JavaDemo.java:<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="课时97：泛型基本定义"><a href="#课时97：泛型基本定义" class="headerlink" title="课时97：泛型基本定义"></a>课时97：泛型基本定义</h2><p>&nbsp;<br>如果要想避免项目之中出现“ClassCastException”最好的做法是可以直接回避掉对象的强制转换，所以在JDK1.5之后提供有泛型技术，而泛型的本质在于，类中的属性或方法的参数与返回值的类型可以由对象实例化的时候动态决定。那么此时就需要在类定义的时候明确定义占位符（泛型标记）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T x;</span><br><span class="line">    <span class="keyword">private</span> T y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(T y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 Point 类中的x与y属性的数据类型并不确定，而是由外部来决定。<br>提示：关于默认的泛型类型</p><ul><li>由于泛型是属于JDK1.5之后的产物，但是在这之前已经有不少内置的程序类或者是接口广泛的应用在项目的开发之中，于是为了保证这些类或接口追加了泛型之后，原始的程序类依然可以使用，所以如果不设置泛型时，自动将使用 Object 作为类型，以保证程序的正常执行，但是在编译的过程之中会出现警告信息。</li></ul><p>泛型定义完成后可以在实例化对象的时候进行泛型类型的设置，一旦设置之后，里面的x与y的属性类型就与当前对象直接绑定了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T x;</span><br><span class="line">    <span class="keyword">private</span> T y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(T y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Point &lt;Integer&gt;point = <span class="keyword">new</span> &lt;Integer&gt;Point();</span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="number">20</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="keyword">int</span> x = point.getX(); <span class="comment">// 向下转型</span></span><br><span class="line">        <span class="keyword">int</span> y = point.getY(); <span class="comment">// 向下转型</span></span><br><span class="line">        System.out.println(<span class="string">"x坐标:"</span>+x+<span class="string">",y坐标:"</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的程序代码之中，由于Point类里面设置的泛型类型为Integer,这样所有对应此泛型的属性，变量，方法返回值就将全部替换为Integer(只局限于次对象之中)，这样在进行处理的时候如果发现设置的内容有错误，则会在程序编译的时候自动进行错误提示，同时也避免了对象的向下转型处理（可以避免安全隐患）。<br>泛型使用注意点：</p><ul><li>泛型之中只允许设置引用类型，如果现在要操作基本类型必须使用包装类,比如 Point <Integer>point = new <Integer>Point(); 就不能写成 Point <int>point = new <int>Point();</li><li>从JDK1.7开始，泛型对象实例化可以简化为 “Point <Integer>point = new Point&lt;&gt;()”<br>使用泛型可以解决大部分的类对象的强制转换处理，这样的程序才是一个合理的设计。对象操作的时候一定要指明类型。</li></ul><h2 id="课时98：泛型通配符"><a href="#课时98：泛型通配符" class="headerlink" title="课时98：泛型通配符"></a>课时98：泛型通配符</h2><p>&nbsp;<br>虽然泛型帮助开发者解决了一系列的对象的强制转换所带来的安全隐患，但是从另外一个角度来讲，泛型也带来了一些新的问题。<br>问题：引用传递处理<br>范例：观察一个问题的产生  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(T content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Message &lt;String&gt;msg = <span class="keyword">new</span> &lt;String&gt;Message();</span><br><span class="line">        msg.setContent(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">        fun(msg); <span class="comment">//引用传递</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Message&lt;String&gt; temp)</span></span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个时候问题也就出现了，而问题的关键在于 fun() 方法上，如果真的去使用泛型不可能只是一种类型，也就是说 fun()方法应该可以接收任意一种泛型类型的 Message 对象。但是这个时候它只能够接收“Message<String>”类型，这种情况下就有同学提出了不设置泛型。<br>范例：看下不设置泛型是什么情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(T content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Message &lt;String&gt;msgA = <span class="keyword">new</span> &lt;String&gt;Message();</span><br><span class="line">        msgA.setContent(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">        fun(msgA);</span><br><span class="line">        Message &lt;Integer&gt;msgB = <span class="keyword">new</span> &lt;Integer&gt;Message();</span><br><span class="line">        msgB.setContent(<span class="number">110</span>);</span><br><span class="line">        fun(msgB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Message temp)</span></span>&#123;</span><br><span class="line">        temp.setContent(<span class="number">1.1</span>);</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objc[<span class="number">9182</span>]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/bin/java (<span class="number">0x1094604c0</span>) and /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/libinstrument.dylib (<span class="number">0x10a4744e0</span>). One of the two will be used. Which one is undefined.</span><br><span class="line"><span class="number">1.1</span></span><br><span class="line"><span class="number">1.1</span></span><br></pre></td></tr></table></figure><p>这个时候如果不设置泛型，那么在方法之中就有可能对你的数据进行修改，所以此时需要找一种方案：可以接收所有的泛型类型，并且不能修改里面的数据（允许获取），那么就需要通过通配符“?”来解决。<br>范例：使用通配符  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(T content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Message &lt;String&gt;msgA = <span class="keyword">new</span> &lt;String&gt;Message();</span><br><span class="line">        msgA.setContent(<span class="string">"www.mldn.cn"</span>);</span><br><span class="line">        fun(msgA);</span><br><span class="line">        Message &lt;Integer&gt;msgB = <span class="keyword">new</span> &lt;Integer&gt;Message();</span><br><span class="line">        msgB.setContent(<span class="number">110</span>);</span><br><span class="line">        fun(msgB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Message&lt;?&gt; temp)</span></span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在 fun() 方法里面由于采用了 Message结合通配符的处理所以可以接收所有的类型，并且不允许修改只允许获取数据<br>在 “?” 这个通配符的基础之上实际上还提供有两类小的通配符：</p><ul><li>?extends 类： 设置泛型的上限<ul><li>例如：定义“?extends Number”:表示该泛型类型只允许设置 Number 或 Number 的子类</li></ul></li><li>?super 类：设置泛型的下线：<ul><li>例如： 定义“?super String”:只能够使用String或其父类;  </li></ul></li></ul><p>对于通配符而言是一个重要的概念，并且要求你一定可以理解此概念的定义，在日后学习Java一些系统类库的时候会见到大量的通配符使用。</p><h2 id="课时99：泛型接口"><a href="#课时99：泛型接口" class="headerlink" title="课时99：泛型接口"></a>课时99：泛型接口</h2><p>泛型除了可以在类上定义之外也可以直接在接口之中进行使用。例如：下面定义一个泛型接口  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMessage</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="课时100：泛型方法"><a href="#课时100：泛型方法" class="headerlink" title="课时100：泛型方法"></a>课时100：泛型方法</h2><h1 id="第27章-异常的捕获及处理"><a href="#第27章-异常的捕获及处理" class="headerlink" title="第27章:异常的捕获及处理"></a>第27章:异常的捕获及处理</h1><h2 id="课时116-认识异常对程序的影响"><a href="#课时116-认识异常对程序的影响" class="headerlink" title="课时116:认识异常对程序的影响"></a>课时116:认识异常对程序的影响</h2><p>&nbsp;<br>Java语言提供的最为强大的支持就在于异常的处理操作上。</p><ul><li>认识异常对程序的影响<br>异常指的是导致程序中断执行的一种指令流。那么下面首先来观察没有异常产生的程序执行结果。<br>范例:没有异常产生  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【1】******** 程序开始执行 **********"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【2】*********数学计算:"</span>+ (<span class="number">10</span>/<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"【3】******** 程序执行完毕 **********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在程序执行正常的过程里面会发现，所有的程序会按照既定的结构从头到尾开始执行。<br>范例:产生异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【1】******** 程序开始执行 **********"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【2】*********数学计算:"</span>+ (<span class="number">10</span>/<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"【3】******** 程序执行完毕 **********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【<span class="number">1</span>】******** 程序开始执行 **********</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArithmeticException: / by zero</span><br><span class="line">    at JavaDemo.main(JavaDemo.java:<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>在出现错误之后，整个的程序将不会按照既定的方式进行执行，而是中断了执行。那么为了保证程序出现了非致命错误之后程序依然可以正常完成,所以就需要有一个完善的异常处理机制,以保证程序的顺利执行。</li></ul><h2 id="课时117-处理异常"><a href="#课时117-处理异常" class="headerlink" title="课时117:处理异常"></a>课时117:处理异常</h2><p>&nbsp;<br>在 Java 之中如果要进行异常处理,可以使用:try,catch,finally这几个关键字来完成,其基本的处理结构如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    可能出现异常的语句;</span><br><span class="line">&#125; [<span class="keyword">catch</span> (异常类型 异常对象)&#123;</span><br><span class="line">    异常处理;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 异常对象)&#123;</span><br><span class="line">    异常处理;</span><br><span class="line">&#125; <span class="keyword">catch</span> (异常类型 异常对象)&#123;</span><br><span class="line">    异常处理;</span><br><span class="line">&#125; ] [<span class="keyword">finally</span> &#123;</span><br><span class="line">    不管异常是否处理都要执行;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>在此格式之中可以使用的组合为: try …catch,try …catch…finally,try…finally。<br>范例:处理异常  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【1】******** 程序开始执行 **********"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"【2】*********数学计算:"</span>+ (<span class="number">10</span>/<span class="number">0</span>)); <span class="comment">//可能出现异常的语句</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123; <span class="comment">//异常类型 异常对象</span></span><br><span class="line">            System.out.println(<span class="string">"处理异常:"</span>+e); <span class="comment">//异常处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"【3】******** 程序执行完毕 **********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以发现现在即便出现了异常,程序也可以正常执行完毕,所以此时的设计属于一个合理的设计,但是有一个问题出现了,此时在进行异常处理的时候直接输出的是一个异常类的对象,那么对于此对象如果直接打印(调用toString())所得到的异常信息并不完整,那么如果要想获得非常完整的异常信息,则可以使用异常类中提供的printStackTrace()方法。<br>范例:获取完整异常信息  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【1】******** 程序开始执行 **********"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"【2】*********数学计算:"</span>+ (<span class="number">10</span>/<span class="number">0</span>)); <span class="comment">//可能出现异常的语句</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123; <span class="comment">//异常类型 异常对象</span></span><br><span class="line">            <span class="comment">//System.out.println("【c】处理异常:"+e); //异常处理</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"【3】******** 程序执行完毕 **********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于异常的处理格式也可以在最后追加有一个finally程序块,表示异常处理后的出口,不管是否出现异常都执行。<br>范例:使用finally语句  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【1】******** 程序开始执行 **********"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"【2】*********数学计算:"</span>+ (<span class="number">10</span>/<span class="number">0</span>)); <span class="comment">//可能出现异常的语句</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123; <span class="comment">//异常类型 异常对象</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"【f】不管是否出现异常，我都会执行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"【3】******** 程序执行完毕 **********"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时程序中有异常执行finally,没有异常也执行finally。</p><h2 id="课时118-处理多个异常"><a href="#课时118-处理多个异常" class="headerlink" title="课时118:处理多个异常"></a>课时118:处理多个异常</h2><p>&nbsp;<br>很多时候在程序执行的过程之中可能会产生若干个异常,那么这种情况下也可以使用多个 catch 进行异常的捕获。现在假设通过初始化的参数来进行两个数学计算数字的设置。</p><h2 id="课时119-异常处理流程"><a href="#课时119-异常处理流程" class="headerlink" title="课时119:异常处理流程"></a>课时119:异常处理流程</h2><p>&nbsp;<br>在进行异常处理的时候如果将所有可能已经明确知道要产生的异常都进行了捕获,虽然你可以得到非常良好的代码结构,但是这种代码编写是非常麻烦的,所以现在要想进行合理异常就必须清楚在异常产生之后程序到底做了哪些处理。  </p><img src="http://img.zjl.pub/static/images/异常处理流程.png">  <p>1.在程序运行的过程之中才会产生异常,而一旦程序执行中产生了异常之后将自动进行指定类型的异常类对象实例化处理<br>2.如果此时程序之中并没有提供有异常处理的支持,则会采用JVM默认异常处理方式,首先进行异常信息的打印,而后直接退出当前的程序<br>3.此时如果程序中存在有异常处理,那么这个产生的异常类的实例化对象将会被try语句所捕获<br>4.try捕获到异常对象之后与其匹配的catch中的异常类型进行依次的比对,如果此时与catch中的捕获异常类型相同,则认为应该使用此catch进行异常处理,如果不匹配则继续匹配后续的catch类型,如果没有任何的catch匹配成功,那么久表示该异常无法进行处理<br>5.不管异常是否处理最终都要执行finally语句,但是当执行完finally的程序之后会进一步判断当前的异常是否已经处理过了,如果处理过了，则继续向后执行其他代码,如果没有处理则交由JVM进行默认处理<br>通过分析可以发现在整个异常处理流程之中实际上操作的还是一个异常类的实例化对象,那么这个异常类的实例化对象的类型就成为了理解异常处理的核心关键所在,在之前接触过了两种异常:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">    java.lang.Throwable</span><br><span class="line">        java.lang.Exception</span><br><span class="line">            java.lang.RuntimeException</span><br><span class="line">                java.lang.ArithmeticException</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">    java.lang.Throwable</span><br><span class="line">        java.lang.Exception</span><br><span class="line">            java.lang.RuntimeException</span><br><span class="line">                java.lang.IndexOutOfBoundsException</span><br><span class="line">                    java.lang.ArrayIndexOutOfBoundsException</span><br></pre></td></tr></table></figure><p>可以发现在程序之中可以处理的异常的最大的类型就是 Throwable ,而打开 Throwable 可以观察在此类中提供有两个子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Direct Known Subclasses:</span><br><span class="line">Error, Exception</span><br></pre></td></tr></table></figure><ul><li>Error:此时程序还未执行出现的错误,开发者无法处理</li><li>Exception:程序中出现的异常,开发者可以处理,真正在开发之中所需要关注的就是Exception<br>通过分析可以发现异常产生的时候会产生异常的实例化对象,那么按照对象的引用原则,可以自动向父类转型,那么如果按照这样的逻辑,实际上所有的异常都可以使用Exception来处理。<br>范例:简化异常处理<br>当你不确定可能产生哪些异常的时候,这种处理方式是最方便的,但是如果这样处理也会产生一个问题,这种异常的处理模式虽然方便,但是它描述的错误信息不明确,所以分开处理异常是一种可以更加明确的处理方式。在以后进行多个异常同时处理的时候要把捕获范围大的异常放在捕获范围小的异常之后。</li></ul><h2 id="课时120-throws关键字"><a href="#课时120-throws关键字" class="headerlink" title="课时120:throws关键字"></a>课时120:throws关键字</h2><ul><li>throws 关键字<br>通过之前的程序可以发现,在执行程序的过程之中有可能会产生异常,但是如果说现在假设你定义了一个方法,实际上就应该明确的告诉使用者,这个方法可能会产生何种异常,那么此时就可以在方法的申明上使用 throws 关键字来进行异常类型的标注。<br>范例: 观察throws的使用  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常,如果产生异常调用处处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x/y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>主方法本身也是一个方法,那么实际上主方法也可以继续向上抛出<br>范例:在主方法上继续抛出异常  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常,如果产生异常调用处处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x , <span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x/y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果主方法继续向上抛出异常,那么就表示此异常将交由JVM负责处理。</li></ul><h2 id="课时121-throw关键字"><a href="#课时121-throw关键字" class="headerlink" title="课时121:throw关键字"></a>课时121:throw关键字</h2><p>&nbsp;<br>与throws对应的还有throw关键字,此关键字的主要作用在于表示手工进行异常的抛出,即:此时将手工产生一个异常类的实例化对象,并且进行异常的抛出处理。<br>范例:观察 throw 的使用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//异常对象不再是由系统生成的,而是由手工定义的</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"自己抛着玩的对象。"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题:请解释 throw 与 throws 区别 ？  </p><ul><li>throw:是在代码块中使用的,主要是手工进行异常对象的抛出</li><li>throws:是在方法定义上使用的,表示将此方法中可能产生的异常明确告诉给调用处,由调用处进行处理。</li></ul><h2 id="课时122-异常处理模型"><a href="#课时122-异常处理模型" class="headerlink" title="课时122:异常处理模型"></a>课时122:异常处理模型</h2><p>现在已经学习完成了大部分的异常处理格式:try,catch,finally,throw,throws,那么这些关键字在实际开发之中往往一起进行使用,下面通过一个具体的程序来进行分析。<br>现在要求定义一个可以实现除法计算的方法,在这个方法之中开发要求如下:  </p><ul><li>在进行数学计算开始于结束的时候进行信息提示;  </li><li>如果在进行计算的过程之中产生了异常,则要交给调用处来处理。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"***[START]除法计算开始"</span>);</span><br><span class="line">            temp = x/y;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"***[END]除法计算结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>对于此类操作实际上可以简化,省略掉catch与throw的操作。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMath</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">"***[START]除法计算开始"</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            temp = x/y;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"***[END]除法计算结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在以后实际开发过程之中,这种异常的处理格式是最为重要的,尤其是当与一些资源进行访问操作的时候尤其重要。</li></ul><h2 id="课时123-RuntimeException"><a href="#课时123-RuntimeException" class="headerlink" title="课时123:RuntimeException"></a>课时123:RuntimeException</h2><p>通过之前的分析可以发现只要方法后面带有throws往往都是告诉用户本方法可能产生的异常是什么,这个时候来观察一段代码。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开Integer类中的parseInt()方法的定义来观察:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> parseInt​(String s) <span class="keyword">throws</span> NumberFormatException</span><br></pre></td></tr></table></figure><p>这个方法上明确的抛出了一个异常，但是在处理的时候并没有强制性要求处理。观察一下NumberFormatException类的继承结构,同时也观察数学异常类的继承结构:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">    java.lang.Throwable</span><br><span class="line">        java.lang.Exception</span><br><span class="line">            java.lang.RuntimeException</span><br><span class="line">                java.lang.ArithmeticException</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">    java.lang.Throwable</span><br><span class="line">        java.lang.Exception</span><br><span class="line">            java.lang.RuntimeException</span><br><span class="line">                java.lang.IllegalArgumentException</span><br><span class="line">                    java.lang.NumberFormatException</span><br></pre></td></tr></table></figure><p>如果现在所有的程序执行上只要使用了throws定义的方法都必须要求开发者进行手工处理,那么这个代码的编写就太麻烦了,所以在设计的过程之中,考虑到代码编写的方便,所以提供有一个灵活的可选的异常处理父类”RuntimeException”,这个类的异常子类可以不需要强制性处理。<br>面试题:请解释 RuntimeException与Exception的区别? 请列举出几个你常见的RuntimeException;</p><ul><li>RuntimeException 是 Exception 的子类;</li><li>RuntimeException 标注的异常可以不需要进行强制性处理;而Exception异常必须强制性处理;  </li><li>常见的RuntimeException异常:NumberFormatException,ClassCastException,NullPointerException</li></ul><h2 id="课时124-自定义异常类"><a href="#课时124-自定义异常类" class="headerlink" title="课时124:自定义异常类"></a>课时124:自定义异常类</h2><p>在JDK之中提供有大量的异常类型,但是在实际的开发之中可能这些异常类型未必够你所使用,你不可能所有的设计里面都只是抛出Exception,所以这个时候就需要考虑进行自定义异常类。但是对于自定义异常也有两种实现方案:继承 Exception 或者 RuntimeExceptionu。<br>范例:实现自定义异常  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BombException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BombException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> BombException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BombException(<span class="string">"吃太多肚子爆了"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"正常开始吃"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Food.eat(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以后的项目开发过程之中会接触到大量的自定义异常处理,如果遇见了你不清楚的异常,最简单的方式就是通过搜索引擎查询一下异常可能产生的原因。</p><h2 id="课时125-assert断言"><a href="#课时125-assert断言" class="headerlink" title="课时125:assert断言"></a>课时125:assert断言</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第12章-继承的定义与使用&quot;&gt;&lt;a href=&quot;#第12章-继承的定义与使用&quot; class=&quot;headerlink&quot; title=&quot;第12章:继承的定义与使用&quot;&gt;&lt;/a&gt;第12章:继承的定义与使用&lt;/h1&gt;&lt;h2 id=&quot;课时59-继承问题的引出&quot;&gt;&lt;a href=&quot;#课时59-继承问题的引出&quot; class=&quot;headerlink&quot; title=&quot;课时59:继承问题的引出&quot;&gt;&lt;/a&gt;课时59:继承问题的引出&lt;/h2&gt;&lt;p&gt;面向对象的第二大特征就是继承性,继承性的主要特点在于:可以扩充已有类的功能。&lt;br&gt;继承问题的引出:&lt;br&gt;所谓的良好的代码指的是结构性合理,适合于维护,可重用性很高,但是如果现在只是按照之前所学习到的概念进行程序的定义,那么不可避免的要面对重复问题,下面定义两个类:人类,学生类,如果按照传统定义,则结构如下:&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>rancher2.x 知识点整理</title>
    <link href="http://yoursite.com/2019/12/06/rancher2.x%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/12/06/rancher2.x%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2019-12-06T09:18:58.000Z</published>
    <updated>2020-01-08T05:52:38.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rancher2-x-快速创建集群"><a href="#rancher2-x-快速创建集群" class="headerlink" title="rancher2.x 快速创建集群"></a>rancher2.x 快速创建集群</h1><ul><li>使用 Docker run 命令部署单节点 Rancher server</li><li>必要前置条件<ul><li>OS with docker version<ul><li>CentOS7.6_x86-64</li><li>Docker 18.09.x</li></ul></li></ul></li></ul><p>docker run -d -p 80:80 -p 443:443  rancher/rancher:v2.3.3<br>doker logs 查看启动日志可以看到 rancher 在本地会去创建 CRD 的一些资源，然后在 rancher本身里面的话就会有包含一个微型的一个k8s api server 和一个 etcd 的进程，这是单节点跑的一个情况。</p><h2 id="导入已有-K8S-集群"><a href="#导入已有-K8S-集群" class="headerlink" title="导入已有 K8S 集群"></a>导入已有 K8S 集群</h2><img src="http://img.zjl.pub/static/images/rancher01.png"><img src="http://img.zjl.pub/static/images/rancher02.png"><img src="http://img.zjl.pub/static/images/rancher03.png"><img src="http://img.zjl.pub/static/images/rancher04.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --insecure -sfL https://rancher.ops.com/v3/import/cfwbm2bdz6gcgxnkwvkshlqbxmwc96hbv4x6z8c4hhwnlntxx2dw28.yaml | kubectl apply -f -</span><br></pre></td></tr></table></figure><a id="more"></a><p>会创建 namespace , serviceaccount clusterrolebingding secret clusterrole deployment daemonse 这些 , 我们查看创建的结果：</p><img src="http://img.zjl.pub/static/images/rancher05.png"><img src="http://img.zjl.pub/static/images/rancher06.png"><h1 id="企业如何构建CICD流水线"><a href="#企业如何构建CICD流水线" class="headerlink" title="企业如何构建CICD流水线"></a>企业如何构建CICD流水线</h1><p>Demo演示的内容  </p><ul><li>如何对接Gitlab  </li><li>执行代码和镜像构建  </li><li>发布镜像到内置/远端仓库  </li><li>部署应用  </li><li>通过应用商店发布应用  </li><li>流水线通知<img src="http://img.zjl.pub/static/images/rancherPipeline运作原理.png"></li></ul><p>CICD_GIT_REPO_NAME:test<br>CICD_GIT_URL:<a href="http://git.ops.com/ops/test.git" target="_blank" rel="noopener">http://git.ops.com/ops/test.git</a><br>CICD_GIT_COMMIT:35c3638<br>CICD_GIT_REF:refs/heads/master<br>CICD_GIT_BRANCH:master<br>CICD_GIT_TAG:空<br>CICD_TRIGGER_TYPE:user<br>CICD_EVENT:空<br>CICD_EXECUTION_ID:p-6kbts-32<br>CICD_EXECUTION_SEQUENCE:32<br>CICD_PIPELINE_ID:p-6kbts<br>CICD_PROJECT_ID:p-h2491<br>CICD_CLUSTER_ID:c-4trh9<br>CICD_LOCAL_REGISTRY:127.0.0.1:34709</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;rancher2-x-快速创建集群&quot;&gt;&lt;a href=&quot;#rancher2-x-快速创建集群&quot; class=&quot;headerlink&quot; title=&quot;rancher2.x 快速创建集群&quot;&gt;&lt;/a&gt;rancher2.x 快速创建集群&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用 Docker run 命令部署单节点 Rancher server&lt;/li&gt;
&lt;li&gt;必要前置条件&lt;ul&gt;
&lt;li&gt;OS with docker version&lt;ul&gt;
&lt;li&gt;CentOS7.6_x86-64&lt;/li&gt;
&lt;li&gt;Docker 18.09.x&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker run -d -p 80:80 -p 443:443  rancher/rancher:v2.3.3&lt;br&gt;doker logs 查看启动日志可以看到 rancher 在本地会去创建 CRD 的一些资源，然后在 rancher本身里面的话就会有包含一个微型的一个k8s api server 和一个 etcd 的进程，这是单节点跑的一个情况。&lt;/p&gt;
&lt;h2 id=&quot;导入已有-K8S-集群&quot;&gt;&lt;a href=&quot;#导入已有-K8S-集群&quot; class=&quot;headerlink&quot; title=&quot;导入已有 K8S 集群&quot;&gt;&lt;/a&gt;导入已有 K8S 集群&lt;/h2&gt;&lt;img src=&quot;http://img.zjl.pub/static/images/rancher01.png&quot;&gt;
&lt;img src=&quot;http://img.zjl.pub/static/images/rancher02.png&quot;&gt;
&lt;img src=&quot;http://img.zjl.pub/static/images/rancher03.png&quot;&gt;
&lt;img src=&quot;http://img.zjl.pub/static/images/rancher04.png&quot;&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl --insecure -sfL https://rancher.ops.com/v3/import/cfwbm2bdz6gcgxnkwvkshlqbxmwc96hbv4x6z8c4hhwnlntxx2dw28.yaml | kubectl apply -f -&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>阶段2：云原生技术进阶</title>
    <link href="http://yoursite.com/2019/12/05/%E9%98%B6%E6%AE%B52%EF%BC%9A%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/"/>
    <id>http://yoursite.com/2019/12/05/%E9%98%B6%E6%AE%B52%EF%BC%9A%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E8%BF%9B%E9%98%B6/</id>
    <published>2019-12-05T07:36:00.000Z</published>
    <updated>2020-02-28T23:34:36.321Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


      
    
    </summary>
    
    
      <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>阶段1：云原生技术基础</title>
    <link href="http://yoursite.com/2019/12/05/%E9%98%B6%E6%AE%B51%EF%BC%9A%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/12/05/%E9%98%B6%E6%AE%B51%EF%BC%9A%E4%BA%91%E5%8E%9F%E7%94%9F%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</id>
    <published>2019-12-05T07:19:13.000Z</published>
    <updated>2020-03-01T15:15:22.218Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="第1讲：第一堂“云原生”课"><a href="#第1讲：第一堂“云原生”课" class="headerlink" title="第1讲：第一堂“云原生”课"></a>第1讲：第一堂“云原生”课</h2><p>学习收益：了解云原生的概念，本质，主流技术等<br>本节大纲：  </p><ul><li>云原生技术发展历程（为什么要学习这门课程）</li><li>课程简介与预备知识（这门课程到底教什么）</li><li>云原生的定义与技术要点（本节正式内容）</li></ul><p>1.为什么要开设云原生技术公开课？<br>指导你对软件架构和设计的一套思想，按照这样一种思想做出来的软件，全新的软件开发,发布,运维模式</p><h2 id="第3讲：Kubernetes-核心概念"><a href="#第3讲：Kubernetes-核心概念" class="headerlink" title="第3讲：Kubernetes 核心概念"></a>第3讲：Kubernetes 核心概念</h2><ul><li>什么是 Kubernetes<img src="http://img.zjl.pub/static/images/k8s01.png"><img src="http://img.zjl.pub/static/images/k8s02.png"><img src="http://img.zjl.pub/static/images/k8s001.png"></li></ul><p>下面从3个方面介绍下kubernetes的核心能力</p><ul><li><p>第一个能力：Kubernetes - 调度（Scheduler）</p><img src="http://img.zjl.pub/static/images/k8s03.png"><p>kubernetes可以把用户提交的容器放到kubernetes管理的集群的某一台节点上去，那kubernetes调度器就是执行这项能力的组件，它会观察正在被调度的容器的大小，规格（所需要的CPU，memory）,然后在集群中找一台相对比较空闲的机器来进行一次placement操作，在上面这个例子中，它可能会把红颜色的容器放置到第二个空闲的机器上，来完成一次调度的工作，如下图</p><img src="http://img.zjl.pub/static/images/k8s0001.png"><img src="http://img.zjl.pub/static/images/k8s0002.png"></li><li><p>第二个能力：Kubernetes - 自动恢复<br>Kubernetes有一个节点健康检查的功能，它会监测集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。</p><img src="http://img.zjl.pub/static/images/k8s04.png"><p>上图中的下半部分意思是kubernetes会把运行在失败节点上的容器进行自动的迁移,迁移到一个健康的宿主机上，来完成集群内容器的自动恢复。</p><img src="http://img.zjl.pub/static/images/k8s05.png"><img src="http://img.zjl.pub/static/images/k8s06.png"></li><li><p>第三个能力：Kubernetes - 水平伸缩<br>Kubernetes有业务负载检查的能力，会监测业务上所承担的负载，如果这个业务本身的CPU利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容，比如在下面的例子中，黄颜色的业务过渡忙碌，kubernetes会把黄颜色业务从一份扩展到三份,那么接下来就可以通过负载均衡来把原来打到第一个黄颜色上的负载平均分到3个黄颜色的负载上去，提高响应的时间。</p><img src="http://img.zjl.pub/static/images/k8s07.png"><img src="http://img.zjl.pub/static/images/k8s08.png"></li><li><p>Kubernetes的架构<br>kubernetes是比较典型的二次架构，一个比较典型的server-client架构，master作为中央的管控节点，会去与node进行一个连接，所有UI的clinets, 这些user这边的组件只会和master进行连接，把希望的状态或者想执行的命令，下发给master,master会把这些命令或者状态下发给相应的节点进行最终的执行。</p><img src="http://img.zjl.pub/static/images/k8s09.png"><p>kubernetes master 包含4个主要的组件，API Server,Controller,Scheduler,etcd。Api server 顾名思义是用来处理 api操作的，kubernetes所有的组件都会和api server进行连接，组件与组件，一般不进行独立的连接，都依赖于apiserver进行消息的传送，Controller是控制器，它用来完成对集群状态的一些管理，比如对容器的自动恢复，自动进行水平扩张，都是controller来完成的，第三个master中的组件调度器scheduler，顾名思义，完成调度的操作，把一个用户提交的container，依据它对CPU,memory，请求大小找一台合适的节点进行放置，最后etcd是一个分布式的存储系统，apierver中所需要的这些原信息，都被放置在ectcd中，etcd本身是一个高可用系统，通过etcd保证整个kubernets master组件的高可用性，apiserver在部署上本身是可以水平扩展的高可用组件，controller是可以进行热备的一个组件，只有一个active，调度器也是相应的只有一个active，但是可以进行热备。</p><img src="http://img.zjl.pub/static/images/k8s10.png"><p>下面介绍下node，node是真正运行业务负载的，每个业务负载会以pod的形式进行运行，真正去运行这些pod的组件是叫做kubelet，也是Node上关键的一个组件，它通过apiserver接收到所需要的pod运行的状态，然后提交到下面画的这个Container Runtime这个组件中，在OS上真正去创建容器所需要运行的环境，最终把容器运行起来。那运行容器或者Pod也需要去对存储或者网络进行管理，kubernetes并不会直接进行网络和存储的操作，他们会去靠一个storage plugin或者网络的plugin来进行操作，用户自己或者一些厂商都会去写相应的storage plugin或者network plugin 真正去完成存储操作或者网络操作，在kubernetes自己的环境中，也会有kubernetes的network,它是为了提供service network来进行组网，真正完成 service组网的组件是kuber-proxy,它是利用了iptalbles的能力来进行组件kubernets networks，这个大概是node上面4个组件。node并不会直接和user进行interaction，它也只会通过 master进行交互，user是会通过master向节点下发这些信息，kubernetes每个node上都会运行这 上面说到的组件。</p><img src="http://img.zjl.pub/static/images/k8s11.png"></li></ul><p>下面看图，在说一个例子，架构中的这些组件，如何互相进行 interactive，用户可以通过ui 或者 CLI（命令行）提交一个pod给 kubernetes进行部署，那这个Pod的请求首先会通过CLI或者UI提交给kubernetes api server，那下一步apiserver会把这个信息写入到存储系统etcd，那之后呢 scheduler会通过 api server 的 watch 或者 notication机制得到一个信息：有一个pod 需要被调度，那这个时候scheduler会根据pod的内存状态进行一次调度的决策，在完成这次调度之后，它会向 api server 说：ok，这个pod需要被调度到一个节点上，那这时候apiserver 接收到这次操作之后会把这次的结果在一次去写入到etcd中，然后apiserver会通知相应的节点进行这次Pod的真正的执行启动，那相应节点的 kubelet会得到这个通知，那kubelet就会去调Container runtime来真正去启动配置这个容器，和这个容器运行的环境，去调度storage plugin来去配合存储，network plguin 去配置网络，那这个例子可以看到这些组件之间如何相互沟通相互通信协调来完成一次 pod 调度执行操作的。</p><img src="http://img.zjl.pub/static/images/k8s12.png"><ul><li>Kubernetes的核心概念与API<br>核心概念 - Pod<img src="http://img.zjl.pub/static/images/k8s13.png">看上图，用户可以向kubernetes提交一个pod的api，让kubernetes对这个Pod进行调度，把它放在某一个kubernetes管理的节点上，运行起来。一个pod简单来说是对一组容器的抽象，它里面包含一个或者多个容器。在pod里面我们也可以去定义容器所需要的运行方式，，比如说运行容器的command，以及运行容器的环境变量等。那pod这个抽象也给这些容器提供了一个共享的运行环境，他们会共享同一个网络环境，容器之间可以用localhost来进行直接的连接，那pod与pod之间是互相有隔离。</li></ul><p>核心概念 - Volume</p><img src="http://img.zjl.pub/static/images/k8s14.png"><p>volume就是卷的概念，它是用来管理kubernetes存储的，它是用来申明pod中容器可以访问的文件目录，一个卷或者一个volume可以挂载到Pod中一个或者多个容器指定的路径下面，volume本身是一个抽象的概念，一个volume可以去支持多种后端的存储，比如kubernetes volume 支持很多存储插件。</p><p>核心概念 - Deployment</p><img src="http://img.zjl.pub/static/images/k8s15.png"><p>deployment是在pod这个抽象上更为上层的一个抽象，它可以定义一个pod的副本数量，版本，一般大家用deployment这个抽象来做这个应用的真正管理，那pod是组成这个deployment最小的单元，那kubernets是通过contraller来取维护deployment中pod的数目的，也会去帮助deployment去自动恢复失败的pod，通过控制器controller也会帮助完成发布的策略，比如进行滚动升级，重新生成的升级或者进行版本的回滚。</p><p>核心概念 - Service</p><img src="http://img.zjl.pub/static/images/k8s16.png"><p>service是为了提供访问一个或者多个pod实例的访问地址，用户只希望做一次负载均衡，同时只想访问某一个固定的VIP,virtual IP地址，而不希望得到每一个具体pod的IP地址。就是把访问POD的能力抽象成一个第三方的IP地址。那实现这个kubernetes的抽象就叫service，实现service有多种方式，kubernetes支持 Cluster IP,就是刚才说到的kube-proxy的组网，支持NodePort，LoadBalance等等其他访问能力。</p><p>核心概念 - Namespaces</p><img src="http://img.zjl.pub/static/images/k8s17.png"><p>Namespaces 是用来做集群内部逻辑隔离的，包括鉴权，资源管理，那kubernetes中的每一个资源 pod，deployment，service 都属于一个 namespace，同一个namespace资源需要命名的唯一性，不同的namespace资源可以重名。那namespace一个用例，比如说用namespace来给每一个 bu 提供它所看到的一个隔离的机制。</p><p>API - 基础知识</p><img src="http://img.zjl.pub/static/images/k8s18.png"><p>kubernetes api 是由http加JSON所组成的，但用户访问的方式是http,访问api中的container内容是 json格式，那kubernetes中的kubectl，也就是它的command,kubernetes ui,或者有时候用curl直接与kubernetes沟通都是用走http+json这种形式。<br>举个例子：比如说对于我这个pod类型的资源，那它的http访问的路径 /api/v1/namespaces/$NAMESPACE/pods/$NAME 。那如果我们去提交一个pod的时候或者说是 get一个pod的时候，它的containers内容都是用json或者yaml来去表达的，上图中有一个yaml例子，可以看到对Pod资源描述也分为几个部分，那第一个部分一般来讲会是 apiVsersion , 然后描述我在操作哪个资源，比如我这里的kind:pod，在Metadata中，会写上这个pod的名字，还可以打一些label，还可以有些用户描述。比较重要的一部分就是 Spec，这个Spce也就是我们所希望 pod 达到的预期的状态，那比如说它内部需要有哪些container所被运行，images是什么，暴露的ports是什么。当我们kubernetes api 中去获取这个资源的时候，一般来说在spce下面还会有一个项目叫做 status，它会表达资源当期的状态，比如一个pod的状态可能是正在被调度，或者是已经running，或者已经被销毁。</p><p>API - Label</p><img src="http://img.zjl.pub/static/images/k8s19.png"><p>讲下上面讲到的 metedata中的 Label，这个label可以是一组key value , 这些label可以被 选择器select查询，这个能力跟sql查询语句非常相似，通过label，kubernetes api 层就可以对资源进行筛选，那这些筛选也是kubernetes对资源的集合默认表达方式，比如刚才说的deployment，它可能是代表了一组pod，去表达一组Pod就可以通过 label Selector来表达，还有那个 service对应的一组Pod,或多个pod来对他们进行统一的访问，那这个也是通过label Selector来进行select选举。所以 label是非常核心的kubernetes核心概念。</p><ul><li>尝试Kubernetes<br>这里安装就不说了。安装好之后，这里让我们尝试一些命令<img src="http://img.zjl.pub/static/images/k8s20.png"></li></ul><h2 id="第4讲：理解-Pod-和容器设计模式"><a href="#第4讲：理解-Pod-和容器设计模式" class="headerlink" title="第4讲：理解 Pod 和容器设计模式"></a>第4讲：理解 Pod 和容器设计模式</h2><img src="http://img.zjl.pub/static/images/k8s21.png"><ul><li><p>为什么我们需要 Pod</p><img src="http://img.zjl.pub/static/images/k8s22.png"><img src="http://img.zjl.pub/static/images/k8s23.png"><img src="http://img.zjl.pub/static/images/k8s24.png"><img src="http://img.zjl.pub/static/images/k8s25.png"><img src="http://img.zjl.pub/static/images/k8s26.png"><img src="http://img.zjl.pub/static/images/k8s27.png"><img src="http://img.zjl.pub/static/images/k8s28.png"><img src="http://img.zjl.pub/static/images/k8s29.png"></li><li><p>Pod的实现机制<br>我们怎么去描述超亲密关系，我们怎么到超亲密关系的容器或者业务去做统一调度，这是Pod最主要的诉求。</p><img src="http://img.zjl.pub/static/images/k8s30.png"><img src="http://img.zjl.pub/static/images/k8s31.png"><img src="http://img.zjl.pub/static/images/k8s32.png"></li><li><p>详解容器设计模式</p><img src="http://img.zjl.pub/static/images/k8s33.png"><img src="http://img.zjl.pub/static/images/k8s34.png"><img src="http://img.zjl.pub/static/images/k8s35.png"><img src="http://img.zjl.pub/static/images/k8s36.png"><img src="http://img.zjl.pub/static/images/k8s37.png"><img src="http://img.zjl.pub/static/images/k8s38.png"><img src="http://img.zjl.pub/static/images/k8s39.png"></li></ul><p>看一个我实际上deployment例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">hub.ops.com/bms/billing-java:1.0</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">20891</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">CONF_PATH</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">/docker/config</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/docker/config/billing</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">upload</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/home/upload</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">elastic/filebeat:7.4.2</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">"-c"</span><span class="string">,</span> <span class="string">"/etc/filebeat.yml"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"-e"</span><span class="string">,</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/filebeat.yml</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">filebeat.yml</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="comment">#      - name: log</span></span><br><span class="line"><span class="comment">#        nfs:</span></span><br><span class="line"><span class="comment">#          server: hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="comment">#          path: /zjl/server/billing-java/log</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">        nfs:</span></span><br><span class="line"><span class="attr">          server:</span> <span class="string">hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/zjl/server/billing-java/config</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">upload</span></span><br><span class="line"><span class="attr">        nfs:</span></span><br><span class="line"><span class="attr">          server:</span> <span class="string">hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/zjl/nfs_volume/upload</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">registry-pull-secret</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        runAsUser:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">  progressDeadlineSeconds:</span> <span class="number">600</span></span><br></pre></td></tr></table></figure><h2 id="第5讲：应用编排与管理：核心原理"><a href="#第5讲：应用编排与管理：核心原理" class="headerlink" title="第5讲：应用编排与管理：核心原理"></a>第5讲：应用编排与管理：核心原理</h2><p>理解Labels、Selectors、Annotations，以及Kubernetes的核心——控制器模式</p><ul><li><p>资源元信息</p><img src="http://img.zjl.pub/static/images/k8s40.png"><img src="http://img.zjl.pub/static/images/k8s41.png"><img src="http://img.zjl.pub/static/images/k8s42.png"><img src="http://img.zjl.pub/static/images/k8s43.png"><img src="http://img.zjl.pub/static/images/k8s44.png"></li><li><p>控制器模式</p><img src="http://img.zjl.pub/static/images/k8s45.png"><img src="http://img.zjl.pub/static/images/k8s46.png"><img src="http://img.zjl.pub/static/images/k8s47.png"><img src="http://img.zjl.pub/static/images/k8s48.png"><img src="http://img.zjl.pub/static/images/k8s49.png"><img src="http://img.zjl.pub/static/images/k8s50.png"><img src="http://img.zjl.pub/static/images/k8s51.png"><img src="http://img.zjl.pub/static/images/k8s52.png"></li><li><p>控制器模式总结</p></li></ul><h2 id="第6讲：应用编排与管理：-Deployment"><a href="#第6讲：应用编排与管理：-Deployment" class="headerlink" title="第6讲：应用编排与管理： Deployment"></a>第6讲：应用编排与管理： Deployment</h2><img src="http://img.zjl.pub/static/images/k8s53.png"><img src="http://img.zjl.pub/static/images/k8s54.png"><img src="http://img.zjl.pub/static/images/k8s55.png"><img src="http://img.zjl.pub/static/images/k8s56.png"><img src="http://img.zjl.pub/static/images/k8s57.png"><img src="http://img.zjl.pub/static/images/k8s58.png"><img src="http://img.zjl.pub/static/images/k8s59.png"><img src="http://img.zjl.pub/static/images/k8s60.png"><img src="http://img.zjl.pub/static/images/k8s61.png"><img src="http://img.zjl.pub/static/images/k8s62.png"><img src="http://img.zjl.pub/static/images/k8s63.png"><img src="http://img.zjl.pub/static/images/k8s64.png"><img src="http://img.zjl.pub/static/images/k8s65.png"><img src="http://img.zjl.pub/static/images/k8s66.png"><img src="http://img.zjl.pub/static/images/k8s67.png"><h2 id="第7讲：应用编排与管理：Job-和-DaemonSet"><a href="#第7讲：应用编排与管理：Job-和-DaemonSet" class="headerlink" title="第7讲：应用编排与管理：Job 和 DaemonSet"></a>第7讲：应用编排与管理：Job 和 DaemonSet</h2><img src="http://img.zjl.pub/static/images/k8s68.png"><img src="http://img.zjl.pub/static/images/k8s69.png"><img src="http://img.zjl.pub/static/images/k8s70.png"><img src="http://img.zjl.pub/static/images/k8s71.png"><img src="http://img.zjl.pub/static/images/k8s72.png"><img src="http://img.zjl.pub/static/images/k8s73.png"><img src="http://img.zjl.pub/static/images/k8s74.png"><img src="http://img.zjl.pub/static/images/k8s75.png"><img src="http://img.zjl.pub/static/images/k8s76.png"><img src="http://img.zjl.pub/static/images/k8s77.png"><img src="http://img.zjl.pub/static/images/k8s78.png"><img src="http://img.zjl.pub/static/images/k8s79.png"><img src="http://img.zjl.pub/static/images/k8s80.png"><img src="http://img.zjl.pub/static/images/k8s81.png"><img src="http://img.zjl.pub/static/images/k8s82.png"><img src="http://img.zjl.pub/static/images/k8s83.png"><h2 id="第8讲：应用配置管理"><a href="#第8讲：应用配置管理" class="headerlink" title="第8讲：应用配置管理"></a>第8讲：应用配置管理</h2><p>理解ConfigMaps、SecurityContexts、ServiceAccounts，以及掌握如何定义应用的资源需求、创建和使用Secret等</p><ul><li><p>ConfigMap</p><img src="http://img.zjl.pub/static/images/k8s84.png"><img src="http://img.zjl.pub/static/images/k8s85.png"><img src="http://img.zjl.pub/static/images/k8s86.png"><img src="http://img.zjl.pub/static/images/k8s87.png"><img src="http://img.zjl.pub/static/images/k8s88.png"><img src="http://img.zjl.pub/static/images/k8s89.png"><img src="http://img.zjl.pub/static/images/k8s90.png"><p>我自己这边的例子关于configmap:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">filebeat.yml:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      tags:</span> <span class="string">["billing-java"]</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/usr/local/tomcat/logs/catalina*.log</span></span><br><span class="line"><span class="attr">      scan_frequency:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"></span><br><span class="line">    <span class="string">output.kafka:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      hosts:</span> <span class="string">["hz01-op-elk-kafka-01:9092","hz01-op-elk-kafka-02:9092","hz01-op-elk-kafka-03:9092"]</span></span><br><span class="line"><span class="attr">      topic:</span> <span class="string">"bms"</span></span><br><span class="line"><span class="attr">      required_acks:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      reachable_only:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">billing-java</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">hub.ops.com/bms/billing-java:1.0</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">20891</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">CONF_PATH</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">/docker/config</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/docker/config/billing</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">upload</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/home/upload</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">filebeat</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">elastic/filebeat:7.4.2</span></span><br><span class="line"><span class="attr">        args:</span> <span class="string">[</span></span><br><span class="line">          <span class="string">"-c"</span><span class="string">,</span> <span class="string">"/etc/filebeat.yml"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"-e"</span><span class="string">,</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">200</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">100</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/filebeat.yml</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          subPath:</span> <span class="string">filebeat.yml</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="comment">#      - name: log</span></span><br><span class="line"><span class="comment">#        nfs:</span></span><br><span class="line"><span class="comment">#          server: hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="comment">#          path: /zjl/server/billing-java/log</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">        nfs:</span></span><br><span class="line"><span class="attr">          server:</span> <span class="string">hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/zjl/server/billing-java/config</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">upload</span></span><br><span class="line"><span class="attr">        nfs:</span></span><br><span class="line"><span class="attr">          server:</span> <span class="string">hz01-ops-k8s-node-03.ops.com</span></span><br><span class="line"><span class="attr">          path:</span> <span class="string">/zjl/nfs_volume/upload</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">filebeat-config</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">registry-pull-secret</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        runAsUser:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">  progressDeadlineSeconds:</span> <span class="number">600</span></span><br></pre></td></tr></table></figure></li><li><p>Secret</p></li><li><p>ServiceAccount</p></li><li><p>Resource</p></li><li><p>SecurityContext</p></li><li><p>InitContainer</p></li></ul><h2 id="【特别篇】从-0-开始创作云原生应用"><a href="#【特别篇】从-0-开始创作云原生应用" class="headerlink" title="【特别篇】从 0 开始创作云原生应用"></a>【特别篇】从 0 开始创作云原生应用</h2><h3 id="掌握使用Helm从0开始快速创作云原生应用的方法"><a href="#掌握使用Helm从0开始快速创作云原生应用的方法" class="headerlink" title="掌握使用Helm从0开始快速创作云原生应用的方法"></a>掌握使用Helm从0开始快速创作云原生应用的方法</h3><p>云原生应用是什么？<br>首先思考一个问题,云原生应用是什么,我们平常生活中会和各种各样的应用打交道,比如淘宝购物,高德导航,在PC端用word文稿,使用ps处理相片,这些在各类平台上的应用程序，对用户而言，大多数只需要点击安装就可以使用        通过吧vvvmmnz通过吧vvvmmnz            了</p><img src="http://img.zjl.pub/static/images/云原生应用01.png"><p>那么对于云上的应用或者说在kubernetes上的应用是什么样子的呢？</p><img src="http://img.zjl.pub/static/images/云原生应用02.png"><img src="http://img.zjl.pub/static/images/云原生应用03.png"><p>想象一下如果我们要把一个应用程序部署到云上,都需要做什么?<br>首先我们需要准备好它所需要的环境,打包成一个docker镜像,把这个镜像放到deployment中,部署服务,应用所需要的账户,权限,命名空间,可持久化存储这些kubernetes资源,简而言之就是要把yaml一堆配置文件部署在Kubernetes上。</p><img src="http://img.zjl.pub/static/images/云原生应用04.png"><p>虽然应用的开发者可以把这些docker镜像存放在公共的仓库中,然后把部署所需要的yaml配置文件提供给用户,但是用户仍然需要寻找这些资源文件在哪里,并把他们一一部署起来,倘若用户希望修改开发者提供的默认资源,比如说想使用更多的副本数,或者说修改服务端口,那他还需要自己去查,在这些资源文件中哪些地方需要去进行相应的修改,同时版本更替和维护同样也会给开发者和用户造成很大的麻烦,所以可以看到最原始的这种kubernetes应用形态它并不是非常的便利,那么我们今天要说的 Helm 就在这样的环境下应用而生。开发者安装 Helm Chart 的格式将应用所需要的资源文件都包装起来,通过模板化的方法将一些可变字段,比如我们之前提到的要暴露哪些端口,使用多少的副本数量,把这些信息都暴露给用户,最后将封装好的应用包,也就是我们所说的 Helm Chart 集中存放在同一的仓库里面,供用户来浏览下载,那么对于用户而言,使用 helm 一条简单的命令就可以完成应用的安装卸载和升级,我们可以在安装完成之后使用 kubectl 来查看应用安装后的pod的运行状态,需要注意的是此处使用的是 Helm v3 的一个命令,与目前相对成熟的 Helm V2 是有一定的区别的,我们推荐大家在学习尝鲜过程中使用最新的V3版本,那么站在开发者角度我们应该如何去创作一个Helm的应用呢？</p><img src="http://img.zjl.pub/static/images/云原生应用05.png"><img src="http://img.zjl.pub/static/images/云原生应用06.png"><img src="http://img.zjl.pub/static/images/云原生应用07.png"><p>首先我们需要一个准备部署的镜像,这个镜像可以是一个java程序,一个Python脚本,甚至是一个空的linux镜像,跑几条命令,这里我们是用 gloang 编写一个非常简单的 hell world 的 http 服务，并且使用docker进行打包</p><p>golang的程序大概是这样子的,包括从环境变量中读取port和username两个参数,在指定的端口上开启http服务,并返回相应的响应信息</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">port := os.Getenv(<span class="string">"PORT"</span>)</span><br><span class="line"><span class="keyword">if</span> port == <span class="string">""</span> &#123;</span><br><span class="line">port = <span class="string">"80"</span></span><br><span class="line">&#125;</span><br><span class="line">username := os.Getenv(<span class="string">"USERNAME"</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">""</span> &#123;</span><br><span class="line">username = <span class="string">"world"</span></span><br><span class="line">&#125;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello %s\n"</span>, username)</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">":"</span>+port, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是打包用的dockerfile,在这里我们首先对上面的golang代码进行编译,然后将编译后的程序放在基于alping的镜像中来缩小镜像的体积,我们看到上文所说的2个环境变量只有是port在这里面进行设置,username将作为应用的参数暴露给用户,所以在这里面先不做设置,在docker构建好镜像之后,把这个镜像上传到仓库之中,比如dockerHub或者阿里云镜像仓库中心。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.13-rc-alpine3.10 as builder</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY main.go .</span><br><span class="line">RUN go build -o hello-world main.go</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.10</span><br><span class="line">WORKDIR /app</span><br><span class="line">ARG PORT=80</span><br><span class="line">COPY --from=builder /app/hello-world /app/hello-world</span><br><span class="line">ENTRYPOINT ./hello-world</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><img src="http://img.zjl.pub/static/images/云原生应用08.png"><p>准备工作都做完以后开始我们的重头戏也就是构建 Helm Chart,首先我们先运行helm create 命令,创建一个空白的应用,在create命令运行完之后,可以看到在这个chart文件夹下出现了一系列文件和文件夹,其中Chart.yaml文件包含了helm chart的一些基本信息,而template文件夹内所存放的是所需要的各种kubernetes的资源,values.yaml提供了默认的参数配置,接下来一个个看。  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">helloWorld</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A chart can be either an 'application' or a 'library' chart.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Application charts are a collection of templates that can be packaged into versioned archives</span></span><br><span class="line"><span class="comment"># to be deployed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Library charts provide useful utilities or functions for the chart developer. They're included as</span></span><br><span class="line"><span class="comment"># a dependency of application charts to inject those utilities and functions into the rendering</span></span><br><span class="line"><span class="comment"># pipeline. Library charts do not define any templates and therefore cannot be deployed.</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the chart version. This version number should be incremented each time you make changes</span></span><br><span class="line"><span class="comment"># to the chart and its templates, including the app version.</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the version number of the application being deployed. This version number should be</span></span><br><span class="line"><span class="comment"># incremented each time you make changes to the application.</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="number">1.16</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>Chart.yaml 这个文件声明了当前chart名称和版本等一些基本的信息，这些信息会在这个chart被放到仓库之后,供用户浏览检索。在templates这个文件夹下则是存放各种部署应用所需要的yaml文件。我们来看deployment.yaml这个文件，它可以只是单纯的kubernetes原版文件,也可以是配置文件的模板,比如在这里我们看到有很多以双大括号包裹起来的变量,那我们标出的这些以value或者是chart开头的这些变量它都是从根目录下的Chart.yaml或者是Values.yaml中获取出来的。</p><img src="http://img.zjl.pub/static/images/云原生应用09.jpg"><img src="http://img.zjl.pub/static/images/云原生应用10.jpg"><p>helm在安装应用的时候，它实际上会去先渲染template这个文件夹下这些模板文件将所需要的变量都填入进去然后在使用渲染后的kubernetes yaml文件进行部署,而我们在创建helm charts 过程中实际上并不需要太多考虑如何去渲染,因为helm已经在客户端安装应用的时候帮我们把这些事情都完成了。 </p><img src="http://img.zjl.pub/static/images/云原生应用11.jpg"><p>在我们准备好应用之后我们就可以 helm lint 命令来粗略的检查下我们制作这个chart有没有什么语法上的错误，如果没有问题，我们就可以使用 helm package 命令对我们的chart文件包进行打包,那么打包之后我就可以得到一个tgz的应用包了,那这个就是我们所需要发布的一个应用。</p><img src="http://img.zjl.pub/static/images/云原生应用12.jpg"><p>我们可以使用helm install 命令来尝试安装一下刚刚做好的应用包,然后使用 kubectl get pods 来查看一下pod的允许状态,同样我们可以通过 port-forward命令来把这个port的端口映射到本地端口,这样就可以通过本地的这个localhost来访问到刚刚这个部署好的这个应用。</p><img src="http://img.zjl.pub/static/images/云原生应用13.png"><p>那有的同学可能会有疑惑,虽然我们应用开发者把这些可配置信息都暴露在了values.yaml里面,那么用户使用如果想要修改,用户只要在install的时候使用这个set参数设置,把想要设置的参数覆盖掉,同样的如果用户自己编写自己的my-values.yaml这样的文件,也可以把这个文件在install的时候设置起来,这样这个文件中的参数也会覆盖掉原有的参数，如果用户不想重新去install一个新的app,而是想要去升级原来app,他也只需要去用helm upgrade命令把这个 helm install替换掉就可以了</p><img src="http://img.zjl.pub/static/images/云原生应用14.png"><p>那么细心的同学可以还会注意到之前在执行helm install命令之后,这个提示信息其实是有一些问题的,我们回看下 deployment.yaml 文件,这里面看到2个label是有出路的，这个提示信息其实就是在template note文件下,把里面相应的信息修改下。</p><img src="http://img.zjl.pub/static/images/云原生应用15.png"><p>接下来我们看 Chart.yaml 文件,更新下 version 字段，重新做一个打包,就可以对原来部署好的应用做一个版本升级。</p><img src="http://img.zjl.pub/static/images/云原生应用16.png"><p>那么制作完成的应用如何其他人做分享,Helm官网提供了 CHARTMUSEUM 这个工具，用这个工具大家可以构建自己的chart仓库,但是自己维护成本比较高,另外对于使用的用户而言,如果他使用的每一个应用开发者都自己有一个仓库的话,那其他用户就需要加入很多个chart仓库,这个非常麻烦,非常不利于应用的传播和分享,阿里云提供了一个 开放云原生应用中心 Cloud Native APP Hub,这里面同步了各种非常流行的应用,同时还提供了开发者上传自己应用的渠道,</p><img src="http://img.zjl.pub/static/images/云原生应用17.png"><p>在开放云原生应用中心中,应用主要来自于两个渠道,一个是定期同步国外知名helm仓库,同步chart资源,同时将其内部使用的一些docker镜像,也同时替换,另一个是和 helm官方库一样,在 github上也接收开发者通过 pull request 形式提交自己的应用。</p><img src="http://img.zjl.pub/static/images/云原生应用18.png"><img src="http://img.zjl.pub/static/images/云原生应用19.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;



&lt;h2 id=&quot;第1讲：第一堂“云原生”课&quot;&gt;&lt;a href=&quot;#第1讲：第一堂“云原生”课&quot; class=&quot;headerlink&quot; title=&quot;第1讲：第一堂“云原生”课&quot;&gt;&lt;/a&gt;第1讲：第一堂“云原生”课&lt;/h2&gt;&lt;p&gt;学习收益：
      
    
    </summary>
    
    
      <category term="云原生" scheme="http://yoursite.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
  </entry>
  
</feed>
