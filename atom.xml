<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>落魄de少爷</title>
  
  <subtitle>运维狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-03T02:59:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZhouJinliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理财日记</title>
    <link href="http://yoursite.com/2020/07/24/%E7%90%86%E8%B4%A2%E6%97%A5%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/07/24/%E7%90%86%E8%B4%A2%E6%97%A5%E8%AE%B0/</id>
    <published>2020-07-24T04:10:44.000Z</published>
    <updated>2020-08-03T02:59:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>截止到 7.23 :</p><table><thead><tr><th align="center">我的定投</th><th align="left">近三年</th><th align="right">重仓持股</th><th align="center">单位净值</th><th align="center">定投策略</th></tr></thead><tbody><tr><td align="center">信达澳银新能源产业股票</td><td align="left">+170.02%</td><td align="right">欧菲光 立讯精密 鹏鼎控股 创世纪 欣旺达 歌尔股份 顺络电子 德赛电池 长川科技 风华高科</td><td align="center">3.4690</td><td align="center">每周四定投 50元</td></tr><tr><td align="center">工银瑞信前沿医疗股票</td><td align="left">+209.06%</td><td align="right">长春高新 恒瑞医药 迈瑞医疗 英科医疗 万孚生物 药明康德 健帆生物 凯普生物 九洲药业 博腾股份</td><td align="center">3.7520</td><td align="center">每周四定投 100元</td></tr><tr><td align="center">交银施罗德医疗创新股票</td><td align="left">+226.25%</td><td align="right">恒瑞医药 药明康德 山东药玻 爱尔眼科 泰格医药 长春高新 迈瑞医疗 迈克生物 通策医疗 金域医学</td><td align="center">3.2909</td><td align="center">每周四定投 100元</td></tr><tr><td align="center">国泰大健康股票</td><td align="left">+152.62%</td><td align="right">老百姓 凯利泰 亿帆医药 康德莱 宏大爆破 应流股份 东诚药业 美年健康 裕同科技 祁连山</td><td align="center">3.4750</td><td align="center">每周四定投 50元</td></tr><tr><td align="center">招商医药健康产业股票</td><td align="left">+200.19%</td><td align="right">大参林 健帆生物 华大基金 迪安诊断 华兰生物 药明康德 泰格医药 英科医疗 智飞生物 万泰生物</td><td align="center">3.0860</td><td align="center">每周四定投 100元</td></tr><tr><td align="center">易方达消费行业股票</td><td align="left">+107.97%</td><td align="right">五粮液 贵州茅台 山西汾酒 格力电器 美的集团 泸州老窖 顺鑫农业 古井贡酒 东阿阿胶 苏泊尔</td><td align="center">3.9390</td><td align="center">每周四定投 100元</td></tr><tr><td align="center">安信价值精选股票</td><td align="left">+66.74%</td><td align="right">宁德时代 丽珠集团 贵州茅台 完美世界 老板电器 保利地产 海尔智家 五粮液 格力电器 周大生</td><td align="center">4.2720</td><td align="center">每周四定投 100元</td></tr><tr><td align="center">嘉实新兴产业股票</td><td align="left">+162.31%</td><td align="right">广联达 通策医疗 恒生电子 华测检测  国瓷材料 汇川技术 迈瑞医疗 中兴通讯 我武生物 三安光电</td><td align="center">4.8508</td><td align="center">每周四定投 50元</td></tr><tr><td align="center">汇丰晋信科技先锋股票</td><td align="left">+92.42%</td><td align="right">立讯精密 恒生电子 东方财富 圣邦股份 长电科技 东山精密 完美世界 浪潮信息 三安光电 启明星辰</td><td align="center">3.5964</td><td align="center">每周四定投 100元</td></tr></tbody></table><p>i=（p% x 样本数）</p><p>880004178258</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;截止到 7.23 :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;我的定投&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;近三年&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;重仓持股&lt;/th&gt;
&lt;th align=&quot;center&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何阅读一本书</title>
    <link href="http://yoursite.com/2020/07/22/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://yoursite.com/2020/07/22/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/</id>
    <published>2020-07-22T09:59:18.000Z</published>
    <updated>2020-07-22T09:59:18.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>股票知识</title>
    <link href="http://yoursite.com/2020/07/15/%E8%82%A1%E7%A5%A8%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/07/15/%E8%82%A1%E7%A5%A8%E7%9F%A5%E8%AF%86/</id>
    <published>2020-07-15T09:35:16.000Z</published>
    <updated>2020-07-16T06:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跟着外资买股票"><a href="#跟着外资买股票" class="headerlink" title="跟着外资买股票"></a>跟着外资买股票</h1><h2 id="外资持股查看"><a href="#外资持股查看" class="headerlink" title="外资持股查看"></a>外资持股查看</h2><p>首先我们要看外资都买了哪些类型的股票？这些股票都有什么特点？截止 2020-07-15，信息来自于同花顺软件，我做了一个外资的持股排名，按照市值来排名，以及按照持仓占比来排名，来分析下他们到底有哪些选股逻辑和投资逻辑。</p><p>按照持股市值排名：</p><img src="http://img.zjl.pub/static/images/股票01.png"><p>按照占总股本排名:</p><p>总股本会有个上限，买入超过30%,证监会就要警告不要买了。</p><img src="http://img.zjl.pub/static/images/股票02.png"><p>然后根据上面的两张图，我又做了2张图，增加了 近3年的 ROE(净资产收益率)和 股息率 第一张是按照持仓市值(代表花的钱最多)来排名，就是说外资的持仓市值前20名的股票，就是他们在我们中国，买的最多的，持仓最重的前20只股票；第二张是外资在我们中国持仓比占（越高代表越认可这家公司）比最高的前20只股票，也是比较看好的。</p><p>ROE 净资产收益率 ： 长期来看，持有一家上市公司股票年化收益率约等于他每年的平均 ROE 的值，也就是说你持有这只股票的话，每一年大概收益20%。<br>股息率：代表这个上市公司的分红情况，股息率越高，对于长期股东来说越友好。</p><h2 id="选出好股票六大关键点"><a href="#选出好股票六大关键点" class="headerlink" title="选出好股票六大关键点"></a>选出好股票六大关键点</h2><ol><li>市值100亿以下以及新股次新股不要选</li><li>公司要能够持续赚钱，产生净利润，是否连续3年净利润为正</li><li>不仅要能赚钱，更要真金白银正向现金流，在财务报表中经营性现金流净额是否连续3年为正。只要能够产生现金流的公司，或者说他的现金流跟净利润产生一致的公司，才是真正能够赚钱的好公司。有些公司经常发债，增发股票需要融资的公司，肯定是由于他们的现金流不足。才需要去补充现金流。</li><li>ROE 净资产收益率连续3年保持在 10% 以上。</li><li>要了解公司的负债，融资的钱都去干啥了。如果是家资产负债率比较高的公司，比如30%或者50%以上。那么他借的钱到底用到哪了，负债如果在增长，盈利，净利润应该也要增长才行。</li><li>流通股是否在持续变少，还是在慢慢变多。增持回购，还是增发减持。增发股票都干啥了，是否有回购，或者高管回购，高管增持，大股东增持这种情况</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跟着外资买股票&quot;&gt;&lt;a href=&quot;#跟着外资买股票&quot; class=&quot;headerlink&quot; title=&quot;跟着外资买股票&quot;&gt;&lt;/a&gt;跟着外资买股票&lt;/h1&gt;&lt;h2 id=&quot;外资持股查看&quot;&gt;&lt;a href=&quot;#外资持股查看&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>springboot_monitor</title>
    <link href="http://yoursite.com/2020/07/09/springboot-monitor/"/>
    <id>http://yoursite.com/2020/07/09/springboot-monitor/</id>
    <published>2020-07-09T15:15:03.000Z</published>
    <updated>2020-07-10T05:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>application.properties:</p><p>spring.application.name=Jeremy.Zhou<br>management.metrics.tags.application=${spring.application.name}</p><p>management.endpoints.web.exposure.include=*<br>management.endpoints.web.exposure.exclude = env,beans</p><p>management.endpoint.shutdown.enabled=true<br>management.metrics.export.simple.enabled=false</p><p>info.author=Jeremy.Zhou<br>info.mobile=EC</p><!--actuator 监控模块--><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><!--micrometer核心包，桥接Prometheus--><pre><code>&lt;dependency&gt;    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;    &lt;version&gt;1.5.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><!--micrometer获取jvm相关信息,用于展示在Grafana上--><pre><code>&lt;dependency&gt;    &lt;groupId&gt;io.github.mweirauch&lt;/groupId&gt;    &lt;artifactId&gt;micrometer-jvm-extras&lt;/artifactId&gt;    &lt;version&gt;0.1.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>MeterBinder接口实现 bind 方法注册到 MeterRegistry<br>业务代码逻辑 更新 Metrics<br>使用并验证 Metrics</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.metrics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Counter;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Gauge;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.MeterRegistry;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.binder.MeterBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharlesMetrics</span> <span class="keyword">implements</span> <span class="title">MeterBinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Counter counter1;</span><br><span class="line">    <span class="keyword">public</span> Counter counter2;</span><br><span class="line">    <span class="keyword">public</span> Counter counter3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Double&gt; map;</span><br><span class="line"></span><br><span class="line">    CharlesMetrics() &#123; map = <span class="keyword">new</span> HashMap&lt;&gt;(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindTo</span><span class="params">(MeterRegistry meterRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter1 = Counter.builder(<span class="string">"charles.demo.counter"</span>).tages(<span class="keyword">new</span> String[]&#123;<span class="string">"name"</span>,<span class="string">"counter1"</span>&#125;).description(<span class="string">"This is the first counter"</span>)</span><br><span class="line"><span class="keyword">this</span>.counter2 = Counter.builder(<span class="string">"charles.demo.counter"</span>).tages(<span class="keyword">new</span> String[]&#123;<span class="string">"name"</span>,<span class="string">"counter2"</span>&#125;).description(<span class="string">"This is the first counter"</span>)</span><br><span class="line"><span class="keyword">this</span>.counter3 = Counter.builder(<span class="string">"charles.demo.counter"</span>).tages(<span class="keyword">new</span> String[]&#123;<span class="string">"name"</span>,<span class="string">"counter3"</span>&#125;).description(<span class="string">"This is the first counter"</span>)</span><br><span class="line"></span><br><span class="line">Gauge.builder(<span class="string">"charles.demo.gauge"</span>,map,x-&gt;x.get(<span class="string">"x"</span>)).tages(<span class="string">"name"</span>,<span class="string">"gauge1"</span>).description(<span class="string">"This is Gauge"</span>).register(meterRegistry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;application.properties:&lt;/p&gt;
&lt;p&gt;spring.application.name=Jeremy.Zhou&lt;br&gt;management.metrics.tags.application=${spring.application.name}&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用Prometheus实践基于Spring Boot监控告警体系</title>
    <link href="http://yoursite.com/2020/06/18/%E4%BD%BF%E7%94%A8Prometheus%E5%AE%9E%E8%B7%B5%E5%9F%BA%E4%BA%8ESpring-Boot%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2020/06/18/%E4%BD%BF%E7%94%A8Prometheus%E5%AE%9E%E8%B7%B5%E5%9F%BA%E4%BA%8ESpring-Boot%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6%E4%BD%93%E7%B3%BB/</id>
    <published>2020-06-18T05:02:37.000Z</published>
    <updated>2020-06-18T05:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 该如何接入 prometheus ?</p><p>SpringBoot 接入 prometheus 我们一般是利用 SpringBoot 自带的监控神器Actuator, actuator 是 springboot的一个子项目，它是为应用提供了强大的监控能力，springboot 2.0 开始，actuator会将底层改为 Micrometer，Micrometer提供了更强的，并且更加灵活的监控能力，Mircometer实际是一个监控门面的一个设计模式，可以类比成监控界的sasfu4j，借助 micrometer, 应用可以对接各种监控系统，比如像Prometheus。Micrometer的官网 <a href="http://micrometer.io/" target="_blank" rel="noopener">http://micrometer.io/</a> , 大家可以看下，我们看Documentation, micrometer可以对接非常多的监控系统，micrometer是支持 springboot 1.5.x 和 springboot 2.0 两个版本。springboot 1.5.x 主要是需要使用 micrometer-spring-legacy，这么一个仲裁包去进行使用，而springboot2.x 默认支持了springboot的micrometer,我们这边有这么个例子：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot 该如何接入 prometheus ?&lt;/p&gt;
&lt;p&gt;SpringBoot 接入 prometheus 我们一般是利用 SpringBoot 自带的监控神器Actuator, actuator 是 springboot的一个子项目，它是为应用提供了强大的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>node_exporter</title>
    <link href="http://yoursite.com/2020/05/06/node-exporter/"/>
    <id>http://yoursite.com/2020/05/06/node-exporter/</id>
    <published>2020-05-06T11:23:55.000Z</published>
    <updated>2020-05-07T02:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>CPU的使用率 = 所有非空闲状态的CPU使用时间总和 / 所有状态CPU时间的总和</p><p>上面的公式需要将所有的项加在一起比较麻烦，比如用户态，内核态，io等待 </p><p>将上面的公式简化下为：</p><p>100% - （idle / 总时间）</p><p>那么要算一分钟平均使用率呢？</p><p>node_exporter 返回的数据类型 == 》 counter 类型数据 （CPU底层是时间的累积）</p><p>函数 increase()  increase(node_cpu[1m])</p><p>sum()函数 ： 结果集合进行加和<br>sum(increase(node_cpu{mode=”idle”}[1m])) 1分钟空闲时间增量</p><p>sum(increase(node_cpu[1m])) 1分钟全部时间增量</p><p>sum(increase(node_cpu{mode=”idle”}[1m])) / sum(increase(node_cpu[1m]))</p><p>by (instance)</p><p>(sum(increase(node_cpu{mode=”idle”}[1m])) by(instance)) / (sum(increase(node_cpu[1m])) by(instance))</p><p>node_filesystem_avail{device=<del>“:/.*”}*100/(node_filesystem_size{device=</del>“:/.*”}-(node_filesystem_free{device=<del>“:/.*”}-node_filesystem_avail{device=</del>“:/.*”}))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CPU的使用率 = 所有非空闲状态的CPU使用时间总和 / 所有状态CPU时间的总和&lt;/p&gt;
&lt;p&gt;上面的公式需要将所有的项加在一起比较麻烦，比如用户态，内核态，io等待 &lt;/p&gt;
&lt;p&gt;将上面的公式简化下为：&lt;/p&gt;
&lt;p&gt;100% - （idle / 总时间）&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go知识点整理</title>
    <link href="http://yoursite.com/2020/05/03/go%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2020/05/03/go%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</id>
    <published>2020-05-02T23:38:02.000Z</published>
    <updated>2020-08-26T13:08:49.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Day01-Go语言基础语法入门"><a href="#Day01-Go语言基础语法入门" class="headerlink" title="Day01 - Go语言基础语法入门"></a>Day01 - Go语言基础语法入门</h1><h1 id="Day02-Go语言复合数据类型"><a href="#Day02-Go语言复合数据类型" class="headerlink" title="Day02 - Go语言复合数据类型"></a>Day02 - Go语言复合数据类型</h1><h1 id="Day03-Go语言中的函数"><a href="#Day03-Go语言中的函数" class="headerlink" title="Day03 - Go语言中的函数"></a>Day03 - Go语言中的函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>关键点：func申明 , 函数名 , 形参列表 ,  函数体 ,  返回值列表 </p><ul><li><p>无参无返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有参无返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">(name <span class="keyword">string</span>,name2 <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Hi,"</span>,name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1 <span class="keyword">int</span>,n2 <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>调用方式：方法名()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">sayHello() <span class="comment">//调用无参函数</span></span><br><span class="line">sayHi(<span class="string">"小王"</span>,<span class="string">"小李"</span>) <span class="comment">//调用有参函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul><li>参数类型合并</li></ul><p>多个连续相同参数类型可合并</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(p1,p2 <span class="keyword">string</span>,p3,p4 <span class="keyword">int</span>,p5,p6 <span class="keyword">bool</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Println(p1,p2,p3,p4,p5,p6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可变参数  </li></ul><p>几个参数传递几个值, Println 函数可以传递任意个参数, 引出可变参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(args ...<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%T,%#v\n"</span>,args,args) <span class="comment">// args 是切片类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1,n2 <span class="keyword">int</span>, args ...<span class="keyword">int</span>)</span> // 声明至少有2个参数</span></span><br></pre></td></tr></table></figure><ul><li>可变参数传递解操作<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1,n2 <span class="keyword">int</span>,args...<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">total := n1+n2</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> args&#123;</span><br><span class="line">total += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n1,n2 <span class="keyword">int</span>,args...<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> add(n1,n2,args...) <span class="comment">//解操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>案例2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">params := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(add(<span class="number">1</span>,<span class="number">2</span>,params...))</span><br></pre></td></tr></table></figure><h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><ul><li><p>多返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">r1 := add(n1,n2)</span><br><span class="line">r2 := mult(n1,n2)</span><br><span class="line"><span class="keyword">return</span> r1,r2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="params">(r1,r2 <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">r1 := add(n1,n2)</span><br><span class="line">r2 := mult(n1,n2)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="值类型-amp-引用类型"><a href="#值类型-amp-引用类型" class="headerlink" title="值类型 &amp;  引用类型"></a>值类型 &amp;  引用类型</h2><p>值类型 存储的是值  int,float,point,数组，结构体<br>引用类型 存储的是地址 切片,映射,接口  </p><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><ul><li>阶乘玩法  </li></ul><p>函数直接或者间接调用自己,总有一个停止的条件  </p><p>n! = 1x2x3x…xn<br>n=0 : 0!<br>n=1 : 1<br>n=2 : 1x2<br>n=3 : 1x2x3  </p><p>n! = (n-1)! x n  </p><p>定义：f(n) = n! = f(n-1) x n  在函数内部调用了自己，算法上叫分治,将大问题分解为多个相同的小问题, 代码上理解为递归调用  </p><p>n的阶乘函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="keyword">int64</span>)</span><span class="title">int64</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;   <span class="comment">// 停止条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> <span class="comment">// return 以后就不会执行后面的代码逻辑了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f(n<span class="number">-1</span>) * n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>汉诺塔玩法</li></ul><h2 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h2><p>指针，或者说pointer是一串指向某个内存地址的字符百串，所谓指向是指这串字符串的内容是内存地址的值<br>&amp;表示取度地址，例如你有一个变量a那么&amp;a就是变量a在内存中的地址，对于知golang，指针也是有类型的，比如如果a是一个string那么&amp;a是一个string的指针类型，在go里面叫&amp;string,所以你道看到b := &amp;a，a，b是两个不同的变量，a是string类型，b是&amp;string类型，你用fmt去打印内b，你会发现它是一串内存地址，而非a的值,所以为了拿到a的值，有个操作<em>，用来取出指针对应内存地址里存的值，所以当容你fmt打印一下</em>b它会跟a一模一样  </p><ul><li>值传递 和 指针传递 例子：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(value <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">value += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changePointer</span><span class="params">(pointer *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">*pointer = *pointer + <span class="number">1</span>  <span class="comment">// * </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">value := <span class="number">1</span></span><br><span class="line">change(value) <span class="comment">// 这个相当于 把 上面那个 value 的值传递给 形参，这两个 value 不一样</span></span><br><span class="line">fmt.Println(value)</span><br><span class="line"></span><br><span class="line">changePointer(&amp;value)  <span class="comment">// &amp; 表示取地址 ， &amp;value 就是变量 value 在内存中的地址  &amp;value 这个地址赋值给 pointer</span></span><br><span class="line"></span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><ul><li><p>函数赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a := test <span class="comment">//函数赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个函数变量 直接赋值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1+n2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数类型变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></li><li><p>参数类型为函数</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(n1,n2 <span class="keyword">int</span>,callback <span class="keyword">func</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)</span><span class="title">int</span>)</span> &#123;</span><br><span class="line">rt := callback(n1,n2)</span><br><span class="line"><span class="keyword">if</span> rt &gt;=<span class="number">0</span> &amp;&amp; rt &lt;= <span class="number">100</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mult</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1 * n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">calc(<span class="number">1</span>,<span class="number">2</span>,add)</span><br><span class="line">calc(<span class="number">1</span>,<span class="number">2</span>,mult)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>不取名，直接写 ，只用一次</p><p>还有一种写法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"call"</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合作用域"><a href="#结合作用域" class="headerlink" title="结合作用域"></a>结合作用域</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">name,desc := <span class="string">"kk"</span>,<span class="string">"i am kk"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(name,desc)</span><br><span class="line">&#125;(<span class="string">"Jack"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>匿名函数引用匿名函数之外的变量，这种就是闭包  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBase</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> n + base</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">add1 := addBase(<span class="number">1</span>)</span><br><span class="line">fmt.Println(addBase(<span class="number">1</span>))</span><br><span class="line">fmt.Println(add1(<span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>go语言希望程序内部如果有错误,通过最后一个返回值显示返回给调用者，然后由调用者决定如何处理 </p><ul><li>创建错误  </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">e := fmt.Errorf(<span class="string">"自定义错误"</span>)</span><br><span class="line"></span><br><span class="line">e2 := errors.New(<span class="string">"自定义错误2"</span>)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* 错误类型的返回值  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(n1,n2 <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>,error)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> n2 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>,errors.New(<span class="string">"除数为0"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n1/n2,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">rt,err := div(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h2><p>延迟到函数退出之前在执行</p><h1 id="day04-Go语言中的包和单元测试"><a href="#day04-Go语言中的包和单元测试" class="headerlink" title="day04 - Go语言中的包和单元测试"></a>day04 - Go语言中的包和单元测试</h1><h1 id="Day05-go语言面向对象和结构体"><a href="#Day05-go语言面向对象和结构体" class="headerlink" title="Day05 - go语言面向对象和结构体"></a>Day05 - go语言面向对象和结构体</h1><p>结构体是由一些属性组成的符合数据类型，每个属性都有名称和类型。面向对象有3个特征：封装，继承，多态，你可以认为结构体就是用来做封装的。封装就是把数据隐藏起来，只对外提供一些对数据的访问，操作的功能，继承就是结构体里面的一些组合，多态在go里面是接口进行实现的。面向对象是一种思想，各个语言有它的实现,需要注意的是，结构体是一个自定义类型，对于自定义类型，它有很多种格式，比如可以把 int 进行重定义，也可以重定义一个函数，可以把一个切片进行重定义。</p><p><strong>type语法格式为</strong></p><table><tr><td bgcolor=#7FFFD4>type TypeName Formatter //formatter就是格式</td></tr></table><table><tr><td bgcolor=#7FFFD4>format 可以是任意内置类型，函数签名，结构体，接口</td></tr></table><h2 id="对已有的类型进行重定义（已有的内置类型）"><a href="#对已有的类型进行重定义（已有的内置类型）" class="headerlink" title="对已有的类型进行重定义（已有的内置类型）"></a>对已有的类型进行重定义（已有的内置类型）</h2><p>1.代码示例:（对已有的int类型进行重定义）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Counter <span class="keyword">int</span> <span class="comment">//对已有的类型进行重定义，注意，这两种是不同的数据类型，不能进行运算的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var name Type 定义变量</span></span><br><span class="line"><span class="keyword">var</span> cnt Counter <span class="comment">// 对应上面的定义变量，这里是定义 Counter 类型的变量 cnt</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,cnt) <span class="comment">// 输出结果是 main.Counter</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, cnt) <span class="comment">// 打印零值是 0</span></span><br><span class="line"></span><br><span class="line">cnt = <span class="number">1</span> <span class="comment">// 对 cnt 进行赋值</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,cnt) <span class="comment">// 输出结果是 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.代码示例:（对已有的 map 类型进行重定义）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,task) <span class="comment">// 输出结果是： main.Task</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task) <span class="comment">// 打印零值： main.Task(nil)</span></span><br><span class="line">task = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>:<span class="string">"完成Todo管理"</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task) <span class="comment">// 打印输出结果：main.Task&#123;"name":"完成Todo管理"&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.代码示例:（对函数类型进行重新自定义类型）函数签名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Callback <span class="function"><span class="keyword">func</span><span class="params">(args ...<span class="keyword">string</span>)</span> //类型为函数：可以接收任意多个<span class="title">string</span>参数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">print</span> Callback</span><br><span class="line"><span class="built_in">print</span> = <span class="function"><span class="keyword">func</span><span class="params">(args ...<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i,v := <span class="keyword">range</span> args &#123;</span><br><span class="line">fmt.Println(i,v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义结构体类型-创造新的类型-结构体"><a href="#定义结构体类型-创造新的类型-结构体" class="headerlink" title="定义结构体类型 (创造新的类型) 结构体"></a>定义结构体类型 (创造新的类型) 结构体</h2><p><strong>定义</strong></p><p>结构体定义使用 struct 标识, 需要指定其包含的属性（名和类型），指定在大括号里面，每个属性由属性名和属性类型组成</p><p>代码示例：<br>主要演示了 如何定义结构体，如何对结构体进行赋值以及指定赋值，最后定义了结构体指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 Task 结构体类型</span></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span>&#123;  <span class="comment">//可以定义空的struct，不包含任何数据</span></span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime time.Time</span><br><span class="line">status <span class="keyword">int</span></span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task <span class="comment">//结构体类型的变量 =&gt; 结构体的实例</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, task)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task) <span class="comment">// 零值是对应类型的零值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对结构体进行赋值</span></span><br><span class="line">task = Task&#123;</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">"完成Todolist"</span>,</span><br><span class="line">time.Now(),</span><br><span class="line">time.Now().Add(<span class="number">24</span> * time.Hour),</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">"kk"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种赋值方式:按照属性名进行初始化</span></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">2</span>,</span><br><span class="line">name:<span class="string">"完成知识整理任务"</span>,</span><br><span class="line">user:<span class="string">"kk"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体 零值 字面量</span></span><br><span class="line">task = Task&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针</span></span><br><span class="line"><span class="keyword">var</span> ptask *Task</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, ptask)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, ptask)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对指针进行赋值</span></span><br><span class="line">ptask = &amp;Task&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, ptask)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体属性的访问"><a href="#结构体属性的访问" class="headerlink" title="结构体属性的访问"></a>结构体属性的访问</h2><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span>&#123;  <span class="comment">//可以定义空的struct，不包含任何数据</span></span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime time.Time</span><br><span class="line">status <span class="keyword">int</span></span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 属性的访问/修改</span></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">2</span>,</span><br><span class="line">name:<span class="string">"完成知识整理任务"</span>,</span><br><span class="line">user:<span class="string">"kk"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(task.name,task.id,task.status)</span><br><span class="line"></span><br><span class="line">task.status = <span class="number">3</span></span><br><span class="line">fmt.Println(task.name,task.id,task.status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="值类型-引用类型（重要）"><a href="#值类型-引用类型（重要）" class="headerlink" title="值类型,引用类型（重要）"></a>值类型,引用类型（重要）</h2><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span>&#123;  <span class="comment">//可以定义空的struct，不包含任何数据</span></span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime time.Time</span><br><span class="line">status <span class="keyword">int</span></span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> task Task</span><br><span class="line"><span class="comment">//值类型，引用类型 =》结构体是值类型</span></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">2</span>,</span><br><span class="line">name:<span class="string">"完成知识整理任务"</span>,</span><br><span class="line">user:<span class="string">"kk"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task2 := task</span><br><span class="line"></span><br><span class="line">task2.user = <span class="string">"yy"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)    <span class="comment">//如果相等，  就是引用类型</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task2)   <span class="comment">//如果不相等， 就是值类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面引出一个问题就是 ： 如果在函数上进行结构体的参数传递，不会对外有影响</span></span><br><span class="line">change(task)</span><br><span class="line">fmt.Println(task.user) <span class="comment">// 注意：打印出来的结果 task.user 的值是不变的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(task Task)</span></span> &#123;</span><br><span class="line">task.user = <span class="string">"xxxxxxxxx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化结构体的指针"><a href="#初始化结构体的指针" class="headerlink" title="初始化结构体的指针"></a>初始化结构体的指针</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptask2 := <span class="built_in">new</span>(Task) <span class="comment">// 用 new 函数进行初始化</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, ptask2)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, ptask2)</span><br></pre></td></tr></table></figure><h2 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h2><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//匿名结构体 ==》 直接初始化给一个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var user struct &#123;</span></span><br><span class="line"><span class="comment">//id int</span></span><br><span class="line"><span class="comment">//name string</span></span><br><span class="line"><span class="comment">//age int</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接初始化匿名结构体 ，类似于  var name string = "kk"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125; = <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">"kk"</span>,</span><br><span class="line"><span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以省略类型 var name = "kk"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">"kk"</span>,</span><br><span class="line"><span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,user1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 短声明</span></span><br><span class="line"></span><br><span class="line">user2 := <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">"kk"</span>,</span><br><span class="line"><span class="number">30</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,user2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">tel <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id        <span class="keyword">int</span></span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime   time.Time</span><br><span class="line">status    <span class="keyword">int</span></span><br><span class="line">user      User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task </span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, task)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line">task.user.name = <span class="string">"kk"</span></span><br><span class="line">fmt.Println(task.user.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"完成TODOLIST"</span>,</span><br><span class="line">user:User&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"kk"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line">user := User&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"yy"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"完成TODOLIST"</span>,</span><br><span class="line">user:user,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体嵌套（匿名嵌入）"><a href="#结构体嵌套（匿名嵌入）" class="headerlink" title="结构体嵌套（匿名嵌入）"></a>结构体嵌套（匿名嵌入）</h2><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">tel <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id        <span class="keyword">int</span></span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime   time.Time</span><br><span class="line">status    <span class="keyword">int</span></span><br><span class="line">User                 <span class="comment">//这里不指定 属性名 这种叫匿名嵌入，类似于面向对象里面的继承，默认也是有一个属性名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task </span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, task)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">task = Task &#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"完成TODOLIST"</span>,</span><br><span class="line">User:User&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"zz"</span>,</span><br><span class="line">addr:<span class="string">"北京"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(task.addr)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体命名嵌入指针对象"><a href="#结构体命名嵌入指针对象" class="headerlink" title="结构体命名嵌入指针对象"></a>结构体命名嵌入指针对象</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">tel <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id        <span class="keyword">int</span></span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime   time.Time</span><br><span class="line">status    <span class="keyword">int</span></span><br><span class="line">user      *User <span class="comment">// * 表示一个指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line">task = Task &#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"完成TOD"</span>,</span><br><span class="line">user:&amp;User&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"yy"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line">fmt.Println(task.user.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体匿名嵌入指针对象"><a href="#结构体匿名嵌入指针对象" class="headerlink" title="结构体匿名嵌入指针对象"></a>结构体匿名嵌入指针对象</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">tel <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id        <span class="keyword">int</span></span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">startTime time.Time</span><br><span class="line">endTime   time.Time</span><br><span class="line">status    <span class="keyword">int</span></span><br><span class="line">*User             <span class="comment">//匿名嵌入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> task Task</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line">task = Task&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"完成todo"</span>,</span><br><span class="line">User:&amp;User&#123;</span><br><span class="line">id:<span class="number">1</span>,</span><br><span class="line">name:<span class="string">"kk"</span>,</span><br><span class="line">addr:<span class="string">"西安"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task2 := task</span><br><span class="line"></span><br><span class="line">task2.name = <span class="string">"完成整理"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(task)</span><br><span class="line">fmt.Println(task2)</span><br><span class="line"></span><br><span class="line">task.User.addr = <span class="string">"北京"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,task.User.addr)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,task2.User.addr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体可见性"><a href="#结构体可见性" class="headerlink" title="结构体可见性"></a>结构体可见性</h2><p>暂时没有</p><h2 id="方法-给特定类型定义函数，这个函数只能由这种特定类型调用"><a href="#方法-给特定类型定义函数，这个函数只能由这种特定类型调用" class="headerlink" title="方法  给特定类型定义函数，这个函数只能由这种特定类型调用"></a>方法  给特定类型定义函数，这个函数只能由这种特定类型调用</h2><p>方法-值接收类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime *time.Time</span><br><span class="line">endTime *time.Time</span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定类型指定 =&gt; 接收者 , 这个函数只能由 Task 类型的实例来调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task Task)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">task.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task Task)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> task.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">task := Task&#123;name:<span class="string">"完成TODO"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实参 传递 给 形参 [形参就是 func(task Task)里面的 task,实参就是上面定义的 task,这是一个拷贝的过程，就是值传递]</span></span><br><span class="line">task.SetName(<span class="string">"知识整理"</span>) <span class="comment">// 方法调用</span></span><br><span class="line">fmt.Println(task.GetName())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法-指针接收类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime *time.Time</span><br><span class="line">endTime *time.Time</span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定类型指定 =&gt; 接收者 , 这个函数只能由 Task 类型的实例来调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task *Task)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">task.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task *Task)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> task.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">task := &amp;Task&#123;name:<span class="string">"完成TODO"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实参 传递 给 形参 [形参就是 func(task Task)里面的 task,实参就是上面定义的 task,这是一个拷贝的过程，就是值传递]</span></span><br><span class="line">task.SetName(<span class="string">"知识整理"</span>) <span class="comment">// 方法调用</span></span><br><span class="line">fmt.Println(task.GetName())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法-go语法糖</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime *time.Time</span><br><span class="line">endTime *time.Time</span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定类型指定 =&gt; 接收者 , 这个函数只能由 Task 类型的实例来调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// name 函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task Task)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">task.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task *Task)</span> <span class="title">SetUser</span><span class="params">(user <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">task.user = user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTask</span><span class="params">(id <span class="keyword">int</span>,name <span class="keyword">string</span>,user <span class="keyword">string</span>)</span> *<span class="title">Task</span></span> &#123; </span><br><span class="line"><span class="keyword">return</span> &amp;Task&#123;</span><br><span class="line">id:id,</span><br><span class="line">name:name,</span><br><span class="line">user:user,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">task := Task&#123;name:<span class="string">"完成TODO"</span>&#125;</span><br><span class="line"></span><br><span class="line">task.SetName(<span class="string">"知识整理"</span>) <span class="comment">// 方法调用</span></span><br><span class="line"><span class="comment">//(&amp;task).SetUser("kk") == task.SetUser("kk")  </span></span><br><span class="line">task.SetUser(<span class="string">"yy"</span>)  <span class="comment">// 这是 go 的语法糖,在go编译的时候，它会识别出你定义的接收者，会自动转换成 (&amp;task).SetUser("kk")，这个在go语法糖里面叫做 取引用 ，跟定义的接收者有关系</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">task2 := &amp;Task&#123;name:<span class="string">"完成TODO"</span>&#125; <span class="comment">//task2 是一个指针类型的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(*task2).SetName("整理知识") //首先获取 task2的值，然后把值拷贝给 形参 task , 所以结果是改不了的</span></span><br><span class="line">task2.SetName(<span class="string">"整理知识"</span>) <span class="comment">// task2.SetName("整理知识") === (*task2).SetName("整理知识") 这也是go语法糖 ，解引用，通过地址拿到值，跟定义的接收者有关系</span></span><br><span class="line">task2.SetUser(<span class="string">"zz"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> task3 Task   <span class="comment">//值类型</span></span><br><span class="line"><span class="keyword">var</span> task4 *Task  <span class="comment">//指针类型</span></span><br><span class="line"></span><br><span class="line">task3.SetName(<span class="string">"AA"</span>)</span><br><span class="line">task4.SetName(<span class="string">"BB"</span>) <span class="comment">//会报错，因为 task4 指针类型是一个  nil 指针 , nil 是不能调用方法的，必须进行初始化才能调用</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task3)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, &amp;task4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法-结构体嵌入</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">tel <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span><span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">user.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(user *User)</span><span class="title">SetAddr</span><span class="params">(addr <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">user.addr = addr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span>&#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime *time.Time </span><br><span class="line">endTime *time.Time</span><br><span class="line">status <span class="keyword">int</span></span><br><span class="line">*User</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">(id <span class="keyword">int</span>,name,addr,tel <span class="keyword">string</span>)</span> *<span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;User&#123;id,name,addr,tel&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTask</span><span class="params">(id <span class="keyword">int</span>,name <span class="keyword">string</span>,startTime,endTime *time.Time,user *User)</span> *<span class="title">Task</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Task&#123;id,name,startTime,endTime,<span class="number">1</span>,user&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">start := time.Now()</span><br><span class="line">end := start.Add(<span class="number">24</span>*time.Hour)</span><br><span class="line">user := NewUser(<span class="number">1</span>,<span class="string">"kk"</span>,<span class="string">""</span>,<span class="string">""</span>)</span><br><span class="line">task := NewTask(<span class="number">1</span>, <span class="string">"完成知识整理"</span>,&amp;start,&amp;end,user)</span><br><span class="line"></span><br><span class="line">task.SetAddr(<span class="string">"北京"</span>) <span class="comment">// 匿名嵌入结构体可以直接调用函数，等同于：task.User.SetAddr("cc")</span></span><br><span class="line">task.SetName(<span class="string">"cc"</span>)  <span class="comment">// 匿名嵌入结构体可以直接调用函数，等同于：task.User.SetName("cc")</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task.User)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法值和表达式"><a href="#方法值和表达式" class="headerlink" title="方法值和表达式"></a>方法值和表达式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">id <span class="keyword">int</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">startTime *time.Time</span><br><span class="line">endTime *time.Time</span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task Task)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">task.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(task *Task)</span> <span class="title">SetUser</span><span class="params">(user <span class="keyword">string</span>)</span></span>&#123;   <span class="comment">// 这个可以自动生成</span></span><br><span class="line">task.user = user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTask</span><span class="params">(id <span class="keyword">int</span>,name <span class="keyword">string</span>,user <span class="keyword">string</span>)</span> *<span class="title">Task</span></span> &#123; </span><br><span class="line"><span class="keyword">return</span> &amp;Task&#123;</span><br><span class="line">id:id,</span><br><span class="line">name:name,</span><br><span class="line">user:user,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">task := Task&#123;&#125;     <span class="comment">//值</span></span><br><span class="line">task2 := &amp;Task&#123;&#125;   <span class="comment">//指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法表达式 ： 结构体.方法名</span></span><br><span class="line"><span class="comment">//对于值接收者，可以通过指针，也可以通过值来获取方法表达式</span></span><br><span class="line"><span class="comment">//go针对值接收者方法，会自动生成指针接收者方法</span></span><br><span class="line">method1 := Task.SetName  <span class="comment">// func(main.Task, string)</span></span><br><span class="line">method1(task,<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">//method1(task2,"test") //函数的参数上是不能发生解引用和取引用的，接收者是可以发生解引用和取引用的,所以这里会报错</span></span><br><span class="line">method2 := (*Task).SetName <span class="comment">//注意：这里没有解引用和取引用 func(*main.Task, string)</span></span><br><span class="line">method2(&amp;task,<span class="string">"test"</span>)</span><br><span class="line">method2(task2,<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于指针接收者，只能通过指针获取表达式</span></span><br><span class="line"><span class="comment">//method3 := Task.SetUser</span></span><br><span class="line">method4 := (*Task).SetUser <span class="comment">// func(*main.Task, string)</span></span><br><span class="line">method4(&amp;task,<span class="string">"test"</span>)</span><br><span class="line">method4(task2,<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, method1)</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, method2)</span><br><span class="line"><span class="comment">//fmt.Printf("%#v\n", method3)</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, method4)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, task)</span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, *task2)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//文件路径</span></span><br><span class="line"><span class="comment">//相对路径：程序执行路劲</span></span><br><span class="line"><span class="comment">//绝对路径：根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line"><span class="comment">//程序不会停止，重复读取文件</span></span><br><span class="line">file,err := os.Open(<span class="string">"password.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">n,err := file.Read(ctx)<span class="comment">// n 是放到切片里面元素的数量</span></span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(n,err,<span class="keyword">string</span>(ctx[:n]),<span class="built_in">len</span>(<span class="keyword">string</span>(ctx[:n])))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">file,err := os.Create(<span class="string">"name.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">file.Write([]<span class="keyword">byte</span>(<span class="string">"abc123456789\n"</span>))</span><br><span class="line">file.Write([]<span class="keyword">byte</span>(<span class="string">"abc12345678\n"</span>))</span><br><span class="line">file.Write([]<span class="keyword">byte</span>(<span class="string">"abc1234567\n"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="追加文件"><a href="#追加文件" class="headerlink" title="追加文件"></a>追加文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">file,err := os.OpenFile(<span class="string">"name.txt"</span>,os.O_CREATE|os.O_APPEND|os.O_RDWR,os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">file.Write([]<span class="keyword">byte</span>(<span class="string">"abc"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red>os.OpenFile 里面的几种模式要自己去尝试写下 os.O_CREATE os.O_APPEND os.O_RDWR</font></p><h3 id="计算文件MD5"><a href="#计算文件MD5" class="headerlink" title="计算文件MD5"></a>计算文件MD5</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"crypto/md5"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">flag.StringVar(&amp;name,<span class="string">"p"</span>,<span class="string">""</span>,<span class="string">"path"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">""</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file,err := os.Open(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">hasher := md5.New()</span><br><span class="line">ctx := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">n,err := file.Read(ctx)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">hasher.Write(ctx[:n])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%x"</span>,hasher.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="seek-文件位置"><a href="#seek-文件位置" class="headerlink" title="seek 文件位置"></a>seek 文件位置</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">file,err := os.OpenFile(<span class="string">"password.txt"</span>,os.O_RDWR|os.O_CREATE,os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">file.Seek(<span class="number">3</span>,os.SEEK_SET)</span><br><span class="line">ctx := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">3</span>)</span><br><span class="line">n,err := file.Read(ctx)</span><br><span class="line">fmt.Println(n,err,<span class="keyword">string</span>(ctx))</span><br><span class="line"></span><br><span class="line">file.Seek(<span class="number">1</span>,os.SEEK_SET)</span><br><span class="line">n,err = file.Read(ctx)</span><br><span class="line">fmt.Println(n,err,<span class="keyword">string</span>(ctx))</span><br><span class="line">fmt.Println(file.Seek(<span class="number">0</span>,os.SEEK_CUR))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Day06-go语言的文件与IO操作"><a href="#Day06-go语言的文件与IO操作" class="headerlink" title="Day06 - go语言的文件与IO操作"></a>Day06 - go语言的文件与IO操作</h1><h1 id="Day07-go语言的接口与反射"><a href="#Day07-go语言的接口与反射" class="headerlink" title="Day07 - go语言的接口与反射"></a>Day07 - go语言的接口与反射</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>接口是自定义类型，是对行为的抽象，方法的组合。它并不包含数据，接口使用 interface 标识，声明了一系列的函数签名(函数名,函数参数，函数的返回值)，可以简单的理解为接口就是方法的集合。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InterfaceName <span class="keyword">interface</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name InterfaceName</span><br></pre></td></tr></table></figure><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>1.接口是引用类型<br>2.零值是 nil</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>赋值的原则是赋值(=右边)的对象必须要全部实现被赋值对象(=左边)的所有方法</p><h4 id="结构体赋值"><a href="#结构体赋值" class="headerlink" title="结构体赋值"></a>结构体赋值</h4><p>1.接口中定义的方法：接收者全是指针，只能赋值指针类型的对象<br>2.接口中定义的方法：接收者全是值，指针类型对象或者值类型对象都可以<br>3.接口中定义的方法：接收者既有指针也有值，只能赋值指针类型对象</p><h4 id="接口赋值"><a href="#接口赋值" class="headerlink" title="接口赋值"></a>接口赋值</h4><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口 Sender</span></span><br><span class="line"><span class="keyword">type</span> Sender <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">//定义接口的方法(包含 方法名 参数列表，返回值列表)</span></span><br><span class="line">Send(<span class="keyword">string</span>,<span class="keyword">string</span>) error <span class="comment">//参数可以省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后定义包含接口方法的结构体</span></span><br><span class="line"><span class="keyword">type</span> EmailSender <span class="keyword">struct</span> &#123;</span><br><span class="line">addr <span class="keyword">string</span></span><br><span class="line">port <span class="keyword">int</span></span><br><span class="line">user <span class="keyword">string</span></span><br><span class="line">password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义这个结构体的方法,这个方法必须是接口中</span></span><br><span class="line"><span class="comment">//定义成值接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s EmailSender)</span><span class="title">Send</span><span class="params">(to,msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;  <span class="comment">//与接口send方法是完全一样的</span></span><br><span class="line">fmt.Printf(<span class="string">"发送邮件给:%s,内容是:%s"</span>,to,msg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">var</span> sender Sender</span><br><span class="line"><span class="comment">//赋值 需要将一个实例对象赋值给接口，这个对象一般是结构体,这个对象一定要有 接口中的方法</span></span><br><span class="line"></span><br><span class="line">emailSender := EmailSender&#123;&#125;</span><br><span class="line">sender = emailSender <span class="comment">// 把这个结构体实例对象赋值给接口对象</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,sender.Send)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点：</p><p>方法 如果是 值接收者 ==&gt; 那么首先要定义一个 值对象 ==&gt; 然后 值对象可以赋值给对应的接口</p><p>方法 值接收者 =&gt; 值对象  =&gt; 接口<br>方法 值接收者 =&gt; 指针对象 =&gt; 能不能赋值给接口呢 ？ 可以赋值<br>方法 指针接收者 =&gt; 值对象 =&gt; 可以赋值吗 ? 不能赋值<br>方法 指针接收者 =&gt; 指针对象 =&gt; 可以赋值吗？可以赋值</p><p>在go里面,当你定义了一个值接收者的方法，会自动生产一个指针接收者的方法。</p><p>还有另外一个问题：结构体对象 =&gt; 值对象 =&gt; 可以调用 指针接收者的方法吗 ？=&gt; 可以 。原因是这是go的语法糖</p><p>接口嵌入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义只有 Send 方法的接口</span></span><br><span class="line"><span class="keyword">type</span> SingleSender <span class="keyword">interface</span> &#123;</span><br><span class="line">Send(<span class="keyword">string</span>,<span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过匿名嵌入对SingleSender进行扩展（复用）</span></span><br><span class="line"><span class="keyword">type</span> Sender <span class="keyword">interface</span> &#123;</span><br><span class="line">SingleSender</span><br><span class="line">SendAll([]<span class="keyword">string</span>,<span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EmailSender <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s EmailSender)</span> <span class="title">Send</span><span class="params">(to,msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s EmailSender)</span> <span class="title">SendAll</span><span class="params">(to []<span class="keyword">string</span>,msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sender Sender = EmailSender&#123;&#125;</span><br><span class="line">fmt.Println(sender)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> EmailSender <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(s EmailSender)</span> <span class="title">Send</span><span class="params">(to,msg <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> sender <span class="keyword">interface</span>&#123;</span><br><span class="line">Send(to,msg <span class="keyword">string</span>) error</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sender)</span><br><span class="line">sender = EmailSender&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, sender)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h1 id="Day08-go语言的并发编程"><a href="#Day08-go语言的并发编程" class="headerlink" title="Day08 - go语言的并发编程"></a>Day08 - go语言的并发编程</h1><h1 id="Day09-go语言网络编程"><a href="#Day09-go语言网络编程" class="headerlink" title="Day09 - go语言网络编程"></a>Day09 - go语言网络编程</h1><h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><img src="http://img.zjl.pub/static/images/osi.png"><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>网络编程也可以叫 socket编程 ，通俗来说就是利用网络资源，将数据从一个端与另外一个端进行数据交互。</p><p>为什么叫 socket 编程？开发者只关注应用层，应用层以下的协议不用关心，由操作系统给应用池提供的一套API接口，这个接口就是 socket ，可以直接理解为函数，供开发者调用实现网络传输。</p><p>客户端给服务端发送消息：举个例子 A(客户端) 打电话给 B(服务端)</p><img src="http://img.zjl.pub/static/images/网络编程.png"><p>IP地址：源IP+源端口 –&gt; 目的IP+目的端口<br>端口：为什么QQ发送的信息，只有QQ能接收到呢？微信接收不到呢？这就是通过端口去识别区别。</p><h2 id="net包"><a href="#net包" class="headerlink" title="net包"></a>net包</h2><p>net包提供了对socket编程的支持，socket编程分服务端和客户端编程，针对服务端可使用函数Listen创建监听服务,对于客户端可使用函数Dial连接服务器</p><img src="http://img.zjl.pub/static/images/网络编程2.png"><ul><li>常用函数<ul><li>Listen: 用于创建监听服务器</li><li>ListenPacket: 用于创建服务器端连接</li><li>Dial: 用于创建与服务器连接</li><li>JoinHostPort: 连接地址和端口</li><li>SplitHostort: 分割地址和端口</li><li>LookupAddr: 查找地址对应主机名</li><li>LookupHost: 根据主机名查看地址</li><li>ParseCIDR: 解析CIDR格式IP</li></ul></li></ul><ul><li><p>常用结构体</p><ul><li>IP<ul><li>常用函数<ul><li>ParseIP： 解析地址</li><li>LookupIP: 根据主机名查找IP</li></ul></li></ul></li><li>IPNet<ul><li>常用方法<ul><li>Contains: 判断是否包含某IP</li><li>Network: 获取网络地址类型</li></ul></li></ul></li><li>Addr<ul><li>常用函数<ul><li>InterfaceAddrs: 获取说有网络地址信息<ul><li>常用方法:<ul><li>Network: 获取网络类型</li><li>String: 获取网络地址</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>代码实例 net , ip , ipnet</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(net.JoinHostPort(<span class="string">"127.0.0.1"</span>,<span class="string">"8080"</span>))</span><br><span class="line">fmt.Println(net.JoinHostPort(<span class="string">"::1"</span>,<span class="string">"8080"</span>))</span><br><span class="line">fmt.Println(net.SplitHostPort(<span class="string">"127.0.0.1:9090"</span>))</span><br><span class="line">fmt.Println(net.SplitHostPort(<span class="string">"[::1]:8080"</span>))</span><br><span class="line"></span><br><span class="line">fmt.Println(net.LookupAddr(<span class="string">"127.0.0.1"</span>)) <span class="comment">//通过IP去找主机名，返回的是 切片</span></span><br><span class="line">fmt.Println(net.LookupHost(<span class="string">"localhost"</span>)) <span class="comment">//通过主机名去找IP，返回的是 切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IP结构体</span></span><br><span class="line">ip := net.ParseIP(<span class="string">"127.0.0.1"</span>) <span class="comment">//判断是不是IP地址</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>,ip)</span><br><span class="line"></span><br><span class="line">fmt.Println(net.LookupIP(<span class="string">"localhost"</span>)) <span class="comment">//通过主机名解析IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IPNet CIDR格式 掩码</span></span><br><span class="line">ip,ipnet,err := net.ParseCIDR(<span class="string">"192.168.1.1/24"</span>)</span><br><span class="line">fmt.Println(ip,ipnet,err)</span><br><span class="line">fmt.Println(ipnet.Contains(ip))</span><br><span class="line">fmt.Println(ipnet.Contains(net.ParseIP(<span class="string">"192.168.2.1"</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码实例 addr  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//获取网络地址</span></span><br><span class="line">addrs,err := net.InterfaceAddrs()</span><br><span class="line">fmt.Println(addrs,err)</span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,addrs)</span><br><span class="line"><span class="keyword">for</span> _,addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">fmt.Println(addr.Network())</span><br><span class="line">fmt.Println(addr.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码实例 interfaces</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">intfs,_ := net.Interfaces()</span><br><span class="line"><span class="keyword">for</span> _,intf := <span class="keyword">range</span> intfs &#123;</span><br><span class="line">fmt.Println(intf.Index)</span><br><span class="line">fmt.Println(<span class="string">"\t"</span>,intf.Name,intf.HardwareAddr,intf.MTU)</span><br><span class="line">addrs,_ := intf.Addrs()</span><br><span class="line"><span class="keyword">for</span> _,addr := <span class="keyword">range</span> addrs &#123;</span><br><span class="line">fmt.Println(<span class="string">"\t"</span>,addr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码实例 服务器端</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.监听服务 Listen/ListenPacket</span></span><br><span class="line"><span class="comment">//2.接收客户端连接</span></span><br><span class="line"><span class="comment">//3.处理客户端连接（数据交换）</span></span><br><span class="line"><span class="comment">//4.关闭客户端</span></span><br><span class="line"><span class="comment">//5.关闭服务 defer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听服务</span></span><br><span class="line">addr := <span class="string">"127.0.0.1:9999"</span></span><br><span class="line">listener,err := net.Listen(<span class="string">"tcp"</span>,addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listener.Close()</span><br><span class="line">log.Printf(<span class="string">"listen on : [%s]"</span>,addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收客户端连接</span></span><br><span class="line">conn,err :=listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">log.Printf(<span class="string">"clinet[%s] is connected..."</span>,conn.RemoteAddr())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码实例 客户端</p></li><li><p>代码实例 http服务基本框架</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1. 定义处理器/处理器函数</span></span><br><span class="line"><span class="comment">//2. 绑定URL 处理器/处理器函数关系</span></span><br><span class="line"><span class="comment">//3. 启动web服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 1.处理器函数 两个参数 没有返回值</span></span><br><span class="line"><span class="comment"> http.ResponseWriter,*http.Request</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">timeFunc := <span class="function"><span class="keyword">func</span><span class="params">(response http.ResponseWriter,request *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(request)</span><br><span class="line">now := time.Now().Format(<span class="string">"2006-05-01 15:05:05"</span>)</span><br><span class="line">fmt.Fprint(response,now)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 2.绑定URL</span></span><br><span class="line"><span class="comment"> http.HandleFunc(path,处理器函数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">http.HandleFunc(<span class="string">"/time/"</span>,timeFunc)</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>,<span class="function"><span class="keyword">func</span><span class="params">(response http.ResponseWriter,request *http.Request)</span></span> &#123;</span><br><span class="line">ctx,err := ioutil.ReadFile(<span class="string">"index.html"</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span>&#123;</span><br><span class="line">response.Write(ctx)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Fprint(response,<span class="string">".......欢迎........."</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.启动web服务 </span></span><br><span class="line"><span class="comment">http.ListenAndServer(addr，nil)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">http.ListenAndServe(<span class="string">":9999"</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Day10-go语言web开发"><a href="#Day10-go语言web开发" class="headerlink" title="Day10 - go语言web开发"></a>Day10 - go语言web开发</h1><h1 id="Day11-Go语言操作Mysql数据库"><a href="#Day11-Go语言操作Mysql数据库" class="headerlink" title="Day11 - Go语言操作Mysql数据库"></a>Day11 - Go语言操作Mysql数据库</h1><p>创建新用户<br>create user golang identified by ‘golang@2020’;<br>grant all privileges on <em>.</em> to ‘golang’@’%’;<br>grant all privileges on database.table to name@addr identified by password (add 可以设置成 % ， 或者  database.table <em>.</em> database.* )</p><p>库<br>database<br>create database name default charset utf8mb4;<br>create database todolist default charset utf8mb4;<br>show databases;<br>drop database name;<br>show create database todolist;</p><p>表<br>use database;<br>use todolist;<br>create table name (<br>    colname coltype 修饰，<br>    …<br>    …<br>    index indexname(colname,colname1,colname2)<br>) engine=inndb default charset=utf8mb4;</p><p>colname : 列名 小写英文字母，数字或者_组成<br>coltype: 数值类型<br>           int<br>           bigint<br>           float<br>           double<br>         字符串类型<br>           varchar(n) 最多存储 n 个字符 （长度可变）<br>           char(n) 长度不可变<br>         时间类型<br>           data<br>           datatime<br>         文本类型<br>           text<br>           longtest<br>         二进制类型<br>           blob<br>         json<br>         array<br>修饰：<br>  主键： primary key<br>  唯一： unique<br>  自动增长：auto_increment<br>  默认值: default 0, default ‘’<br>  是否允许为null , 不允许为 NULL , NOT NULL<br>  注释: COMMENT ‘’<br>索引：<br>  index</p><p>eg：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> task(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'任务名称'</span>,</span><br><span class="line"><span class="keyword">status</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'状态，0：新建,1: 正在执行，2：停止, 3: 完成'</span>,</span><br><span class="line">start_time datetime <span class="keyword">comment</span> <span class="string">'开始时间'</span>, </span><br><span class="line">complete_time datetime <span class="keyword">comment</span> <span class="string">'完成时间'</span>,</span><br><span class="line">deadline_time datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'截至时间'</span>,</span><br><span class="line"><span class="keyword">content</span> <span class="built_in">text</span> <span class="keyword">comment</span> <span class="string">'任务详情'</span>,</span><br><span class="line"><span class="keyword">index</span> idx_name(<span class="keyword">name</span>),</span><br><span class="line"><span class="keyword">index</span> idx_deadline_time(deadline_time)</span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8mb4 auto_increment <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>查看：<br>show tables;<br>desc task;<br>show create table name;</p><p>删除表：<br>drop table name;</p><p>修改表：<br>  alter table name 动作;<br>只允许添加列<br>  alter table name add column colname coltype 修饰;<br>  alter table name modify column colname coltype 修饰;</p><p>alter table task add column content text not null comment ‘任务内容’;</p><p>索引：<br>create index name on table (column,column2,…);<br>drop index name on table;</p><p>create unique index name on table (column,column2,…); //唯一索引<br>drop unique index name on table; //唯一索引</p><p>表数据操作：</p><p>增<br>  insert into table values(v1,v2,v3,v4);<br>  insert into table(c1,c2,c3,c4) values(v1,v2,v3,v4);</p><p>  eg:<br>  insert into task(name,content,deadline_time) values(‘写作业’,’完成todolist web版本’,’2020-01-01 00:00:00’);<br>  insert into task(name,content,deadline_time) values(‘写作业’,’完成todolist web版本’,’2020-01-01 00:00:00’),(‘锻炼身体’,’跑10公里’,’2020-01-01 21:00:00’); //插入多行</p><p>  注意：表名 和 列明 最好加上 ``<br>  insert into <code>task</code>(<code>name</code>,<code>content</code>,<code>deadline_time</code>) values(‘写作业’,’完成todolist web版本’,’2020-01-01 00:00:00’);<br>  insert into <code>task</code>(<code>name</code>,<code>content</code>,<code>deadline_time</code>) values(‘写作业’,’完成todolist web版本’,’2020-01-01 00:00:00’),(‘锻炼身体’,’跑10公里’,’2020-01-01 21:00:00’); //插入多行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`task`</span>(<span class="string">`name`</span>,<span class="string">`content`</span>,<span class="string">`deadline_time`</span>) <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-06'</span>),(<span class="string">'2'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-04'</span>),(<span class="string">'3'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-05'</span>),(<span class="string">'4'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-07'</span>),(<span class="string">'4'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-01'</span>),(<span class="string">'6'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-02'</span>),(<span class="string">'6'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-09'</span>),(<span class="string">'7'</span>,<span class="string">'1'</span>,<span class="string">'2020-06-10'</span>);</span><br></pre></td></tr></table></figure><p>删<br>  delete from table;<br>  delete from table where条件;<br>  truncate table name; 重建<br>改<br>  update table<br>  set colname=v1,col2=v2,col3=v3<br>查<br>  select * from table;<br>  select c1,c2 from table;<br>  select * from table where colname condition value;<br>    condition: = , != , &gt; , &lt;,&gt;=<br>    like : 模糊匹配<br>      %:匹配任意多个<br>        以什么开头：like value%<br>        以什么结尾：like %value<br>        包含：     like %value%<br>        like ‘%/%%’ escape ‘/‘ 声明转义</p><pre><code>  -： 匹配一个in(v1,v2) colname = v1 或者 colname = v2betweed and逻辑关系   与 and  或  or  非 not</code></pre><p>   数量：count(<em>)<br>        count(id)<br>        select count(</em>) from task where条件;<br>        select count(*) as cnt from task where条件; 用名字访问里面的元素，as就是起别名</p><p>查询<br>排序<br>   order by colname[asc|desc],colnam2[asc|desc]  //升序，降序<br>   eg<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> task <span class="keyword">order</span> <span class="keyword">by</span> deadline_time;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> task <span class="keyword">order</span> <span class="keyword">by</span> deadline_time <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> task <span class="keyword">order</span> <span class="keyword">by</span> deadline_time <span class="keyword">desc</span>,<span class="keyword">name</span>; //按多个排列，第一个排序完以后，按照第二个排序</span><br></pre></td></tr></table></figure><br>分页 数据量很大，只需要前5条或者后5条<br>    展示多少条数据 每页的数据量<br>    展示第几页<br>    limit 限制查询数量<br>    offset 设置偏移</p><pre><code>每页展示5条 limit 5第一页 offset 0第二页 offset 5 (pageNum-1) * pageSize</code></pre><p>分组 group by<br>    select [] from table group by colname,colname2 [having 过滤条件;]<br>    select 元素必须是指定分组的列名或者聚合类的结果<br>    count(* )<br>    求和 sum<br>    最小值 min<br>    最大值 max<br>    平均值 avg<br>   eg：<br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">status</span>,<span class="keyword">count</span>(*) <span class="keyword">from</span> task <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">select</span> ip,<span class="keyword">url</span>,<span class="keyword">status</span>,<span class="keyword">count</span>(*) <span class="keyword">from</span> accesslog <span class="keyword">group</span> <span class="keyword">by</span> ip,<span class="keyword">url</span>,<span class="keyword">status</span> <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;=<span class="number">2</span>; //having后面加条件，只对聚合条件进行过滤，与where类似</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> accesslog (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">logtime datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'访问时间'</span>,</span><br><span class="line">ip <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'访问来源'</span>,</span><br><span class="line"><span class="keyword">url</span> <span class="built_in">varchar</span>(<span class="number">4096</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'访问地址'</span>,</span><br><span class="line"><span class="keyword">status</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'状态码'</span></span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> accesslog(logtime,ip,<span class="keyword">url</span>,<span class="keyword">status</span>) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'2020-06-05 01:01:01'</span>,<span class="string">'1.1.1.1'</span>,<span class="string">'/index'</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:02'</span>,<span class="string">'1.1.1.1'</span>,<span class="string">'/home'</span>,<span class="number">302</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:02'</span>,<span class="string">'1.1.1.1'</span>,<span class="string">'/back.zip'</span>,<span class="number">404</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:04'</span>,<span class="string">'1.1.1.1'</span>,<span class="string">'/ip.exe'</span>,<span class="number">404</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:04'</span>,<span class="string">'1.1.1.2'</span>,<span class="string">'/ip.exe'</span>,<span class="number">404</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:04'</span>,<span class="string">'1.1.1.2'</span>,<span class="string">'/ip.exe'</span>,<span class="number">404</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:04'</span>,<span class="string">'1.1.1.2'</span>,<span class="string">'/ip.exe'</span>,<span class="number">404</span>),</span><br><span class="line">(<span class="string">'2020-06-05 01:01:04'</span>,<span class="string">'1.1.1.3'</span>,<span class="string">'/home'</span>,<span class="number">200</span>),</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">day</span> <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'日期'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span> <span class="keyword">comment</span> <span class="string">'姓名'</span>,</span><br><span class="line">score <span class="built_in">float</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'分数'</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(<span class="keyword">day</span>,<span class="keyword">name</span>,score)<span class="keyword">values</span></span><br><span class="line">(<span class="string">'2020-06-01'</span>,<span class="string">'烽火'</span>,<span class="number">8</span>),</span><br><span class="line">(<span class="string">'2020-06-01'</span>,<span class="string">'魏超'</span>,<span class="number">6</span>),</span><br><span class="line">(<span class="string">'2020-06-01'</span>,<span class="string">'阿宁'</span>,<span class="number">7</span>),</span><br><span class="line">(<span class="string">'2020-06-02'</span>,<span class="string">'烽火'</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="string">'2020-06-02'</span>,<span class="string">'魏超'</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="string">'2020-06-02'</span>,<span class="string">'阿宁'</span>,<span class="number">7</span>),</span><br><span class="line">(<span class="string">'2020-06-03'</span>,<span class="string">'烽火'</span>,<span class="number">7</span>),</span><br><span class="line">(<span class="string">'2020-06-03'</span>,<span class="string">'魏超'</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="string">'2020-06-03'</span>,<span class="string">'阿宁'</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><pre><code>统计每个人的总分，最高分，最低分，平均分</code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">sum</span>(score),<span class="keyword">max</span>(score),<span class="keyword">min</span>(score),<span class="keyword">avg</span>(score) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure><p>内置函数<br>select now() 获取当前时间<br>select md5(‘1’) 获取1的MD5值<br>select date_format(now(),’%Y-%m-%d %H:%i:%s’)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(logtime,<span class="string">'%Y-%m-%d'</span>)<span class="keyword">as</span> log_day,<span class="keyword">count</span>(*) <span class="keyword">as</span> cnt <span class="keyword">from</span> accesslog <span class="keyword">group</span> <span class="keyword">by</span> log_day;</span><br></pre></td></tr></table></figure><p>联查：<br>  多张表进行查询数据<br>  join<br>  left join on 以左边的表为基准<br>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user.name,task.name <span class="keyword">from</span> task <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> <span class="keyword">on</span> task.user=user.id <span class="keyword">where</span> task.status != <span class="number">3</span>;</span><br></pre></td></tr></table></figure><br>  inner join on 两张表都有数据<br>  right join on 以右边的表为基准</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line"><span class="keyword">status</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">comment</span> <span class="string">'0:在职，1:离职'</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span> utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> task <span class="keyword">add</span> <span class="keyword">column</span> <span class="keyword">user</span> <span class="built_in">bigint</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,<span class="keyword">status</span>)<span class="keyword">values</span></span><br><span class="line">(<span class="string">'詹琳'</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">'阿宁'</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="string">'cc'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> task(<span class="keyword">name</span>,<span class="keyword">content</span>,deadline_time,<span class="keyword">user</span>)<span class="keyword">values</span></span><br><span class="line">(<span class="string">'完成web todolist'</span>,<span class="string">''</span>,<span class="keyword">now</span>(),<span class="number">1</span>),</span><br><span class="line">(<span class="string">'跑10圈'</span>,<span class="string">''</span>,<span class="keyword">now</span>(),<span class="number">1</span>),</span><br><span class="line">(<span class="string">'洗衣服'</span>,<span class="string">''</span>,<span class="keyword">now</span>(),<span class="number">1</span>),</span><br><span class="line">(<span class="string">'完成web todolist'</span>,<span class="string">''</span>,<span class="keyword">now</span>(),<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>golang 操作数据库 – 一般都是表数据操作</p><p>增，删，改 =》执行<br>查 =&gt; 读</p><h1 id="Day12-Go语言编程框架MVC及Beego"><a href="#Day12-Go语言编程框架MVC及Beego" class="headerlink" title="Day12 - Go语言编程框架MVC及Beego"></a>Day12 - Go语言编程框架MVC及Beego</h1><p>请求过程：url请求进来的时候–解析它的http请求–解析到url以后，找url对应的处理函数–把提交的参数封装成一个request对象（结构体）–调用处理器函数–完成以后把结果响应给客户端<br>        1.创建连接 2.解析请求 3.调用处理器 4.获取结果给客户端响应</p><pre><code>处理请求的函数叫 控制器MVC:  M =&gt; Model 模型  V =&gt; View 视图  C =&gt; Controller 控制器客户端请求 =&gt; http协议 =&gt; 实际就是我要请求哪个 url , 请求 method 是什么，请求参数 params 是什么服务器处理客户端过程： url =&gt; 对应一个处理器 handler =&gt; 处理器要去解析其中的参数 params =&gt; 然后开始对数据库的操作 DB =&gt; DB操作完以后开始响应数据 通过 template =&gt; 渲染成页面 html =&gt; 响应客户端    a. 定义处理器    b. 定义绑定url和处理器的关系    c. 处理器调用数据库客户端响应处理 ： 拿到 html以后 开始渲染页面</code></pre><h1 id="Day16-GO语言实战项目二：监控报警系统-Prometheus-原理剖析与二次开发1"><a href="#Day16-GO语言实战项目二：监控报警系统-Prometheus-原理剖析与二次开发1" class="headerlink" title="Day16 - GO语言实战项目二：监控报警系统 Prometheus 原理剖析与二次开发1"></a>Day16 - GO语言实战项目二：监控报警系统 Prometheus 原理剖析与二次开发1</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Day01-Go语言基础语法入门&quot;&gt;&lt;a href=&quot;#Day01-Go语言基础语法入门&quot; class=&quot;headerlink&quot; title=&quot;Day01 - Go语言基础语法入门&quot;&gt;&lt;/a&gt;Day01 - Go语言基础语法入门&lt;/h1&gt;&lt;h1 id=&quot;Day02
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ansible</title>
    <link href="http://yoursite.com/2020/03/27/ansible/"/>
    <id>http://yoursite.com/2020/03/27/ansible/</id>
    <published>2020-03-27T06:14:37.000Z</published>
    <updated>2020-03-27T06:14:37.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go基础2</title>
    <link href="http://yoursite.com/2020/03/26/go%E5%9F%BA%E7%A1%802/"/>
    <id>http://yoursite.com/2020/03/26/go%E5%9F%BA%E7%A1%802/</id>
    <published>2020-03-26T01:20:19.000Z</published>
    <updated>2020-03-27T00:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>用户输入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">"请输入你的名字："</span>)</span><br><span class="line"></span><br><span class="line">fmt.Scan(&amp;name)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"名字:"</span>,name)</span><br><span class="line"></span><br><span class="line">fmt.Print(<span class="string">"请输入你的年龄："</span>)</span><br><span class="line">fmt.Scan(&amp;age)</span><br><span class="line">fmt.Println(<span class="string">"年龄："</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if 表达式：</p><p>案例：</p><p>老婆给当程序员的老公打电话：下班顺路买10个包子，如果看到卖西瓜的，买一个。</p><p>老婆：买10个包子，如果有卖西瓜的，买一个西瓜<br>老公：如果有卖西瓜的，买一个包子，否则买10个包子。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"是否看到卖西瓜的:yes/no"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status <span class="keyword">string</span> </span><br><span class="line">fmt.Scan(&amp;status)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"老婆的想法:"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"买10个包子"</span>)</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">"yes"</span> || status == <span class="string">"Y"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"买一个西瓜"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"老公的想法:"</span>)</span><br><span class="line"><span class="keyword">if</span> status == <span class="string">"yes"</span> || status == <span class="string">"Y"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"买一个包子"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"买10个包子"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch 语句:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> yes <span class="keyword">string</span></span><br><span class="line">fmt.Print(<span class="string">"有没有西瓜卖？(Y/N)"</span>)</span><br><span class="line">fmt.Scan(&amp;yes)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"老婆的想法:"</span>)</span><br><span class="line">fmt.Println(<span class="string">"买10个包子"</span>)</span><br><span class="line"><span class="keyword">switch</span> yes&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Y"</span>,<span class="string">"Yes"</span>:</span><br><span class="line">fmt.Println(<span class="string">"买一个西瓜"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"y"</span>,<span class="string">"yes"</span>:</span><br><span class="line">fmt.Println(<span class="string">"买一个西瓜"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"老公的想法:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> yes &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Y"</span>,<span class="string">"Yes"</span>,<span class="string">"y"</span>,<span class="string">"yes"</span>:</span><br><span class="line">fmt.Println(<span class="string">"买1个包子"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"买10个包子"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> score <span class="keyword">int</span></span><br><span class="line">fmt.Print(<span class="string">"请输入你的分数:"</span>)</span><br><span class="line">fmt.Scan(&amp;score)</span><br><span class="line"><span class="keyword">switch</span>&#123;</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">fmt.Println(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">case</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">fmt.Println(<span class="string">"B"</span>)</span><br><span class="line"><span class="keyword">case</span> score &gt;=<span class="number">60</span>:</span><br><span class="line">fmt.Println(<span class="string">"C"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"E"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 循环：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户输入：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="http://yoursite.com/2020/03/21/go%E5%9F%BA%E7%A1%801/"/>
    <id>http://yoursite.com/2020/03/21/go%E5%9F%BA%E7%A1%801/</id>
    <published>2020-03-21T07:44:54.000Z</published>
    <updated>2020-03-26T01:22:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>程序的结构：</p><p>第一步：申明一个包名</p><p>go语言要求每个源文件文件开头第一行必须有一个package申明它所属的包。</p><p>第二步：import 一个包</p><p>第三步：定义一个 func 函数</p><p>代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World !"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些操作说明：</p><p>go build -o abc main.go<br>go build -x main.go<br>go run</p><p>go加注释：单行注释，多行注释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这里是main函数</span></span><br><span class="line"><span class="comment">  是程序启动的入口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 这里是输出 hello world 到控制台</span></span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的基本组成单位：</p><p>基本组成元素：<br>5个概念：<br>1.标识符<br>编程的时候使用的名字，可以是变量的名字，常量的名字，函数的名字，类型的名字，接口名字，包名字，并且通过这些名字去访问</p><ul><li><p>只能由非空字母（Unicode），数字，下划线组成，注意：中文也是Unicode，可以用中文命名的，但是不建议。</p></li><li><p>只能以字母，下划线开头</p></li><li><p>不能GO语言关键字<br>25个关键字：<br>声明 package,import<br>实体声明和定义：chan,const,func,interface,map,struct,type,var<br>流程控制：break,case,continue,default,defer,else,fallthrough,for,go,goto,if,range,return,select,switch</p></li><li><p>避免GO预定义的标识符<br>内置常量：true,false,nil,iota<br>内置类型：bool,byte,rune,int,int8,int16,int32,int64,uint,uint8,uint16,uint32,uint64,uintptr,float32,float64,complex64,complex128,string,error,<br>内置函数：make,len,cap,new,append,copy,close,delete,complex,real,imag,panic,recover</p></li><li><p>空白标识符 _</p></li><li><p>建议使用驼峰式（myName）</p></li><li><p>标识符区分大小写</p></li></ul><p>2.关键字</p><p>3.字面量<br>字面量是值的表示方法，一般对变量和常量进行初始化</p><p>4.操作符<br>算术运算符 +,-,*,/,%,++,–<br>关系运算符 &gt;,&gt;=,&lt;,&lt;=,==,!=<br>逻辑运算符 &amp;&amp;,||,!<br>位运算符 &amp;,|,^,&lt;&lt;,&gt;&gt;,&amp;^<br>赋值运算符 =,+=,-=,*=,/=,%=,&amp;=,|=,^=,&lt;&lt;=,&gt;&gt;=<br>其他运算符 &amp;(单目),*(单目),.(点),-(单目),…,&lt;-</p><p>5.分隔符<br>小括号(),中括号[],大括号(),分号;逗号,</p><p>基础知识点：</p><p>声明:声明语句用于定义程序的各种实体对象</p><ul><li>声明变量 var</li><li>声明常量 const</li><li>声明函数 func</li><li>声明类型 type</li></ul><p>变量:是指对一块存储空间定义名称,通过名称对存储空间的内容进行访问或修改</p><ul><li><p>var 变量名 变量类型 = 值<br>定义变量,并进行初始化 例子:var name string = “silence”</p></li><li><p>var 变量名 变量类型<br>定义变量,使用零值进行初始化,例如: var age int</p></li><li><p>var 变量名 = 值<br>定义变量,变量类型通过值类型进行推导,例如: var isBoy = true</p></li><li><p>var 变量名1,变量名2…..变量名n 变量类型<br>定义多个相同类型的变量,并使用零值就行初始化, 例如 var prefix,suffix</p></li><li><p>var 变量名1,变量名2…..变量名n 变量类型 = 值1,值2….值n<br>定义多个相同类型的变量,并使用对应的值进行初始化</p></li><li><p>var 变量名1,变量名2…..变量名n = 值1,值2….值n<br>定义多个变量,并使用对应的值进行初始化,变量的类型使用值类型进行推导,类型可以不相同。<br>例如：var name,age = “slience”,18</p></li></ul><p>代码实例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//在函数内变量定义了要使用，在函数外可以定义不使用</span></span><br><span class="line"><span class="keyword">var</span> version <span class="keyword">string</span> = <span class="string">"1.0"</span> <span class="comment">//包级别的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> me <span class="keyword">string</span></span><br><span class="line"><span class="comment">//不是没有赋值，而是赋了一个零值</span></span><br><span class="line">fmt.Println(me)</span><br><span class="line"><span class="comment">//字符串要用双引号</span></span><br><span class="line">    me = <span class="string">"kk"</span></span><br><span class="line">fmt.Println(me)</span><br><span class="line">fmt.Println(version)</span><br><span class="line">    <span class="comment">//定义多个相同类型的变量</span></span><br><span class="line"><span class="keyword">var</span> name,user <span class="keyword">string</span></span><br><span class="line">fmt.Println(name,user)</span><br><span class="line">    <span class="comment">//定义多个不同类型的变量</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">age <span class="keyword">int</span> = <span class="number">30</span></span><br><span class="line">height <span class="keyword">float64</span> = <span class="number">1.68</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(age,height)</span><br><span class="line"><span class="comment">//定义不指定类型的变量一定要赋值，会自动根据赋值的数值进行判断，</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">s = <span class="string">"kk"</span></span><br><span class="line">a = <span class="number">30</span></span><br><span class="line">ss = <span class="string">"bb"</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(s,a,ss)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简短声明,省略var,省略类型,这种声明必须在函数内部使用</span></span><br><span class="line">isBoy := <span class="literal">true</span></span><br><span class="line">fmt.Println(isBoy)</span><br><span class="line">    <span class="comment">//两个变量交换</span></span><br><span class="line">s,ss = ss,s</span><br><span class="line">fmt.Println(s,ss)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量：不能更改的，命名建议全大写</p><p>例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//常量是不能修改它的值的</span></span><br><span class="line"><span class="keyword">const</span> name <span class="keyword">string</span> = <span class="string">"kk"</span></span><br><span class="line">fmt.Println(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略类型</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span></span><br><span class="line"><span class="comment">//定义多个常量，类型相同</span></span><br><span class="line"><span class="keyword">const</span> C1,C2 <span class="keyword">int</span> = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="comment">//定义多个常量，省略类型,类型不相同</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">C3 = <span class="string">"silence"</span></span><br><span class="line">C4 = <span class="number">19</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//只声明常量,不赋值是不可以的</span></span><br><span class="line"><span class="comment">//const C5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是常量，后面的赋值和前面一样，就可以省略类型和值</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">C6 = <span class="number">1</span></span><br><span class="line">C7</span><br><span class="line">C8</span><br><span class="line">C9 = <span class="number">3.1415926</span></span><br><span class="line">C10</span><br><span class="line">C11 = <span class="string">"hello world"</span></span><br><span class="line">C12</span><br><span class="line">)</span><br><span class="line">fmt.Println(C6,C7,C8,C9,C10,C11,C12)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的应用场景可以用于 枚举</span></span><br><span class="line"><span class="comment">//枚举：iota + const</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">E1  = <span class="literal">iota</span></span><br><span class="line">E2</span><br><span class="line">E3</span><br><span class="line">)</span><br><span class="line">fmt.Println(E1,E2,E3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">E4 = (<span class="literal">iota</span>+<span class="number">1</span>)*<span class="number">100</span></span><br><span class="line">E5</span><br><span class="line">E6</span><br><span class="line">)</span><br><span class="line">fmt.Println(E4,E5,E6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用域：</p><p>指变量可以使用的范围，go语言使用大括号显示的标识作用域范围，大括号内包含一连串的语句，叫做语句块，语句块可以嵌套，语句块内定义的变量不能在语句块外使用</p><p>案例说明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//作用域：定义变量或者标识符使用的范围</span></span><br><span class="line"><span class="comment">//在go中用 &#123;&#125; 在定义作用域的范围</span></span><br><span class="line"><span class="comment">//使用原则：子语句块可以使用父语句块中的标识符，父不能使用子的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">outer :=<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">inner := <span class="number">2</span></span><br><span class="line">outer := <span class="number">-1</span></span><br><span class="line">fmt.Println(outer,inner)</span><br><span class="line">&#123;</span><br><span class="line">inner2 :=<span class="number">3</span></span><br><span class="line">fmt.Println(outer,inner,inner2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(outer)</span><br><span class="line"><span class="comment">//fmt.Println(inner)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//几种print函数用法</span></span><br><span class="line">fmt.Println(<span class="string">"打印第一行"</span>)</span><br><span class="line">fmt.Print(<span class="string">"打印第二行"</span>)</span><br><span class="line">fmt.Print(<span class="string">"打印第三行"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T,%s,%T,%d"</span>,<span class="string">"kk"</span>,<span class="string">"kk"</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据类型：</p><p>布尔类型<br>用于表示真假，类型名为bool，只有2个值true和false</p><p>案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//布尔类型:表示真假</span></span><br><span class="line"><span class="comment">//标识符：bool</span></span><br><span class="line"><span class="comment">//字面量：true/false</span></span><br><span class="line"><span class="comment">//零值：false</span></span><br><span class="line"><span class="keyword">var</span> zero <span class="keyword">bool</span></span><br><span class="line">isBoy := <span class="literal">true</span></span><br><span class="line">isGirl := <span class="literal">false</span></span><br><span class="line">fmt.Println(zero,isBoy,isGirl)</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类型操作</span></span><br><span class="line"><span class="comment">//常用的运算符：</span></span><br><span class="line"><span class="comment">//逻辑运算符（与&amp;&amp;，或||，非！）</span></span><br><span class="line"><span class="comment">//关系运算符（==，!=）</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="literal">true</span>&amp;&amp;<span class="literal">true</span>)</span><br><span class="line">fmt.Println(<span class="literal">true</span>&amp;&amp;<span class="literal">false</span>)</span><br><span class="line">fmt.Println(<span class="literal">false</span>&amp;&amp;<span class="literal">true</span>)</span><br><span class="line">fmt.Println(<span class="literal">false</span>&amp;&amp;<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="literal">true</span>||<span class="literal">true</span>)</span><br><span class="line">fmt.Println(<span class="literal">true</span>||<span class="literal">false</span>)</span><br><span class="line">fmt.Println(<span class="literal">false</span>||<span class="literal">true</span>)</span><br><span class="line">fmt.Println(<span class="literal">false</span>||<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ! 取反</span></span><br><span class="line">fmt.Println(!<span class="literal">true</span>)</span><br><span class="line">fmt.Println(!<span class="literal">false</span>)</span><br><span class="line">fmt.Println(!isBoy)</span><br><span class="line">fmt.Println(!isGirl)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关系运算</span></span><br><span class="line">fmt.Println(isBoy==isGirl)</span><br><span class="line">fmt.Println(isBoy!=zero)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%T,%t,%t\n"</span>,isBoy,isBoy,isGirl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数值类型 </p><p>整型：</p><p>Go语言提供了5种有符号，5种无符号，一种指针，一种单字节，一种单个unicode字符，共13种整数类型</p><p>int,uint,rune,int8,int16,int32,int64,uint8,uint16,uint32,uint64,byte,uintptr</p><p>案例说明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">30</span></span><br><span class="line">fmt.Printf(<span class="string">"%T,%d\n"</span>,age,age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//字面量：十进制，八进制，十六进制</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="number">0777</span>,<span class="number">0X10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line"><span class="comment">//算术运算：+，-，*，/，%，++，--</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="number">3</span>+<span class="number">5</span>)</span><br><span class="line">fmt.Println(<span class="number">5</span><span class="number">-3</span>)</span><br><span class="line">fmt.Println(<span class="number">3</span>*<span class="number">5</span>)</span><br><span class="line">fmt.Println(<span class="number">9</span>/<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="number">9</span>%<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">age++</span><br><span class="line">fmt.Println(age)</span><br><span class="line">age--</span><br><span class="line">fmt.Println(age)</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值运算：==，!=，&gt;,&gt;=,&lt;,&lt;=</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="number">2</span>==<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>!=<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>&gt;<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>&gt;=<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>&lt;<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">2</span>&lt;=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值：=，+=，-=，*=，/=，%=</span></span><br><span class="line"><span class="comment">//a+=b : a=a+b</span></span><br><span class="line">a:=<span class="number">1</span></span><br><span class="line">a+=<span class="number">3</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> intA <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> intB <span class="keyword">uint</span> = <span class="number">3</span></span><br><span class="line">fmt.Println(intA+<span class="keyword">int</span>(intB))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">byte</span> = <span class="string">'A'</span></span><br><span class="line"><span class="keyword">var</span> w <span class="keyword">rune</span> = <span class="string">'中'</span></span><br><span class="line"></span><br><span class="line">fmt.Println(b,w)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浮点：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> height <span class="keyword">float64</span> = <span class="number">1.68</span></span><br><span class="line">fmt.Printf(<span class="string">"%T,%f\n"</span>,height,height)</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作 + - * / 比较简单不给例子了</span></span><br><span class="line"><span class="comment">//关系运算 &gt; &lt;  ~=  有精度损耗，所以不判断=</span></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Golang字符串string类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// "" 可解释字符串</span></span><br><span class="line"><span class="comment">// `` 原生字符串</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span>  = <span class="string">"kk"</span></span><br><span class="line"><span class="keyword">var</span> desc <span class="keyword">string</span> = <span class="string">`我是\t中国人`</span></span><br><span class="line">fmt.Println(name)</span><br><span class="line">fmt.Println(<span class="string">"k\tk"</span>)</span><br><span class="line">fmt.Println(desc)</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line"><span class="comment">//算术运算符 + 连接</span></span><br><span class="line">fmt.Println(<span class="string">"我叫"</span>+<span class="string">"kk"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关系运算符 &gt; &gt;= &lt; &lt;= == !=</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"ab"</span>==<span class="string">"bb"</span>)</span><br><span class="line">fmt.Println(<span class="string">"ab"</span>!=<span class="string">"bb"</span>)</span><br><span class="line">fmt.Println(<span class="string">"ab"</span>&lt;<span class="string">"bb"</span>)</span><br><span class="line">fmt.Println(<span class="string">"ab"</span>&lt;=<span class="string">"bb"</span>)</span><br><span class="line">fmt.Println(<span class="string">"ab"</span>&gt;<span class="string">"bb"</span>)</span><br><span class="line">fmt.Println(<span class="string">"ab"</span>&gt;=<span class="string">"bb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">s := <span class="string">"kk"</span></span><br><span class="line">s += <span class="string">"kk"</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串内容必须为 ascii </span></span><br><span class="line"><span class="comment">//索引 0 -  n-1  n为字符串长度</span></span><br><span class="line">desc = <span class="string">"abcde"</span></span><br><span class="line">fmt.Printf(<span class="string">"%T,%c\n"</span>,desc[<span class="number">0</span>],desc[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//切边 从 start end 不包含 end  [start:end]</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,desc[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串长度</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(desc))</span><br></pre></td></tr></table></figure><p>指针类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A := <span class="number">2</span></span><br><span class="line">B := A</span><br><span class="line">B = <span class="number">3</span></span><br><span class="line">fmt.Println(A,B)</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针 类型是 *int</span></span><br><span class="line">C := &amp;A <span class="comment">//拿到A的地址</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>,C)</span><br><span class="line">fmt.Println(*C)</span><br><span class="line">*C = <span class="number">5</span> <span class="comment">//修改A的内容</span></span><br><span class="line">fmt.Println(A)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序的结构：&lt;/p&gt;
&lt;p&gt;第一步：申明一个包名&lt;/p&gt;
&lt;p&gt;go语言要求每个源文件文件开头第一行必须有一个package申明它所属的包。&lt;/p&gt;
&lt;p&gt;第二步：import 一个包&lt;/p&gt;
&lt;p&gt;第三步：定义一个 func 函数&lt;/p&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vscode_go_配置</title>
    <link href="http://yoursite.com/2020/03/20/go-vscode-%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/03/20/go-vscode-%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-20T13:25:00.000Z</published>
    <updated>2020-07-10T09:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装vscode</p></li><li><p>安装中文包</p><img src="http://img.zjl.pub/static/images/vscode01.png"><img src="http://img.zjl.pub/static/images/vscode02.png"><img src="http://img.zjl.pub/static/images/vscode03.png"><img src="http://img.zjl.pub/static/images/vscode04.png"></li><li><p>vscode-go 安装</p><img src="http://img.zjl.pub/static/images/vscode05.png"></li><li><p>其他 vscode-go 插件安装</p></li></ol><p>插件说明：</p><p><a href="https://github.com/Microsoft/vscode-go" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-go</a></p><img src="http://img.zjl.pub/static/images/vscode06.png"><p>插件代理：因为国内墙的问题</p><img src="http://img.zjl.pub/static/images/vscode07.png"><p>插件安装：</p><img src="http://img.zjl.pub/static/images/vscode08.png"><img src="http://img.zjl.pub/static/images/vscode09.png"><ol start="5"><li>vscode MAC终端乱码问题</li></ol><img src="http://img.zjl.pub/static/images/vscode10.png"><img src="http://img.zjl.pub/static/images/vscode11.png"><p>6.setting.json 配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line">    <span class="string">"http.proxyAuthorization"</span><span class="string">:</span> <span class="literal">null</span><span class="string">,</span></span><br><span class="line">    <span class="string">"http.proxy"</span><span class="string">:</span> <span class="string">"http://127.0.0.1:7890"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"http.proxyStrictSSL"</span><span class="string">:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">    <span class="string">"terminal.integrated.fontFamily"</span><span class="string">:</span> <span class="string">"Meslo LG M for Powerline"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.useCodeSnippetsOnFunctionSuggest"</span><span class="string">:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.useCodeSnippetsOnFunctionSuggestWithoutType"</span><span class="string">:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="string">"files.autoSave"</span><span class="string">:</span> <span class="string">"afterDelay"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.formatTool"</span><span class="string">:</span> <span class="string">"goimports"</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.autocompleteUnimportedPackages"</span><span class="string">:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.inferGopath"</span><span class="string">:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="string">"go.docsTool"</span><span class="string">:</span> <span class="string">"gogetdoc"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vscode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装中文包&lt;/p&gt;
&lt;img src=&quot;http://img.zjl.pub/static/images/vscode01.png&quot;&gt;
&lt;img src=&quot;http://img.zjl.pub/stati
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="http://yoursite.com/2020/03/11/go%E7%89%B9%E5%BE%81/"/>
    <id>http://yoursite.com/2020/03/11/go%E7%89%B9%E5%BE%81/</id>
    <published>2020-03-11T06:17:18.000Z</published>
    <updated>2020-03-20T04:50:12.111Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>静态类型并具有丰富的内置类型</p><p>动态类型语言</p><p>动态类型语言是指在运行期间才去做数据类型检查的语言。也就是说，在用动态类型的语言编程时，永远不用给任何变量指定数据类型，该语言会在你第一次赋值给变量的时候，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其它的各种脚本语言如VBScript也多少属于动态类型语言。</p><p>静态类型语言</p><p>静态类型语言与动态类型语言刚好相反，它的数据类型是在编译期间检查的。也就是说，在编写程序的时候就要声明所有变量的数据类型。C/C++是静态类型语言的典型带便，其它的静态类型语言还有C#、Java等。</p><p>go内置数据类型</p><p>布尔类型 bool<br>整型 int8,uint8(byte),int16,uint16,int32,uint32,int64,uint64,int,uint,uintptr<br>浮点类型 float32,float64<br>复数类型 complex64,complex128<br>字符串 string<br>字符类型 rune<br>错误类型 error<br>指针 pointer<br>数组 array<br>切片 slice<br>字典 map<br>通道 chan<br>结构体 struct<br>接口 interface</p></li><li><p>函数多返回值</p><p>一个函数被调用后，返回给调用处的执行结果，叫做函数的返回值。调用处需要使用变量接收该结果函数有多个返回值。</p></li><li><p>错误处理机制</p><p>延迟处理</p></li><li><p>语言层并发</p><p>goroutine是go最基本的执行单元。</p></li><li><p>面向对象</p><p>使用类型，组合，接口来实现面向对象思想</p></li><li><p>反射</p></li><li><p>CGO</p><p>用于调用C语言实现的模块</p></li><li><p>自动垃圾回收</p></li><li><p>静态编译</p></li><li><p>交叉编译</p></li><li><p>易于部署</p></li><li><p>基于BSD协议完全开放</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态类型并具有丰富的内置类型&lt;/p&gt;
&lt;p&gt;动态类型语言&lt;/p&gt;
&lt;p&gt;动态类型语言是指在运行期间才去做数据类型检查的语言。也就是说，在用动态类型的语言编程时，永远不用给任何变量指定数据类型，该语言会在你第一次赋值给变量的时候，在内部将数据类型记录下来。P
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常见的学习网站</title>
    <link href="http://yoursite.com/2020/02/29/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2020/02/29/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</id>
    <published>2020-02-29T06:49:23.000Z</published>
    <updated>2020-02-29T14:44:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阿里云大学"><a href="#阿里云大学" class="headerlink" title="阿里云大学"></a>阿里云大学</h2><p>edu.aliyun.com</p><h2 id="51cto"><a href="#51cto" class="headerlink" title="51cto"></a>51cto</h2><p>51cto.com</p><h2 id="InfoQ"><a href="#InfoQ" class="headerlink" title="InfoQ"></a>InfoQ</h2><p><a href="http://www.infoq.cn" target="_blank" rel="noopener">www.infoq.cn</a></p><h2 id="IT大咖说"><a href="#IT大咖说" class="headerlink" title="IT大咖说"></a>IT大咖说</h2><p>itdks.com</p><h2 id="宋净超博客"><a href="#宋净超博客" class="headerlink" title="宋净超博客"></a>宋净超博客</h2><p><a href="https://jimmysong.io" target="_blank" rel="noopener">https://jimmysong.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阿里云大学&quot;&gt;&lt;a href=&quot;#阿里云大学&quot; class=&quot;headerlink&quot; title=&quot;阿里云大学&quot;&gt;&lt;/a&gt;阿里云大学&lt;/h2&gt;&lt;p&gt;edu.aliyun.com&lt;/p&gt;
&lt;h2 id=&quot;51cto&quot;&gt;&lt;a href=&quot;#51cto&quot; class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kafka</title>
    <link href="http://yoursite.com/2020/02/24/Kafka/"/>
    <id>http://yoursite.com/2020/02/24/Kafka/</id>
    <published>2020-02-24T00:49:29.000Z</published>
    <updated>2020-02-24T04:26:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka-SSL"><a href="#Kafka-SSL" class="headerlink" title="Kafka SSL"></a>Kafka SSL</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kafka-SSL&quot;&gt;&lt;a href=&quot;#Kafka-SSL&quot; class=&quot;headerlink&quot; title=&quot;Kafka SSL&quot;&gt;&lt;/a&gt;Kafka SSL&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我整理的有关jenkins cicd的方法</title>
    <link href="http://yoursite.com/2020/02/22/%E6%88%91%E6%95%B4%E7%90%86%E7%9A%84%E6%9C%89%E5%85%B3jenkins-cicd%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/22/%E6%88%91%E6%95%B4%E7%90%86%E7%9A%84%E6%9C%89%E5%85%B3jenkins-cicd%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-22T07:06:13.000Z</published>
    <updated>2020-07-21T02:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><p>salt 环境部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# sudo yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest.el7.noarch.rpm</span><br><span class="line">[root@server ~]# sudo yum clean expire-cache</span><br><span class="line">[root@server ~]# sudo yum install salt-master</span><br><span class="line">[root@server ~]# sudo yum install salt-api</span><br><span class="line">[root@server ~]# pip install pyOpenSSL</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master</span><br><span class="line">需要修改的内容：</span><br><span class="line">auto_accept: True</span><br><span class="line">file_roots: base 修改自己定义的路径</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl enable salt-master.service</span><br><span class="line">[root@server ~]# systemctl start salt-master.service</span><br><span class="line">[root@server ~]# systemctl enable salt-minion salt-api</span><br><span class="line">[root@server ~]# systemctl start salt-minion salt-api</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-key</span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master.d/api.conf</span><br><span class="line">rest_cherrypy:</span><br><span class="line">    port: 8080</span><br><span class="line">    ssl_crt: /etc/pki/tls/certs/localhost.crt</span><br><span class="line">    ssl_key: /etc/pki/tls/certs/localhost.key</span><br><span class="line"></span><br><span class="line">注意：localhost.crt localhost.key 这两个文件我是从其他服务器拷贝过来的</span><br><span class="line">scp -r localhost.* root@39.99.190.4:/etc/pki/tls/certs/</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/minion</span><br><span class="line">修改内容：</span><br><span class="line">master: 改为你salt服务器IP，我以本机为例</span><br><span class="line">id: 设置成你本机的Hostname</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl restart salt-minion</span><br><span class="line">[root@server ~]# netstat -tulnp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:4505            0.0.0.0:*               LISTEN      3549/python</span><br><span class="line">tcp        0      0 0.0.0.0:4506            0.0.0.0:*               LISTEN      3555/python</span><br><span class="line">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      10135/python</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1000/sshd</span><br><span class="line">udp        0      0 127.0.0.1:323           0.0.0.0:*                           523/chronyd</span><br><span class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                           683/dhclient</span><br><span class="line">udp6       0      0 ::1:323                 :::*                                523/chronyd</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-key -A</span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">server</span><br><span class="line">Proceed? [n/Y] Y</span><br><span class="line">Key for minion server accepted.</span><br><span class="line"></span><br><span class="line">[root@server ~]# salt-call -l info tls.create_self_signed_cert</span><br><span class="line">local:</span><br><span class="line">    Certificate &quot;localhost&quot; already exists</span><br><span class="line"></span><br><span class="line">[root@server ~]# useradd -M -s /sbin/nologin saltapi</span><br><span class="line">[root@server ~]# echo &quot;123456&quot; | passwd saltapi --stdin</span><br><span class="line">更改用户 saltapi 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"></span><br><span class="line">[root@server ~]# vim /etc/salt/master.d/eauth.conf</span><br><span class="line">external_auth:</span><br><span class="line">  pam:</span><br><span class="line">    saltapi:</span><br><span class="line">      - .*</span><br><span class="line">      - &apos;@wheel&apos;</span><br><span class="line">      - &apos;@runner&apos;</span><br><span class="line"></span><br><span class="line">[root@server ~]# systemctl restart salt-master</span><br><span class="line">[root@server ~]# systemctl restart salt-api</span><br><span class="line">[root@server ~]# curl -k https://localhost:8080/login -H &quot;Accept:application/json&quot; -d username=&apos;saltapi&apos; -d password=&apos;123456&apos; -d eauth=&apos;pam&apos;</span><br><span class="line">&#123;&quot;return&quot;: [&#123;&quot;perms&quot;: [&quot;.*&quot;, &quot;@wheel&quot;, &quot;@runner&quot;], &quot;start&quot;: 1582520837.550638, &quot;token&quot;: &quot;368e24807c14dc84811d4a521999bda6cb6e2d4f&quot;, &quot;expire&quot;: 1582564037.550639, &quot;user&quot;: &quot;saltapi&quot;, &quot;eauth&quot;: &quot;pam&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">然后把 salt.tar.gz 的包拷贝过去，这就算基本完成了，salt.tar.gz的内容我放到了github上面</span><br></pre></td></tr></table></figure><p>jenkins环境部署：<br>这里我就不说了，比较简单，重点贴一下 salt-api的脚本文件 在/data/zjl (zjl可以替换成公司的名称)</p><p>deploy.yaml 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># saltstack api server config</span><br><span class="line">salturl: &quot;https://172.16.102.33:8080&quot;</span><br><span class="line">saltusername: &quot;saltapi&quot;</span><br><span class="line">saltpassword: &quot;123456&quot;</span><br><span class="line">logurl: &quot;172.16.102.33&quot;</span><br><span class="line"></span><br><span class="line">#ZJL</span><br><span class="line">#01</span><br><span class="line"></span><br><span class="line">zjl-appname01:</span><br><span class="line">  version: &quot;0.1&quot;</span><br><span class="line">  dev:</span><br><span class="line">      info: &quot;dev evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-dev-ops-docker-04</span><br><span class="line">         ip: 172.16.102.115</span><br><span class="line">  qafc:</span><br><span class="line">      info: &quot;qafc evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-qa-ops-docker-04</span><br><span class="line">         ip: 172.16.102.64</span><br><span class="line"></span><br><span class="line">  online:</span><br><span class="line">      info: &quot;online evn&quot;</span><br><span class="line">      project: &quot;zjl&quot;</span><br><span class="line">      xxxx3: &quot;Run Cmd Error %s&quot;</span><br><span class="line">      host:</span><br><span class="line">       - hostname: hz01-prod-ops-docker-02</span><br><span class="line">         ip: 172.16.101.20</span><br></pre></td></tr></table></figure><p>salt-api.py 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 –*-</span><br><span class="line"></span><br><span class="line">import urllib2,urllib</span><br><span class="line">from pprint import pprint</span><br><span class="line">import time</span><br><span class="line">import yaml</span><br><span class="line">import sys,os</span><br><span class="line">import getopt</span><br><span class="line">import commands</span><br><span class="line">import ssl</span><br><span class="line">try:</span><br><span class="line">    import json</span><br><span class="line">except ImportError:</span><br><span class="line">    import simplejson as json</span><br><span class="line">class SaltAPI(object):</span><br><span class="line">    __token_id = &apos;&apos;</span><br><span class="line">    def __init__(self,url,username,password):</span><br><span class="line">        self.__url = url.rstrip(&apos;/&apos;)</span><br><span class="line">        self.__user = username</span><br><span class="line">        self.__password = password</span><br><span class="line"></span><br><span class="line">    def token_id(self):</span><br><span class="line">        &apos;&apos;&apos; user login and get token id &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;eauth&apos;: &apos;pam&apos;, &apos;username&apos;: self.__user, &apos;password&apos;: self.__password&#125;</span><br><span class="line">        encode = urllib.urlencode(params)</span><br><span class="line">        obj = urllib.unquote(encode)</span><br><span class="line">        content = self.postRequest(obj,prefix=&apos;/login&apos;)</span><br><span class="line">        try:</span><br><span class="line">            self.__token_id = content[&apos;return&apos;][0][&apos;token&apos;]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise KeyError</span><br><span class="line"></span><br><span class="line">    def postRequest(self,obj,prefix=&apos;/&apos;):</span><br><span class="line">        url = self.__url + prefix</span><br><span class="line">        headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        req = urllib2.Request(url, obj, headers)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def list_all_key(self):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.list_all&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        minions = content[&apos;return&apos;][0][&apos;data&apos;][&apos;return&apos;][&apos;minions&apos;]</span><br><span class="line">        minions_pre = content[&apos;return&apos;][0][&apos;data&apos;][&apos;return&apos;][&apos;minions_pre&apos;]</span><br><span class="line">        return minions,minions_pre</span><br><span class="line"></span><br><span class="line">    def delete_key(self,node_name):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.delete&apos;, &apos;match&apos;: node_name&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][&apos;data&apos;][&apos;success&apos;]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def accept_key(self,node_name):</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;wheel&apos;, &apos;fun&apos;: &apos;key.accept&apos;, &apos;match&apos;: node_name&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][&apos;data&apos;][&apos;success&apos;]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_noarg_execution(self,tgt,fun):</span><br><span class="line">        &apos;&apos;&apos; Execute commands without parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_execution(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Command execution with parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line"></span><br><span class="line">    def remote_execution1(self,tgt,fun):</span><br><span class="line">        &apos;&apos;&apos; Command execution with parameters &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        ret = content[&apos;return&apos;][0][tgt]</span><br><span class="line">        return ret</span><br><span class="line">        print ret</span><br><span class="line"></span><br><span class="line">    def target_remote_execution(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Use targeting for remote execution &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg, &apos;expr_form&apos;: &apos;nodegroup&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def target_remote_execution1(self,tgt,fun,arg):</span><br><span class="line">        &apos;&apos;&apos; Use targeting for remote execution &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: fun, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line"></span><br><span class="line">    def deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Module deployment &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def async_deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Asynchronously send a command to connected minions &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local_async&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def target_deploy(self,tgt,arg):</span><br><span class="line">        &apos;&apos;&apos; Based on the node group forms deployment &apos;&apos;&apos;</span><br><span class="line">        params = &#123;&apos;client&apos;: &apos;local_async&apos;, &apos;tgt&apos;: tgt, &apos;fun&apos;: &apos;state.sls&apos;, &apos;arg&apos;: arg, &apos;expr_form&apos;: &apos;nodegroup&apos;&#125;</span><br><span class="line">        obj = urllib.urlencode(params)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line"></span><br><span class="line">    def json_postRequest(self,obj,prefix=&apos;/&apos;):</span><br><span class="line">        &apos;&apos;&apos; 复杂参数提交 json 结构提交 &apos;&apos;&apos;</span><br><span class="line">        url = self.__url + prefix</span><br><span class="line">        headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        headers[&apos;Accept&apos;] = &apos;application/json&apos;</span><br><span class="line">        headers[&apos;Content-Type&apos;] = &apos;application/json&apos;</span><br><span class="line">        req = urllib2.Request(url, obj, headers)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        return content</span><br><span class="line"></span><br><span class="line">    def url_postRequest(self, jid, prefix=&apos;/jobs/&apos;):</span><br><span class="line">        &apos;&apos;&apos; 复杂参数提交 json 结构提交 &apos;&apos;&apos;</span><br><span class="line">        url = self.__url + prefix + jid</span><br><span class="line">        #headers = &#123;&apos;X-Auth-Token&apos;   : self.__token_id&#125;</span><br><span class="line">        #headers[&apos;Accept&apos;] = &apos;application/json&apos;</span><br><span class="line">        print url</span><br><span class="line">        req = urllib2.Request(url)</span><br><span class="line">        req.add_header(&apos;X-Auth-Token&apos;, self.__token_id)</span><br><span class="line">        opener = urllib2.urlopen(req)</span><br><span class="line">        content = json.loads(opener.read())</span><br><span class="line">        #return content</span><br><span class="line">        pprint(content)</span><br><span class="line"></span><br><span class="line">    def sls_json_deploy(self,tgt,mods,pillar):</span><br><span class="line">        &apos;&apos;&apos; state.sls 模块功能执行 带pillar 参数传递 &apos;&apos;&apos;</span><br><span class="line">        post_data = []</span><br><span class="line"></span><br><span class="line">        my_post= &#123;&#125;</span><br><span class="line">        #my_post[&quot;client&quot;] = &quot;local&quot;</span><br><span class="line">        my_post[&quot;client&quot;] = &quot;local_async&quot;</span><br><span class="line">        my_post[&quot;tgt&quot;] = tgt</span><br><span class="line">        my_post[&quot;fun&quot;] = &quot;state.sls&quot;</span><br><span class="line">        #arg = [&quot;deploy&quot;, &quot;pillar=&#123;&apos;web&apos;: &apos;test&apos;&#125;&quot;]</span><br><span class="line">        kwarg= &#123;&apos;mods&apos;: mods,&apos;pillar&apos;:pillar&#125;</span><br><span class="line">        my_post[&quot;kwarg&quot;]= kwarg</span><br><span class="line">        post_data.append(my_post)</span><br><span class="line">        obj = json.dumps(post_data)</span><br><span class="line">        self.token_id()</span><br><span class="line">        content = self.json_postRequest(obj)</span><br><span class="line">        jid = content[&apos;return&apos;][0][&apos;jid&apos;]</span><br><span class="line">        return jid</span><br><span class="line">        #return content</span><br><span class="line"></span><br><span class="line">def usage():</span><br><span class="line">    print &apos;&apos;&apos;</span><br><span class="line">Usage: %s [options...]</span><br><span class="line">Options:</span><br><span class="line">    -a/--app_name                       : appname info</span><br><span class="line">    -e/--env                            : deploy env</span><br><span class="line">    -u/--url                            : download resource url</span><br><span class="line">    -w/--war                            : war package name</span><br><span class="line">    -h/--help                           : this help info page</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">    #</span><br><span class="line">    %s -iia openapi -e dev -u http://172.16.20.1:9090 -w openapi-plt-01.war</span><br><span class="line">    &apos;&apos;&apos; % (sys.argv[0],sys.argv[0])</span><br><span class="line"></span><br><span class="line">def load_config():</span><br><span class="line">    base_dir = os.path.abspath(os.path.dirname(sys.argv[0]))</span><br><span class="line">    configFile = &quot;%s/%s&quot; % (base_dir,&quot;deploy.yaml&quot;)</span><br><span class="line">    stream = file(configFile, &apos;r&apos;)</span><br><span class="line">    try:</span><br><span class="line">        data = yaml.load(stream)</span><br><span class="line">        return data</span><br><span class="line">    except BaseException,e:</span><br><span class="line">        print &quot;yaml配置错误，请检查deploy.yaml文件,错误信息如下:&quot;</span><br><span class="line">        print e</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line">    global base_dir,DEBUG</span><br><span class="line">    DEBUG = False</span><br><span class="line">    base_dir = os.path.abspath(os.path.dirname(sys.argv[0]))</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        opts, args = getopt.getopt(sys.argv[1:],&apos;a:e:u:w:h:c&apos;)</span><br><span class="line">    except getopt.GetoptError:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    #各个变量保存</span><br><span class="line">    app_name = None</span><br><span class="line">    deploy_env = None</span><br><span class="line">    war_package_name = None</span><br><span class="line">    download_url = None</span><br><span class="line">    for opt, arg in opts:</span><br><span class="line">        if opt in (&apos;-h&apos;, &apos;--help&apos;):</span><br><span class="line">            usage()</span><br><span class="line">            sys.exit()</span><br><span class="line">        elif opt == &apos;-a&apos;:</span><br><span class="line">            app_name = arg</span><br><span class="line">        elif opt == &apos;-e&apos;:</span><br><span class="line">            deploy_env = arg</span><br><span class="line">        elif opt == &apos;-u&apos;:</span><br><span class="line">            download_url = arg</span><br><span class="line">        elif opt == &apos;-w&apos;:</span><br><span class="line">            war_package_name = arg</span><br><span class="line">        elif opt == &apos;-c&apos;:</span><br><span class="line">            load_config()</span><br><span class="line"></span><br><span class="line">    if not app_name or not deploy_env or not war_package_name or not download_url:</span><br><span class="line">        usage()</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">    # 单元测试内容</span><br><span class="line">    #print sapi.list_all_key()</span><br><span class="line">    #print sapi.remote_noarg_execution(&apos;salt-dns-doc&apos;,&apos;test.ping&apos;)</span><br><span class="line">    #print sapi.remote_execution(&apos;salt-dns-doc&apos;,&apos;cmd.run&apos;,&apos;hostname -f&apos;)</span><br><span class="line">    #print sapi.remote_execution(&apos;salt-dns-doc&apos;,&apos;cmd.run&apos;,&apos;hostname -f&apos;)</span><br><span class="line"></span><br><span class="line">    # read config info from yaml</span><br><span class="line">    api_config = load_config()</span><br><span class="line"></span><br><span class="line">    sapi = SaltAPI(url=api_config[&apos;salturl&apos;],username=api_config[&apos;saltusername&apos;],password=api_config[&apos;saltpassword&apos;])</span><br><span class="line">    logurl = api_config[&apos;logurl&apos;]</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        project=api_config[app_name][deploy_env][&apos;project&apos;]</span><br><span class="line">        pillar = &#123; &quot;projectname&quot;:project,&quot;appname&quot;:app_name,&quot;url&quot;:download_url,&quot;warname&quot;:war_package_name&#125;</span><br><span class="line">    except:</span><br><span class="line">        print &quot;没有找到app归属的项目名，请检查config.yaml中project参数的配置!&quot;</span><br><span class="line">    # get host list for deploy</span><br><span class="line">    app_mods=&quot;%s.%s.%s&quot; % (&apos;deploy&apos;,app_name,deploy_env)</span><br><span class="line">    try:</span><br><span class="line">        dev_host_list=api_config[app_name][deploy_env][&apos;host&apos;]</span><br><span class="line">    except:</span><br><span class="line">        print &quot;无法获取deploy.yaml中的salt-key,请检查配置!&quot;</span><br><span class="line"></span><br><span class="line">    for host in dev_host_list:</span><br><span class="line">        check_minion_job_count = 1</span><br><span class="line">        while (check_minion_job_count &lt; 15):</span><br><span class="line">            time.sleep(10)</span><br><span class="line">            a=sapi.remote_execution1(host[&apos;hostname&apos;],&apos;saltutil.running&apos;)</span><br><span class="line">            if not a:</span><br><span class="line">                try:</span><br><span class="line">                    jid = sapi.sls_json_deploy(host[&apos;hostname&apos;],app_mods,pillar)</span><br><span class="line">                    print (&apos;%s:Executed command with job ID: &#123;0&#125;&apos;.format(jid)) %(host[&apos;hostname&apos;])</span><br><span class="line">                    time.sleep(40)</span><br><span class="line">                    os.system(&apos;ssh root@%s salt-run jobs.lookup_jid %s&apos; %(logurl,jid))</span><br><span class="line">                    break</span><br><span class="line">                except BaseException,e:</span><br><span class="line">                    print &quot;无法调用salt-minion,请检查salt-key是否有误!&quot;</span><br><span class="line">                    sys.exit()</span><br><span class="line">            else:</span><br><span class="line">               for (k,v) in a[0].items():</span><br><span class="line">                    if k == &apos;jid&apos;:</span><br><span class="line">                        try:</span><br><span class="line">                            minionjid = str(v)</span><br><span class="line">                            print &quot;%s:客户端正在执行任务,任务id为%s&quot; %(host[&apos;hostname&apos;],minionjid)</span><br><span class="line">                            break</span><br><span class="line">                        except:</span><br><span class="line">                            pass</span><br><span class="line">               check_minion_job_count = check_minion_job_count + 1</span><br><span class="line">               if check_minion_job_count == 9:</span><br><span class="line">                   print &apos;检查9次发现jid还在运行,杀掉僵死进程!&apos;</span><br><span class="line">                   sapi.target_remote_execution1(host[&apos;hostname&apos;],&apos;saltutil.kill_job&apos;,minionjid)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>jenkins 配置项目,主要就是 Pipeline script 脚本内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">node&#123;</span><br><span class="line">//调用此脚本需带以下变量：1、APPNAME：项目名称。2、BRANCH：git分支。3、GIT_URL：git工程地址。4、WAR_DIR：代码包路径。5、Email：收件人邮箱地址。</span><br><span class="line">    echo &quot;Building APP $&#123;APPNAME&#125;&quot;</span><br><span class="line"></span><br><span class="line">    stage (&apos;拉取代码&apos;)&#123;</span><br><span class="line">       git branch: &quot;$&#123;BRANCH&#125;&quot;, credentialsId: &apos;ZJL-OP&apos;, url: &quot;$&#123;GIT_URL&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;单元测试 &apos;)&#123;</span><br><span class="line">       echo &quot;starting unitTest......&quot;</span><br><span class="line">       sh &quot;mvn org.jacoco:jacoco-maven-plugin:prepare-agent clean test -Dautoconfig.skip=true -Dmaven.test.skip=false -Dmaven.test.failure.ignore=true&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;代码检测&apos;)&#123;</span><br><span class="line">       sh &quot;cp ../sonar-java.properties sonar-project.properties&quot;</span><br><span class="line">       sh &quot;sed -i &apos;s/demo/$&#123;APPNAME&#125;/g&apos; sonar-project.properties&quot;</span><br><span class="line">       withSonarQubeEnv(&apos;SonarQube&apos;)&#123;</span><br><span class="line">            sh &quot;/data/sonar-scanner/bin/sonar-scanner&quot;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stage (&apos;编译打包&apos;)&#123;</span><br><span class="line">       sh &quot;rm -rf ~/.m2/repository/com/zjl/* &quot;</span><br><span class="line">       sh &quot;mvn clean package -Dmaven.test.skip=true&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    stage (&apos;传包归档&apos;)&#123;</span><br><span class="line">       commitChangeset = sh(returnStdout: true, script: &apos;git rev-parse HEAD |cut -c1-7&apos;).trim()</span><br><span class="line">   sh &apos;ssh root@hz01-prod-ops-salt-01 &quot;mkdir -p /var/www/html/backup/dev_qafc_war/$&#123;APPNAME&#125;&quot;&apos;</span><br><span class="line">       sh &quot;scp $&#123;WAR_DIR&#125;/*.jar root@hz01-prod-ops-salt-01:/var/www/html/backup/dev_qafc_war/$&#123;APPNAME&#125;/$&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.jar&quot; </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    stage (&apos;发布开发环境&apos;)&#123;       </span><br><span class="line">       sh  &quot;python /data/zjl/salt-api.py -a $APPNAME -e dev -u http://package-dev-qafc.sysadmin.ops.com/backup/dev_qafc_war -w $&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.jar &quot;</span><br><span class="line">    // build job: &apos;deploy&apos;, parameters: [string(name: &apos;APPNAME&apos;, value: &quot;$&#123;APPNAME&#125;&quot;), string(name: &apos;ENV&apos;, value: &apos;dev&apos;), string(name: &apos;PACKAGE&apos;, value: &quot;$&#123;APPNAME&#125;-$&#123;BRANCH&#125;-$&#123;commitChangeset&#125;.war&quot;)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jenkins 配置代码检测截图：</p><img src="http://img.zjl.pub/static/images/jenkins01.png"><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><p>使用 pipeline方式，直接编写每个项目的 jenkinsfile ，然后把jenkinsfile 文件放到 代码的根目录下面，我这边是放在 deploy 目录里面。</p><h1 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方式一&quot;&gt;&lt;a href=&quot;#方式一&quot; class=&quot;headerlink&quot; title=&quot;方式一&quot;&gt;&lt;/a&gt;方式一&lt;/h1&gt;&lt;p&gt;salt 环境部署：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>央行降息_2.17</title>
    <link href="http://yoursite.com/2020/02/18/%E5%A4%AE%E8%A1%8C%E9%99%8D%E6%81%AF-2-17/"/>
    <id>http://yoursite.com/2020/02/18/%E5%A4%AE%E8%A1%8C%E9%99%8D%E6%81%AF-2-17/</id>
    <published>2020-02-18T12:29:32.000Z</published>
    <updated>2020-02-19T06:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>2月17日，中国央行宣布：为对冲逆回购到期等因素的影响，维护银行体系流动性合理充裕，2020年2月17日，人民银行开展了2000亿元中期借贷便利操作(MLF)和1000亿元7天期逆回购操作。</p><img src="http://img.zjl.pub/static/images/公告01.png"><p>其中，中期借贷便利中标利率为3.15%，较前次下降10个基点，这个需要重点关注，7天期逆回购操作中标利率为2.4%，与前次持平。这透露出了一个很强烈的信号，央行想要降息了，这也预示着中国在降息上迈出了关键一步，3天以后也就是2月20日的市场报价利率（LPR），将至少有10个基点的降息。因为中间借贷便利（MLF）是目前最主要的 “政策利率” ，是影响当前市场报价利率（LPR）的基本坐标。所谓市场报价利率，就是每月20日由18家银行报价，剔除一个最高价，一个最低价之后的平均价，由央行委托全国银行间同业拆解中心负责统计，发布。各银行的新增贷款，都要参考市场报价利率执行。降息10个基点，就是央行应对这次疫情的系列对策之一。</p><p>事实上，2月3日，央行在逆回购操作的报价里，已经透露了降息10个基点的信号，但今天的信号更加强烈。</p><img src="http://img.zjl.pub/static/images/公告02.png"><p>而前两天，央行副行长潘功胜在国新办发布会也表示：”在量增价降的背景下，整个金融市场利率也在下行。金融市场，货币市场利率变化会影响市场报价利率，现在市场预期 下次中期借贷便利的利率 和2月20日公布的市场报价利率，也会有较大概率下行。”</p><p>来源 <a href="http://www.scio.gov.cn/xwfbh/xwbfbh/wqfbh/42311/42494/wz42496/Document/1672849/1672849.htm" target="_blank" rel="noopener">http://www.scio.gov.cn/xwfbh/xwbfbh/wqfbh/42311/42494/wz42496/Document/1672849/1672849.htm</a></p><img src="http://img.zjl.pub/static/images/提问01.png"><p>那么问题来了，该怎么样看待这个降息？它透露了什么信号？</p><p>其实，降息是实体经济，股市，楼市的利好，它在意料之中。刚才说了，央行从2月3日就传递了降息的信号，后来央行副行长又透露过，所以基本上就是”明示降息”，降息的消息出来后，中国的股市，债券，大宗商品市场都给出了积极反馈，同步上涨。但是现在市场处在缺乏经济数据的前提下，市场集中对逆周期政策发力的预期。</p><p>如今，各位应该警惕当前市场交易节奏的切换，因对逆周期调节的预期已经几乎悉数计入资产价格，而对经济现实的冲击则尚未充分反映。而这次降息幅度并不算大    ，只有10个基点，这现实了管理层不愿意过分刺激资产价格。从历史上看，中国央行标准降息幅度基本是25个基点。去年，央行改变了玩法，一次降息只有5个基点，这次出现严重疫情，也才给了10个基点。这说明，央行在降息上仍然非常谨慎，这背后的原因有三个：</p><p>第一,不愿意给人们有”大水漫灌”的预期，不愿意刺激资产价格，尤其是房价；</p><p>第二，降息力度太大，可能影响人民币汇率，如果贬值过度，会引发主要贸易伙伴的反弹；</p><p>第三，消费价格指数仍然在高位。这个时候去降利率，其实对于稳定物价是非常不利的，在降利率对人民币贬值压力会很大，降利率会推高大宗商品的价格，特别利好资金密集型行业，比如股市，房地产，2.17号的股市大涨也有关系，</p><p>根据中国统计局周一公布的数据：1月居民消费价格指数同比上涨5.4%，其中猪价同比涨幅较上月的97%再度扩大，到了116%，除了猪肉，其他品类也出现了不同程度的上涨，一个很不乐观的预测是，疫情带来的通胀压力可能要持续到二季度。</p><p>此外，央行还希望通过差别式利率，来支持实体经济，支持灾区。事实上，在利率普降10个基点的基础上，还有大量针对灾区，受影响的行业的定向降息，力度动辄是50个基点。所以，目前央行是”普遍降息+定向降息”并举的。</p><p>而这一轮降息后，2020年应该还有降息，至少还有15个基点，甚至更大空间。因为2020年，稳增长难度非常大，所以，未来降息还会出现。至于财政政策的全面发力，也会如期而至，比如进一步减税降费，增加赤字率，增加国债，地方债的发行。至于2020年的广义货币（M2）同比增速，也会有一个明显的反弹。</p><p>接下来，2月20日的市场报价利率，会不会跟着走低呢？</p><img src="http://img.zjl.pub/static/images/利率公告01.png"><p>按照1月20日的利率，如果降息10个基点，则1年期和5年期利率将分别为4.05%和4.70%，其中5年期是房贷的参考利率。所以我们关注的重点，应该是5年期利率是否会同步降息，力度是否一样。去年，央行就曾只降低1年期利率，而不降低5年期。如果5年期不降，2月20日地产股无疑会大跌，对楼市是较大利空。但以现在的情况来看，这次两档利率同时下降的可能性更大一些。至于存量房贷，按照央行的说法都要在3月到8月之间重新签，主要是改变利率基准。因为，以后要以市场报价利率为基准，之前购房者享有的折扣或者上浮，在重签的时候都会体现。建议是签1年一定价，而不要签”利率不变”，因为中国的利率趋势会足步走低。同一天，2月17日，中国统计局正式发布：1月份70个大中城市商品住宅销售价格变动情况。2020年开局，新冠肺炎疫情肆虐，统计局给出的房价走势到底怎么样呢？首先还是来看看一线城市的房价。一手住宅销售价格，环比上涨0.4%，其中：北京持平，上海，广州和深圳分别上涨0.5%，0.3%和0.5%。二手住宅销售价格，环比上涨0.5%，其中：北京上涨0.4%，上海上涨0.2%，广州上涨0.3%，深圳上涨0.7%。可以看出，无论是新房还是二手房，在此次疫情冲击下，在统计局的数据里，北上广深房价”依然坚挺”，市场信心”依然充足”。疫情之下，武汉就不得不提了：一手住宅销售价格，环比上涨0.4%，从这里可以看出，统计局的数据，存在很大的失真，比较武汉是此次疫情最严重的区域，楼市冷淡是肯定的。当然，统计局的数据也和网签数据的延迟性有关，预计2月份开始，房价将出现持续下调。环比来看，1月份一手房价上涨的城市数量为47个，比上月减少3个，房价下调的城市为15个，与上月大体相同，而持平的城市反而增加。如果从同比来看，市场降温则更加明显，房价上涨的城市数量减少11个，房价下调的城市数量增加7个。到了2月份，预计房价上涨的城市数量会快速减少，或因新冠肺炎疫情，或因开发商降价促销。二手房方面，值得一提的是，从去年6月份开始，二手房价格数据已经连续8个月出现超过20个城市下调的情况，也体现了市场走势逐渐从高位开始回落。同时，客观上也说明其受二手房交易市场，一手房交易市场的影响，房东主动降价或减少涨价的做法。预计受疫情影响，2月份房价下调的城市数量会明显增加。在疫情冲击下，由于全国各地的售楼部基本关闭，工地停工，导致市场交易受阻。而2月份以来已经有无锡，西安，上海等10多个省市陆续出台扶持房企的政策，包括延期缴纳土地款，放松商品房预售条件等政策，短期内在一定程度上缓解了其资金周转压力。但是多数城市只是针对房企，并未针对购房者，长期来看，政策对房地产资金链的缓解作用有限。虽然不愿意看到，但疫情如果持续的话，各个地方的房地产调控政策，很可能还会进一步放松。在中国，房地产是集土地财政，货币宽松，居民消费，银行信贷，基建投资为一体，将所有经济要素和生产资料捆绑在一起的”经济神器”。这个神器太过好用，经济稍有疲态就刺激，08年和15年都是这样过来的，屡试不爽（根本停不下来）。房地产作为核心要素，转动起了真个社会的信用链条：房地产商加杠杆买地盖楼，靠卖期货实现高周转；地方政府卖地收税，大搞基础设施建设，繁荣基建产业，又通过城投公司从各种银子银行授信借贷，然后再靠卖地还债，政府债务不断累计；普通老百姓加杠杆买房，繁荣银行信贷，被迫提高个人生成积极性。</p><p>此前，在房地产的带领下，货币实现了快速的流通，房价越涨，货币发行流通就会越多，并且依靠商业银行的信用扩张，广义货币（M2）一路飙升，经济呈现”一片繁荣”的景象。房地产的确为中国经济做出过贡献，完善了基础设施建设，但后果是，造成了整个经济：满是疮疤，后患无穷。    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2月17日，中国央行宣布：为对冲逆回购到期等因素的影响，维护银行体系流动性合理充裕，2020年2月17日，人民银行开展了2000亿元中期借贷便利操作(MLF)和1000亿元7天期逆回购操作。&lt;/p&gt;
&lt;img src=&quot;http://img.zjl.pub/static/i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库开发</title>
    <link href="http://yoursite.com/2020/01/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/01/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/</id>
    <published>2020-01-26T07:13:00.000Z</published>
    <updated>2020-02-03T04:18:50.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列一-数据库及SQL-MySQL基础"><a href="#系列一-数据库及SQL-MySQL基础" class="headerlink" title="系列一:数据库及SQL/MySQL基础"></a>系列一:数据库及SQL/MySQL基础</h1><h2 id="课时1-数据库概述"><a href="#课时1-数据库概述" class="headerlink" title="课时1:数据库概述"></a>课时1:数据库概述</h2><h2 id="课时2-Java应用与数据库的关系"><a href="#课时2-Java应用与数据库的关系" class="headerlink" title="课时2:Java应用与数据库的关系"></a>课时2:Java应用与数据库的关系</h2><h2 id="课时3-安装Mysql"><a href="#课时3-安装Mysql" class="headerlink" title="课时3:安装Mysql"></a>课时3:安装Mysql</h2><h2 id="课时4-删除Mysql"><a href="#课时4-删除Mysql" class="headerlink" title="课时4:删除Mysql"></a>课时4:删除Mysql</h2><h2 id="课时5-Mysql安装路径以及配置信息"><a href="#课时5-Mysql安装路径以及配置信息" class="headerlink" title="课时5:Mysql安装路径以及配置信息"></a>课时5:Mysql安装路径以及配置信息</h2><h2 id="课时6-开启关闭服务器以及登录退出客户端"><a href="#课时6-开启关闭服务器以及登录退出客户端" class="headerlink" title="课时6:开启关闭服务器以及登录退出客户端"></a>课时6:开启关闭服务器以及登录退出客户端</h2><h2 id="课时7-SQL语言的概述"><a href="#课时7-SQL语言的概述" class="headerlink" title="课时7:SQL语言的概述"></a>课时7:SQL语言的概述</h2><h2 id="课时8-DDL-数据定义语言-之操作数据库"><a href="#课时8-DDL-数据定义语言-之操作数据库" class="headerlink" title="课时8:DDL(数据定义语言)之操作数据库"></a>课时8:DDL(数据定义语言)之操作数据库</h2><h2 id="课时9-数据类型介绍1"><a href="#课时9-数据类型介绍1" class="headerlink" title="课时9:数据类型介绍1"></a>课时9:数据类型介绍1</h2><h2 id="课时10-数据类型介绍2"><a href="#课时10-数据类型介绍2" class="headerlink" title="课时10:数据类型介绍2"></a>课时10:数据类型介绍2</h2><h2 id="课时11-DDL-数据定义语言-之操作表"><a href="#课时11-DDL-数据定义语言-之操作表" class="headerlink" title="课时11:DDL(数据定义语言)之操作表"></a>课时11:DDL(数据定义语言)之操作表</h2><h2 id="课时12-DML-数据操作语言-之INSERT"><a href="#课时12-DML-数据操作语言-之INSERT" class="headerlink" title="课时12:DML(数据操作语言)之INSERT"></a>课时12:DML(数据操作语言)之INSERT</h2><h2 id="课时13-DML-数据操作语言-之修改记录"><a href="#课时13-DML-数据操作语言-之修改记录" class="headerlink" title="课时13:DML(数据操作语言)之修改记录"></a>课时13:DML(数据操作语言)之修改记录</h2><h2 id="课时14-DML-数据操作语言-之DELETE"><a href="#课时14-DML-数据操作语言-之DELETE" class="headerlink" title="课时14:DML(数据操作语言)之DELETE"></a>课时14:DML(数据操作语言)之DELETE</h2><h2 id="课时15-DCL-数据控制语言"><a href="#课时15-DCL-数据控制语言" class="headerlink" title="课时15:DCL(数据控制语言)"></a>课时15:DCL(数据控制语言)</h2><h2 id="课时16-DQL-数据查询语言-之基础查询之列控制"><a href="#课时16-DQL-数据查询语言-之基础查询之列控制" class="headerlink" title="课时16:DQL(数据查询语言)之基础查询之列控制"></a>课时16:DQL(数据查询语言)之基础查询之列控制</h2><h2 id="课时17-DQL-数据查询语言-之条件查询"><a href="#课时17-DQL-数据查询语言-之条件查询" class="headerlink" title="课时17:DQL(数据查询语言)之条件查询"></a>课时17:DQL(数据查询语言)之条件查询</h2><h2 id="课时18-DQL-数据查询语言-之模糊查询"><a href="#课时18-DQL-数据查询语言-之模糊查询" class="headerlink" title="课时18:DQL(数据查询语言)之模糊查询"></a>课时18:DQL(数据查询语言)之模糊查询</h2><h2 id="课时19-DQL-数据查询语言-之排序"><a href="#课时19-DQL-数据查询语言-之排序" class="headerlink" title="课时19:DQL(数据查询语言)之排序"></a>课时19:DQL(数据查询语言)之排序</h2><h2 id="课时20-DQL-数据查询语言-之聚合函数"><a href="#课时20-DQL-数据查询语言-之聚合函数" class="headerlink" title="课时20:DQL(数据查询语言)之聚合函数"></a>课时20:DQL(数据查询语言)之聚合函数</h2><h2 id="课时21-DQL-数据查询语言-之分组查询"><a href="#课时21-DQL-数据查询语言-之分组查询" class="headerlink" title="课时21:DQL(数据查询语言)之分组查询"></a>课时21:DQL(数据查询语言)之分组查询</h2><h2 id="课时22-DQL-数据查询语言-之limit方言"><a href="#课时22-DQL-数据查询语言-之limit方言" class="headerlink" title="课时22:DQL(数据查询语言)之limit方言"></a>课时22:DQL(数据查询语言)之limit方言</h2><h1 id="系列二-SQL进阶及查询练习"><a href="#系列二-SQL进阶及查询练习" class="headerlink" title="系列二:SQL进阶及查询练习"></a>系列二:SQL进阶及查询练习</h1><h2 id="课时1-单表的查询练习"><a href="#课时1-单表的查询练习" class="headerlink" title="课时1:单表的查询练习"></a>课时1:单表的查询练习</h2><h2 id="课时2-mysql编码问题"><a href="#课时2-mysql编码问题" class="headerlink" title="课时2:mysql编码问题"></a>课时2:mysql编码问题</h2><h2 id="课时3-mysql备份与恢复数据库"><a href="#课时3-mysql备份与恢复数据库" class="headerlink" title="课时3:mysql备份与恢复数据库"></a>课时3:mysql备份与恢复数据库</h2><h2 id="课时4-约束之主键约束"><a href="#课时4-约束之主键约束" class="headerlink" title="课时4:约束之主键约束"></a>课时4:约束之主键约束</h2><h2 id="课时5-主键自增长"><a href="#课时5-主键自增长" class="headerlink" title="课时5:主键自增长"></a>课时5:主键自增长</h2><h2 id="课时6-非空和唯一约束"><a href="#课时6-非空和唯一约束" class="headerlink" title="课时6:非空和唯一约束"></a>课时6:非空和唯一约束</h2><h2 id="课时7-概述模型，对象模型，关系模型"><a href="#课时7-概述模型，对象模型，关系模型" class="headerlink" title="课时7:概述模型，对象模型，关系模型"></a>课时7:概述模型，对象模型，关系模型</h2><h2 id="课时8-外键约束"><a href="#课时8-外键约束" class="headerlink" title="课时8:外键约束"></a>课时8:外键约束</h2><h2 id="课时9-一对一关系"><a href="#课时9-一对一关系" class="headerlink" title="课时9:一对一关系"></a>课时9:一对一关系</h2><h2 id="课时10-多对多关系"><a href="#课时10-多对多关系" class="headerlink" title="课时10:多对多关系"></a>课时10:多对多关系</h2><h2 id="课时11-合并结果集"><a href="#课时11-合并结果集" class="headerlink" title="课时11:合并结果集"></a>课时11:合并结果集</h2><h2 id="课时12-连接查询之内连接-方言"><a href="#课时12-连接查询之内连接-方言" class="headerlink" title="课时12:连接查询之内连接(方言)"></a>课时12:连接查询之内连接(方言)</h2><h2 id="课时13-连接查询之内连接-标签和自然"><a href="#课时13-连接查询之内连接-标签和自然" class="headerlink" title="课时13:连接查询之内连接(标签和自然)"></a>课时13:连接查询之内连接(标签和自然)</h2><h2 id="课时14-连接查询之外连接"><a href="#课时14-连接查询之外连接" class="headerlink" title="课时14:连接查询之外连接"></a>课时14:连接查询之外连接</h2><h2 id="课时15-子查询"><a href="#课时15-子查询" class="headerlink" title="课时15:子查询"></a>课时15:子查询</h2><h2 id="课时16-多表查询练习第1题"><a href="#课时16-多表查询练习第1题" class="headerlink" title="课时16:多表查询练习第1题"></a>课时16:多表查询练习第1题</h2><h2 id="课时17-多表查询练习第2题"><a href="#课时17-多表查询练习第2题" class="headerlink" title="课时17:多表查询练习第2题"></a>课时17:多表查询练习第2题</h2><h2 id="课时18-多表查询练习第4题"><a href="#课时18-多表查询练习第4题" class="headerlink" title="课时18:多表查询练习第4题"></a>课时18:多表查询练习第4题</h2><h2 id="课时19-多表查询练习第5题"><a href="#课时19-多表查询练习第5题" class="headerlink" title="课时19:多表查询练习第5题"></a>课时19:多表查询练习第5题</h2><h2 id="课时20-多表查询练习第7题"><a href="#课时20-多表查询练习第7题" class="headerlink" title="课时20:多表查询练习第7题"></a>课时20:多表查询练习第7题</h2><h2 id="课时21-多表查询练习第8题"><a href="#课时21-多表查询练习第8题" class="headerlink" title="课时21:多表查询练习第8题"></a>课时21:多表查询练习第8题</h2><h2 id="课时22-多表查询练习第9题"><a href="#课时22-多表查询练习第9题" class="headerlink" title="课时22:多表查询练习第9题"></a>课时22:多表查询练习第9题</h2><h2 id="课时23-多表查询练习第10题"><a href="#课时23-多表查询练习第10题" class="headerlink" title="课时23:多表查询练习第10题"></a>课时23:多表查询练习第10题</h2><h2 id="课时24-多表查询练习第11题"><a href="#课时24-多表查询练习第11题" class="headerlink" title="课时24:多表查询练习第11题"></a>课时24:多表查询练习第11题</h2><h2 id="课时25-多表查询练习第13题"><a href="#课时25-多表查询练习第13题" class="headerlink" title="课时25: 多表查询练习第13题"></a>课时25: 多表查询练习第13题</h2><h1 id="系列三-JDBC数据库开发入门"><a href="#系列三-JDBC数据库开发入门" class="headerlink" title="系列三:JDBC数据库开发入门"></a>系列三:JDBC数据库开发入门</h1><h2 id="课时1-什么是JDBC"><a href="#课时1-什么是JDBC" class="headerlink" title="课时1:什么是JDBC"></a>课时1:什么是JDBC</h2><h2 id="课时2-JDBC的原理"><a href="#课时2-JDBC的原理" class="headerlink" title="课时2:JDBC的原理"></a>课时2:JDBC的原理</h2><h2 id="课时3-JDBC完成增删改查"><a href="#课时3-JDBC完成增删改查" class="headerlink" title="课时3:JDBC完成增删改查"></a>课时3:JDBC完成增删改查</h2><h2 id="课时4-JDBC之代码规范化"><a href="#课时4-JDBC之代码规范化" class="headerlink" title="课时4:JDBC之代码规范化"></a>课时4:JDBC之代码规范化</h2><h2 id="课时5-结果集光标与元数据"><a href="#课时5-结果集光标与元数据" class="headerlink" title="课时5:结果集光标与元数据"></a>课时5:结果集光标与元数据</h2><h2 id="课时6-结果集的特性-是否可滚动，是否敏感，是否可更新"><a href="#课时6-结果集的特性-是否可滚动，是否敏感，是否可更新" class="headerlink" title="课时6:结果集的特性(是否可滚动，是否敏感，是否可更新)"></a>课时6:结果集的特性(是否可滚动，是否敏感，是否可更新)</h2><h2 id="课时7-PreparedStatement的用法"><a href="#课时7-PreparedStatement的用法" class="headerlink" title="课时7:PreparedStatement的用法"></a>课时7:PreparedStatement的用法</h2><h2 id="课时8-预处理的原理"><a href="#课时8-预处理的原理" class="headerlink" title="课时8:预处理的原理"></a>课时8:预处理的原理</h2><h2 id="课时9-mysql的预编译功能默认是关闭的"><a href="#课时9-mysql的预编译功能默认是关闭的" class="headerlink" title="课时9:mysql的预编译功能默认是关闭的"></a>课时9:mysql的预编译功能默认是关闭的</h2><h2 id="课时10-JdbcUtils1-0小工具"><a href="#课时10-JdbcUtils1-0小工具" class="headerlink" title="课时10:JdbcUtils1.0小工具"></a>课时10:JdbcUtils1.0小工具</h2><h2 id="课时11-面向接口编程"><a href="#课时11-面向接口编程" class="headerlink" title="课时11:面向接口编程"></a>课时11:面向接口编程</h2><h2 id="课时12-修改day14的登录注册案例，其中dao层为jdbc"><a href="#课时12-修改day14的登录注册案例，其中dao层为jdbc" class="headerlink" title="课时12:修改day14的登录注册案例，其中dao层为jdbc"></a>课时12:修改day14的登录注册案例，其中dao层为jdbc</h2><h2 id="课时13-util包下的Data与sql包下的时间类型之间的转换"><a href="#课时13-util包下的Data与sql包下的时间类型之间的转换" class="headerlink" title="课时13:util包下的Data与sql包下的时间类型之间的转换"></a>课时13:util包下的Data与sql包下的时间类型之间的转换</h2><h2 id="课时14-大数据"><a href="#课时14-大数据" class="headerlink" title="课时14:大数据"></a>课时14:大数据</h2><h2 id="课时15-批处理"><a href="#课时15-批处理" class="headerlink" title="课时15:批处理"></a>课时15:批处理</h2><h1 id="系列四-JDBC数据库开发进阶"><a href="#系列四-JDBC数据库开发进阶" class="headerlink" title="系列四:JDBC数据库开发进阶"></a>系列四:JDBC数据库开发进阶</h1><h2 id="课时1-事务的四大特性-ACID"><a href="#课时1-事务的四大特性-ACID" class="headerlink" title="课时1:事务的四大特性(ACID)"></a>课时1:事务的四大特性(ACID)</h2><h2 id="课时2-Mysql开启和关闭事务"><a href="#课时2-Mysql开启和关闭事务" class="headerlink" title="课时2:Mysql开启和关闭事务"></a>课时2:Mysql开启和关闭事务</h2><h2 id="课时3-JDBC中完成事务处理"><a href="#课时3-JDBC中完成事务处理" class="headerlink" title="课时3:JDBC中完成事务处理"></a>课时3:JDBC中完成事务处理</h2><h2 id="课时4-事务的隔离级别"><a href="#课时4-事务的隔离级别" class="headerlink" title="课时4:事务的隔离级别"></a>课时4:事务的隔离级别</h2><h2 id="课时5-dbcp连接池"><a href="#课时5-dbcp连接池" class="headerlink" title="课时5:dbcp连接池"></a>课时5:dbcp连接池</h2><h2 id="课时6-装饰者模式"><a href="#课时6-装饰者模式" class="headerlink" title="课时6:装饰者模式"></a>课时6:装饰者模式</h2><h2 id="课时7-c3p0连接池的基本使用方式"><a href="#课时7-c3p0连接池的基本使用方式" class="headerlink" title="课时7:c3p0连接池的基本使用方式"></a>课时7:c3p0连接池的基本使用方式</h2><h2 id="课时8-c3p0连接的配置文件使用"><a href="#课时8-c3p0连接的配置文件使用" class="headerlink" title="课时8:c3p0连接的配置文件使用"></a>课时8:c3p0连接的配置文件使用</h2><h2 id="课时9-JdbcUtils"><a href="#课时9-JdbcUtils" class="headerlink" title="课时9:JdbcUtils"></a>课时9:JdbcUtils</h2><h2 id="课时10-JdbcUtils小工具"><a href="#课时10-JdbcUtils小工具" class="headerlink" title="课时10:JdbcUtils小工具"></a>课时10:JdbcUtils小工具</h2><h2 id="课时11-JNDI配置"><a href="#课时11-JNDI配置" class="headerlink" title="课时11:JNDI配置"></a>课时11:JNDI配置</h2><h2 id="课时12-ThreadLocal"><a href="#课时12-ThreadLocal" class="headerlink" title="课时12:ThreadLocal"></a>课时12:ThreadLocal</h2><h2 id="课时13-dbUtils原理"><a href="#课时13-dbUtils原理" class="headerlink" title="课时13:dbUtils原理"></a>课时13:dbUtils原理</h2><h2 id="课时14-dbUtils结果集处理器介绍"><a href="#课时14-dbUtils结果集处理器介绍" class="headerlink" title="课时14:dbUtils结果集处理器介绍"></a>课时14:dbUtils结果集处理器介绍</h2><h2 id="课时15-编写TxQueryRunner配合JdbcUtils来处理事务"><a href="#课时15-编写TxQueryRunner配合JdbcUtils来处理事务" class="headerlink" title="课时15:编写TxQueryRunner配合JdbcUtils来处理事务"></a>课时15:编写TxQueryRunner配合JdbcUtils来处理事务</h2><h2 id="课时16-JdbcUtils处理多线程并发访问问题"><a href="#课时16-JdbcUtils处理多线程并发访问问题" class="headerlink" title="课时16:JdbcUtils处理多线程并发访问问题"></a>课时16:JdbcUtils处理多线程并发访问问题</h2><h2 id="课时17-分页准备工作"><a href="#课时17-分页准备工作" class="headerlink" title="课时17:分页准备工作"></a>课时17:分页准备工作</h2><h2 id="课时18-处理分页各层分工"><a href="#课时18-处理分页各层分工" class="headerlink" title="课时18:处理分页各层分工"></a>课时18:处理分页各层分工</h2><h2 id="课时19-分页处理第一阶段完成"><a href="#课时19-分页处理第一阶段完成" class="headerlink" title="课时19:分页处理第一阶段完成"></a>课时19:分页处理第一阶段完成</h2><h2 id="课时20-分页之页面页码列表计算"><a href="#课时20-分页之页面页码列表计算" class="headerlink" title="课时20:分页之页面页码列表计算"></a>课时20:分页之页面页码列表计算</h2><h2 id="课时21-分页之查询条件丢失问题"><a href="#课时21-分页之查询条件丢失问题" class="headerlink" title="课时21:分页之查询条件丢失问题"></a>课时21:分页之查询条件丢失问题</h2><h2 id="课时22-分页之查询条件保存到PageBean的url中"><a href="#课时22-分页之查询条件保存到PageBean的url中" class="headerlink" title="课时22:分页之查询条件保存到PageBean的url中"></a>课时22:分页之查询条件保存到PageBean的url中</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系列一-数据库及SQL-MySQL基础&quot;&gt;&lt;a href=&quot;#系列一-数据库及SQL-MySQL基础&quot; class=&quot;headerlink&quot; title=&quot;系列一:数据库及SQL/MySQL基础&quot;&gt;&lt;/a&gt;系列一:数据库及SQL/MySQL基础&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pod中挂载单个文件的方法</title>
    <link href="http://yoursite.com/2020/01/06/Pod%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/06/Pod%E4%B8%AD%E6%8C%82%E8%BD%BD%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-06T01:47:44.000Z</published>
    <updated>2020-01-06T01:47:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用的Dockerfile文件</title>
    <link href="http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84Dockerfile%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84Dockerfile%E6%96%87%E4%BB%B6/</id>
    <published>2020-01-03T01:55:30.000Z</published>
    <updated>2020-02-24T08:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础JAR"><a href="#基础JAR" class="headerlink" title="基础JAR"></a>基础JAR</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">MAINTAINER OPS &quot;Zhou Jinliang&quot;</span><br><span class="line"></span><br><span class="line">ENV REFRESHED_AT 2019-08-24</span><br><span class="line"></span><br><span class="line">RUN yum -y install net-tools &amp;&amp; yum clean all &amp;&amp; \</span><br><span class="line">    mkdir -p /ztocwst/server &amp;&amp; \</span><br><span class="line">    echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">ADD jdk-8u211-linux-x64.tar.gz /usr/</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME=/usr/jdk1.8.0_211</span><br><span class="line">ENV JRE_HOME=/usr/jdk1.8.0_211/jre</span><br><span class="line">ENV CLASSPATH=.:/usr/jdk1.8.0_211/lib/dt.jar:/usr/jdk1.8.0_211/lib/tools.jar:/usr/jdk1.8.0_211/lib:/usr/jdk1.8.0_211/jre/lib:</span><br><span class="line">ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/jdk1.8.0_211/bin</span><br><span class="line">ENV LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;]</span><br></pre></td></tr></table></figure><h1 id="MAVEN"><a href="#MAVEN" class="headerlink" title="MAVEN"></a>MAVEN</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:centos7</span><br><span class="line">MAINTAINER ZhouJinliang:2020/01/02</span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-maven-3.6.3-bin.tar.gz /usr/local/</span><br><span class="line">RUN yum install epel-release git unzip wget net-tools -y &amp;&amp; yum clean all</span><br><span class="line">WORKDIR /ztocwst</span><br><span class="line">ENV MAVEN_HOME /usr/local/apache-maven-3.6.3</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_231</span><br><span class="line">ENV PATH $PATH:$MAVEN_HOME/bin:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础JAR&quot;&gt;&lt;a href=&quot;#基础JAR&quot; class=&quot;headerlink&quot; title=&quot;基础JAR&quot;&gt;&lt;/a&gt;基础JAR&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用的docker-compose文件</title>
    <link href="http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84docker-compose%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/01/03/%E5%B8%B8%E7%94%A8%E7%9A%84docker-compose%E6%96%87%E4%BB%B6/</id>
    <published>2020-01-03T01:55:16.000Z</published>
    <updated>2020-01-03T04:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>docker-compose.yml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:4.0.13</span><br><span class="line">    container_name: redis</span><br><span class="line">    restart: always</span><br><span class="line">    command: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    ports:</span><br><span class="line">      - 6379:6379</span><br><span class="line">    volumes:</span><br><span class="line">      - $PWD/data:/data</span><br><span class="line">      - $PWD/conf/redis.conf:/usr/local/etc/redis/redis.conf</span><br><span class="line">      - /etc/timezone:/etc/timezone</span><br></pre></td></tr></table></figure><p>redis.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">requirepass password</span><br><span class="line">maxclients 20000</span><br></pre></td></tr></table></figure><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>docker-compose.yml:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: '3'</span><br><span class="line">services:</span><br><span class="line">    db:</span><br><span class="line">        #构建mysql镜像</span><br><span class="line">        image: mysql:5.7.28</span><br><span class="line">        container_name: mysql</span><br><span class="line">        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci #设置utf8字符集</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">          MYSQL_ROOT_PASSWORD: password</span><br><span class="line">        ports:</span><br><span class="line">          - '3306:3306'</span><br><span class="line">        volumes:</span><br><span class="line">          - "/ztocwst/mysql/db:/var/lib/mysql"</span><br><span class="line">          - "/ztocwst/mysql/conf:/etc/mysql/conf.d"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;docker-compose.yml:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
